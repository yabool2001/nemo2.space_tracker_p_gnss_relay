
nemo2.space_tracker_p_gnss_relay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac54  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800ad10  0800ad10  0001ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b344  0800b344  000206f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b34c  0800b34c  000206f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b354  0800b354  0001b354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f0  20000000  0800b358  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200006f0  0800ba48  000206f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d90  0800ba48  00020d90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020718  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012360  00000000  00000000  0002075b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d4  00000000  00000000  00032abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00035290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc3  00000000  00000000  000362f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea92  00000000  00000000  00036fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014582  00000000  00000000  00055a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf86b  00000000  00000000  00069fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e44  00000000  00000000  0012983c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006f0 	.word	0x200006f0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800acf8 	.word	0x0800acf8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006f4 	.word	0x200006f4
 8000100:	0800acf8 	.word	0x0800acf8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800aef0 	.word	0x0800aef0
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f000 fda8 	bl	8002eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f87a 	bl	8002460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f000 f980 	bl	8002670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002370:	f000 f8fc 	bl	800256c <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8002374:	f000 f948 	bl	8002608 <MX_USART5_UART_Init>
  MX_TIM6_Init();
 8002378:	f000 f8ba 	bl	80024f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay ( 5000 ) ;
 800237c:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <main+0xd0>)
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fe20 	bl	8002fc4 <HAL_Delay>
  my_tim_init () ;
 8002384:	f000 fa4c 	bl	8002820 <my_tim_init>
  HAL_UART_Transmit ( &huart2 , hello , strlen ( hello ) , UART2_TX_TIMEOUT ) ;
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <main+0xd4>)
 800238a:	681c      	ldr	r4, [r3, #0]
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <main+0xd4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0018      	movs	r0, r3
 8002392:	f7fd feb7 	bl	8000104 <strlen>
 8002396:	0003      	movs	r3, r0
 8002398:	b29a      	uxth	r2, r3
 800239a:	23fa      	movs	r3, #250	; 0xfa
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4826      	ldr	r0, [pc, #152]	; (8002438 <main+0xd8>)
 80023a0:	0021      	movs	r1, r4
 80023a2:	f002 fbe9 	bl	8004b78 <HAL_UART_Transmit>

  send_command ( get_nmea_br , false ) ;
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <main+0xdc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2100      	movs	r1, #0
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 fa81 	bl	80028b4 <send_command>
  send_command ( get_nav_mode , false ) ;
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <main+0xe0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2100      	movs	r1, #0
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fa7b 	bl	80028b4 <send_command>
  send_command ( get_sbas_status , false ) ;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <main+0xe4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2100      	movs	r1, #0
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 fa75 	bl	80028b4 <send_command>
  send_command ( get_fix_outputrate , false ) ;
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <main+0xe8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2100      	movs	r1, #0
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fa6f 	bl	80028b4 <send_command>
  send_command ( set_gga_0_outputrate , false ) ;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <main+0xec>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 fa69 	bl	80028b4 <send_command>
  send_command ( get_gga_outputrate , false ) ;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <main+0xf0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2100      	movs	r1, #0
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 fa63 	bl	80028b4 <send_command>
  send_command ( set_vtg_0_outputrate , false ) ;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <main+0xf4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2100      	movs	r1, #0
 80023f4:	0018      	movs	r0, r3
 80023f6:	f000 fa5d 	bl	80028b4 <send_command>
  send_command ( get_vtg_outputrate , false ) ;
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <main+0xf8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2100      	movs	r1, #0
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fa57 	bl	80028b4 <send_command>
  send_command_save_nram () ;
 8002406:	f000 fab1 	bl	800296c <send_command_save_nram>
  HAL_UART_Transmit ( &huart2 , res , len , UART2_TX_TIMEOUT ) ; // muszę dodać 6
  my_gnss_sw_on() ;
  my_tim_start () ;
  HAL_Delay ( 1000 ) ;
  HAL_UART_Transmit ( &huart5 , res , len , UART2_TX_TIMEOUT ) ;*/
  HAL_UART_Transmit ( &huart2 , goodby , strlen ( goodby ) , UART2_TX_TIMEOUT ) ;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <main+0xfc>)
 800240c:	681c      	ldr	r4, [r3, #0]
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <main+0xfc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0018      	movs	r0, r3
 8002414:	f7fd fe76 	bl	8000104 <strlen>
 8002418:	0003      	movs	r3, r0
 800241a:	b29a      	uxth	r2, r3
 800241c:	23fa      	movs	r3, #250	; 0xfa
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <main+0xd8>)
 8002422:	0021      	movs	r1, r4
 8002424:	f002 fba8 	bl	8004b78 <HAL_UART_Transmit>
  HAL_PWREx_EnterSHUTDOWNMode () ;
 8002428:	f001 f8ae 	bl	8003588 <HAL_PWREx_EnterSHUTDOWNMode>
  //HAL_UART_Transmit ( &huart5 , &terminal_rx_byte , 1 , UART2_TX_TIMEOUT ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800242c:	e7fe      	b.n	800242c <main+0xcc>
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	00001388 	.word	0x00001388
 8002434:	20000000 	.word	0x20000000
 8002438:	20000758 	.word	0x20000758
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000010 	.word	0x20000010
 8002444:	20000014 	.word	0x20000014
 8002448:	20000018 	.word	0x20000018
 800244c:	20000024 	.word	0x20000024
 8002450:	2000001c 	.word	0x2000001c
 8002454:	20000028 	.word	0x20000028
 8002458:	20000020 	.word	0x20000020
 800245c:	20000004 	.word	0x20000004

08002460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b095      	sub	sp, #84	; 0x54
 8002464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002466:	2414      	movs	r4, #20
 8002468:	193b      	adds	r3, r7, r4
 800246a:	0018      	movs	r0, r3
 800246c:	233c      	movs	r3, #60	; 0x3c
 800246e:	001a      	movs	r2, r3
 8002470:	2100      	movs	r1, #0
 8002472:	f004 f8f3 	bl	800665c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	0018      	movs	r0, r3
 800247a:	2310      	movs	r3, #16
 800247c:	001a      	movs	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	f004 f8ec 	bl	800665c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	0018      	movs	r0, r3
 800248a:	f001 f83d 	bl	8003508 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2202      	movs	r2, #2
 8002492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002494:	193b      	adds	r3, r7, r4
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	0052      	lsls	r2, r2, #1
 800249a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 f88f 	bl	80035d4 <HAL_RCC_OscConfig>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80024ba:	f000 fafd 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2100      	movs	r1, #0
 80024da:	0018      	movs	r0, r3
 80024dc:	f001 fbda 	bl	8003c94 <HAL_RCC_ClockConfig>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80024e4:	f000 fae8 	bl	8002ab8 <Error_Handler>
  }
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b015      	add	sp, #84	; 0x54
 80024ee:	bd90      	pop	{r4, r7, pc}

080024f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	0018      	movs	r0, r3
 80024fa:	230c      	movs	r3, #12
 80024fc:	001a      	movs	r2, r3
 80024fe:	2100      	movs	r1, #0
 8002500:	f004 f8ac 	bl	800665c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_TIM6_Init+0x6c>)
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <MX_TIM6_Init+0x70>)
 8002508:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <MX_TIM6_Init+0x6c>)
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <MX_TIM6_Init+0x74>)
 800250e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <MX_TIM6_Init+0x6c>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_TIM6_Init+0x6c>)
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <MX_TIM6_Init+0x78>)
 800251a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <MX_TIM6_Init+0x6c>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_TIM6_Init+0x6c>)
 8002524:	0018      	movs	r0, r3
 8002526:	f001 ff9b 	bl	8004460 <HAL_TIM_Base_Init>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800252e:	f000 fac3 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800253e:	1d3a      	adds	r2, r7, #4
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_TIM6_Init+0x6c>)
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f002 fa33 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800254e:	f000 fab3 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	2000070c 	.word	0x2000070c
 8002560:	40001000 	.word	0x40001000
 8002564:	00003e7f 	.word	0x00003e7f
 8002568:	000003e7 	.word	0x000003e7

0800256c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <MX_USART2_UART_Init+0x94>)
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <MX_USART2_UART_Init+0x98>)
 8002574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <MX_USART2_UART_Init+0x94>)
 8002578:	22e1      	movs	r2, #225	; 0xe1
 800257a:	0252      	lsls	r2, r2, #9
 800257c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <MX_USART2_UART_Init+0x94>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <MX_USART2_UART_Init+0x94>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <MX_USART2_UART_Init+0x94>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <MX_USART2_UART_Init+0x94>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_USART2_UART_Init+0x94>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <MX_USART2_UART_Init+0x94>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025b6:	0018      	movs	r0, r3
 80025b8:	f002 fa88 	bl	8004acc <HAL_UART_Init>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d001      	beq.n	80025c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025c0:	f000 fa7a 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025c6:	2100      	movs	r1, #0
 80025c8:	0018      	movs	r0, r3
 80025ca:	f003 fa23 	bl	8005a14 <HAL_UARTEx_SetTxFifoThreshold>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80025d2:	f000 fa71 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025d8:	2100      	movs	r1, #0
 80025da:	0018      	movs	r0, r3
 80025dc:	f003 fa5a 	bl	8005a94 <HAL_UARTEx_SetRxFifoThreshold>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d001      	beq.n	80025e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80025e4:	f000 fa68 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <MX_USART2_UART_Init+0x94>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f003 f9d8 	bl	80059a0 <HAL_UARTEx_DisableFifoMode>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d001      	beq.n	80025f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80025f4:	f000 fa60 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000758 	.word	0x20000758
 8002604:	40004400 	.word	0x40004400

08002608 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <MX_USART5_UART_Init+0x60>)
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <MX_USART5_UART_Init+0x64>)
 8002610:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002614:	2296      	movs	r2, #150	; 0x96
 8002616:	0192      	lsls	r2, r2, #6
 8002618:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <MX_USART5_UART_Init+0x60>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_USART5_UART_Init+0x60>)
 800262e:	220c      	movs	r2, #12
 8002630:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_USART5_UART_Init+0x60>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <MX_USART5_UART_Init+0x60>)
 800264c:	2200      	movs	r2, #0
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <MX_USART5_UART_Init+0x60>)
 8002652:	0018      	movs	r0, r3
 8002654:	f002 fa3a 	bl	8004acc <HAL_UART_Init>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 800265c:	f000 fa2c 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	200007ec 	.word	0x200007ec
 800266c:	40005000 	.word	0x40005000

08002670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	240c      	movs	r4, #12
 8002678:	193b      	adds	r3, r7, r4
 800267a:	0018      	movs	r0, r3
 800267c:	2314      	movs	r3, #20
 800267e:	001a      	movs	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	f003 ffeb 	bl	800665c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <MX_GPIO_Init+0xac>)
 8002688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <MX_GPIO_Init+0xac>)
 800268c:	2101      	movs	r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	635a      	str	r2, [r3, #52]	; 0x34
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <MX_GPIO_Init+0xac>)
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <MX_GPIO_Init+0xac>)
 80026a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <MX_GPIO_Init+0xac>)
 80026a4:	2102      	movs	r1, #2
 80026a6:	430a      	orrs	r2, r1
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <MX_GPIO_Init+0xac>)
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_SW_CTL1_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 80026b6:	23ac      	movs	r3, #172	; 0xac
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	4819      	ldr	r0, [pc, #100]	; (8002720 <MX_GPIO_Init+0xb0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	0019      	movs	r1, r3
 80026c0:	f000 ff04 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_SW_CTL1_Pin RF_SW_CTL2_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = RF_SW_CTL1_Pin|RF_SW_CTL2_Pin|GNSS_PWR_SW_Pin;
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	228c      	movs	r2, #140	; 0x8c
 80026c8:	0212      	lsls	r2, r2, #8
 80026ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	2201      	movs	r2, #1
 80026d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <MX_GPIO_Init+0xb0>)
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f000 fd85 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80026ea:	0021      	movs	r1, r4
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0192      	lsls	r2, r2, #6
 80026f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2211      	movs	r2, #17
 80026f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002706:	187b      	adds	r3, r7, r1
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <MX_GPIO_Init+0xb0>)
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f000 fd71 	bl	80031f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b009      	add	sp, #36	; 0x24
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40021000 	.word	0x40021000
 8002720:	50000400 	.word	0x50000400

08002724 <my_ant_sw_pos>:

/* USER CODE BEGIN 4 */

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	0002      	movs	r2, r0
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10e      	bne.n	8002756 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4811      	ldr	r0, [pc, #68]	; (8002784 <my_ant_sw_pos+0x60>)
 800273e:	2200      	movs	r2, #0
 8002740:	0019      	movs	r1, r3
 8002742:	f000 fec3 	bl	80034cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <my_ant_sw_pos+0x60>)
 800274c:	2201      	movs	r2, #1
 800274e:	0019      	movs	r1, r3
 8002750:	f000 febc 	bl	80034cc <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002754:	e011      	b.n	800277a <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d10d      	bne.n	800277a <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4808      	ldr	r0, [pc, #32]	; (8002784 <my_ant_sw_pos+0x60>)
 8002764:	2201      	movs	r2, #1
 8002766:	0019      	movs	r1, r3
 8002768:	f000 feb0 	bl	80034cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <my_ant_sw_pos+0x60>)
 8002772:	2200      	movs	r2, #0
 8002774:	0019      	movs	r1, r3
 8002776:	f000 fea9 	bl	80034cc <HAL_GPIO_WritePin>
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	50000400 	.word	0x50000400

08002788 <my_gnss_sw_on>:

// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff ffc9 	bl	8002724 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	4808      	ldr	r0, [pc, #32]	; (80027b8 <my_gnss_sw_on+0x30>)
 8002798:	2201      	movs	r2, #1
 800279a:	0019      	movs	r1, r3
 800279c:	f000 fe96 	bl	80034cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	019b      	lsls	r3, r3, #6
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <my_gnss_sw_on+0x30>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	0019      	movs	r1, r3
 80027aa:	f000 fe8f 	bl	80034cc <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 80027ae:	f7ff ff2b 	bl	8002608 <MX_USART5_UART_Init>
}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	50000400 	.word	0x50000400

080027bc <q1_check_xor>:
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( &huart5 ) ;

}
unsigned char q1_check_xor ( const uint8_t *m , uint8_t l )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	000a      	movs	r2, r1
 80027c6:	1cfb      	adds	r3, r7, #3
 80027c8:	701a      	strb	r2, [r3, #0]
	unsigned char result = 0 ;
 80027ca:	230f      	movs	r3, #15
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0 ;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]

	if ( ( NULL == m ) || ( l < 1 ) )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <q1_check_xor+0x28>
 80027dc:	1cfb      	adds	r3, r7, #3
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <q1_check_xor+0x2c>
	{
		return 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e017      	b.n	8002818 <q1_check_xor+0x5c>
	}
	for ( i = 0 ; i < l ; i++ )
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e00c      	b.n	8002808 <q1_check_xor+0x4c>
	{
		result ^= *( m + i ) ;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	18d3      	adds	r3, r2, r3
 80027f4:	7819      	ldrb	r1, [r3, #0]
 80027f6:	220f      	movs	r2, #15
 80027f8:	18bb      	adds	r3, r7, r2
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	404a      	eors	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < l ; i++ )
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	1cfb      	adds	r3, r7, #3
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d3ed      	bcc.n	80027ee <q1_check_xor+0x32>
	}
	return result ;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}

08002820 <my_tim_init>:

void my_tim_init (void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <my_tim_init+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2202      	movs	r2, #2
 800282a:	4252      	negs	r2, r2
 800282c:	611a      	str	r2, [r3, #16]
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2000070c 	.word	0x2000070c

08002838 <my_tim_start>:

void my_tim_start (void )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <my_tim_start+0x18>)
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <my_tim_start+0x1c>)
 8002844:	0018      	movs	r0, r3
 8002846:	f001 fe63 	bl	8004510 <HAL_TIM_Base_Start_IT>
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000a80 	.word	0x20000a80
 8002854:	2000070c 	.word	0x2000070c

08002858 <my_tim_stop>:

void my_tim_stop (void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <my_tim_stop+0x14>)
 800285e:	0018      	movs	r0, r3
 8002860:	f001 feb8 	bl	80045d4 <HAL_TIM_Base_Stop_IT>
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	2000070c 	.word	0x2000070c

08002870 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10d      	bne.n	800289e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800288c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > tim_seconds_ths_sys_shutdown )
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d901      	bls.n	800289e <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  //HAL_NVIC_SystemReset () ;
			  HAL_PWREx_EnterSHUTDOWNMode () ;
 800289a:	f000 fe75 	bl	8003588 <HAL_PWREx_EnterSHUTDOWNMode>
		  }
	}
}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40001000 	.word	0x40001000
 80028ac:	20000a80 	.word	0x20000a80
 80028b0:	2000002c 	.word	0x2000002c

080028b4 <send_command>:

void send_command ( const char* c1 , bool save_nram )
{
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	000a      	movs	r2, r1
 80028be:	1cfb      	adds	r3, r7, #3
 80028c0:	701a      	strb	r2, [r3, #0]
	size_t len_c1 = strlen ( c1 ) ;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fd fc1d 	bl	8000104 <strlen>
 80028ca:	0003      	movs	r3, r0
 80028cc:	61fb      	str	r3, [r7, #28]
	char cs = q1_check_xor ( c1 , len_c1 ) ;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	251b      	movs	r5, #27
 80028d4:	197c      	adds	r4, r7, r5
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0011      	movs	r1, r2
 80028da:	0018      	movs	r0, r3
 80028dc:	f7ff ff6e 	bl	80027bc <q1_check_xor>
 80028e0:	0003      	movs	r3, r0
 80028e2:	7023      	strb	r3, [r4, #0]
	char* c2 = (char*) malloc ( ( len_c1 + 7 ) * sizeof ( char ) ) ; // Dodanie 7 wynika z konieczności uwzględnienia znaków: prexi $ i sufix *XX\n\r\0 , gdzie XX to checksum
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3307      	adds	r3, #7
 80028e8:	0018      	movs	r0, r3
 80028ea:	f003 fac7 	bl	8005e7c <malloc>
 80028ee:	0003      	movs	r3, r0
 80028f0:	617b      	str	r3, [r7, #20]
	size_t len_c2 = strlen ( c2 ) ;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fd fc05 	bl	8000104 <strlen>
 80028fa:	0003      	movs	r3, r0
 80028fc:	613b      	str	r3, [r7, #16]
	sprintf ( c2 , "$%s*%X\r\n\0" , c1 , cs ) ;
 80028fe:	197b      	adds	r3, r7, r5
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4916      	ldr	r1, [pc, #88]	; (8002960 <send_command+0xac>)
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f003 fe3c 	bl	8006584 <sprintf>
	size_t len_2 = strlen ( c2 ) ;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fbf8 	bl	8000104 <strlen>
 8002914:	0003      	movs	r3, r0
 8002916:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit ( &huart2 , c2 , len_c2 , UART2_TX_TIMEOUT ) ;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29a      	uxth	r2, r3
 800291c:	23fa      	movs	r3, #250	; 0xfa
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	4810      	ldr	r0, [pc, #64]	; (8002964 <send_command+0xb0>)
 8002924:	f002 f928 	bl	8004b78 <HAL_UART_Transmit>
	my_gnss_sw_on() ;
 8002928:	f7ff ff2e 	bl	8002788 <my_gnss_sw_on>
	HAL_Delay ( 1000 ) ;
 800292c:	23fa      	movs	r3, #250	; 0xfa
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fb47 	bl	8002fc4 <HAL_Delay>
	HAL_UART_Transmit ( &huart5 , c2 , len_c2 , UART2_TX_TIMEOUT ) ;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	b29a      	uxth	r2, r3
 800293a:	23fa      	movs	r3, #250	; 0xfa
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	4809      	ldr	r0, [pc, #36]	; (8002968 <send_command+0xb4>)
 8002942:	f002 f919 	bl	8004b78 <HAL_UART_Transmit>
	get_command_result () ;
 8002946:	f000 f849 	bl	80029dc <get_command_result>
	if ( save_nram )
 800294a:	1cfb      	adds	r3, r7, #3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <send_command+0xa2>
		send_command_save_nram () ;
 8002952:	f000 f80b 	bl	800296c <send_command_save_nram>
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b008      	add	sp, #32
 800295c:	bdb0      	pop	{r4, r5, r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	0800ae7c 	.word	0x0800ae7c
 8002964:	20000758 	.word	0x20000758
 8002968:	200007ec 	.word	0x200007ec

0800296c <send_command_save_nram>:

void send_command_save_nram ()
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
	size_t len_c2 = strlen ( save_nvram ) ;
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <send_command_save_nram+0x60>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0018      	movs	r0, r3
 8002978:	f7fd fbc4 	bl	8000104 <strlen>
 800297c:	0003      	movs	r3, r0
 800297e:	607b      	str	r3, [r7, #4]

	HAL_UART_Transmit ( &huart2 , save_nvram , len_c2 , UART2_TX_TIMEOUT ) ;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <send_command_save_nram+0x60>)
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	b29a      	uxth	r2, r3
 8002988:	23fa      	movs	r3, #250	; 0xfa
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4810      	ldr	r0, [pc, #64]	; (80029d0 <send_command_save_nram+0x64>)
 800298e:	f002 f8f3 	bl	8004b78 <HAL_UART_Transmit>
	my_gnss_sw_on() ;
 8002992:	f7ff fef9 	bl	8002788 <my_gnss_sw_on>
	HAL_Delay ( 1000 ) ;
 8002996:	23fa      	movs	r3, #250	; 0xfa
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fb12 	bl	8002fc4 <HAL_Delay>
	HAL_UART_Transmit ( &huart5 , save_nvram , len_c2 , UART2_TX_TIMEOUT ) ;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <send_command_save_nram+0x60>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	23fa      	movs	r3, #250	; 0xfa
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4809      	ldr	r0, [pc, #36]	; (80029d4 <send_command_save_nram+0x68>)
 80029ae:	f002 f8e3 	bl	8004b78 <HAL_UART_Transmit>
	HAL_UART_Transmit ( &huart5 , &terminal_rx_byte , 1 , UART2_TX_TIMEOUT ) ;
 80029b2:	23fa      	movs	r3, #250	; 0xfa
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4908      	ldr	r1, [pc, #32]	; (80029d8 <send_command_save_nram+0x6c>)
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <send_command_save_nram+0x68>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	f002 f8dc 	bl	8004b78 <HAL_UART_Transmit>
	get_command_result () ;
 80029c0:	f000 f80c 	bl	80029dc <get_command_result>
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000008 	.word	0x20000008
 80029d0:	20000758 	.word	0x20000758
 80029d4:	200007ec 	.word	0x200007ec
 80029d8:	20000a74 	.word	0x20000a74

080029dc <get_command_result>:

void get_command_result ()
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
	my_gnss_command_response[0][0] = '\0' ;
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <get_command_result+0x8c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
	my_gnss_command_response[1][0] = '\0' ;
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <get_command_result+0x8c>)
 80029ea:	22fa      	movs	r2, #250	; 0xfa
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]
	if ( my_gnss_get_pair ( my_gnss_command_response ) )
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <get_command_result+0x8c>)
 80029f2:	0018      	movs	r0, r3
 80029f4:	f003 f8ee 	bl	8005bd4 <my_gnss_get_pair>
 80029f8:	1e03      	subs	r3, r0, #0
 80029fa:	d02a      	beq.n	8002a52 <get_command_result+0x76>
	{
		for (uint8_t i = 0 ; i < 2 ; i++ )
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e022      	b.n	8002a4a <get_command_result+0x6e>
		{
			if ( my_gnss_command_response[i][0] != '\0' ) ;
			{
				HAL_UART_Transmit ( &HUART_DBG , my_gnss_command_response[i] , strlen ( my_gnss_command_response[i] ) , UART2_TX_TIMEOUT ) ;
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	22fa      	movs	r2, #250	; 0xfa
 8002a0a:	435a      	muls	r2, r3
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <get_command_result+0x8c>)
 8002a0e:	18d4      	adds	r4, r2, r3
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	22fa      	movs	r2, #250	; 0xfa
 8002a16:	435a      	muls	r2, r3
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <get_command_result+0x8c>)
 8002a1a:	18d3      	adds	r3, r2, r3
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fd fb71 	bl	8000104 <strlen>
 8002a22:	0003      	movs	r3, r0
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	23fa      	movs	r3, #250	; 0xfa
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4810      	ldr	r0, [pc, #64]	; (8002a6c <get_command_result+0x90>)
 8002a2c:	0021      	movs	r1, r4
 8002a2e:	f002 f8a3 	bl	8004b78 <HAL_UART_Transmit>
				HAL_UART_Transmit ( &HUART_DBG , "\r\n" , 2 , UART2_TX_TIMEOUT ) ;
 8002a32:	23fa      	movs	r3, #250	; 0xfa
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	490e      	ldr	r1, [pc, #56]	; (8002a70 <get_command_result+0x94>)
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <get_command_result+0x90>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f002 f89c 	bl	8004b78 <HAL_UART_Transmit>
		for (uint8_t i = 0 ; i < 2 ; i++ )
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	3201      	adds	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d9d8      	bls.n	8002a04 <get_command_result+0x28>
			}
		}
	}
	HAL_UART_Transmit ( &HUART_DBG , "\r\n" , 2 , UART2_TX_TIMEOUT ) ;
 8002a52:	23fa      	movs	r3, #250	; 0xfa
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4906      	ldr	r1, [pc, #24]	; (8002a70 <get_command_result+0x94>)
 8002a58:	4804      	ldr	r0, [pc, #16]	; (8002a6c <get_command_result+0x90>)
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f002 f88c 	bl	8004b78 <HAL_UART_Transmit>
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b003      	add	sp, #12
 8002a66:	bd90      	pop	{r4, r7, pc}
 8002a68:	20000880 	.word	0x20000880
 8002a6c:	20000758 	.word	0x20000758
 8002a70:	0800ae78 	.word	0x0800ae78

08002a74 <my_gnss_receive_byte>:

void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	1cfb      	adds	r3, r7, #3
 8002a80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_RX_TIMEOUT ) ;
 8002a82:	23fa      	movs	r3, #250	; 0xfa
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <my_gnss_receive_byte+0x3c>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f002 f918 	bl	8004cc0 <HAL_UART_Receive>
	if ( verbose )
 8002a90:	1cfb      	adds	r3, r7, #3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TX_TIMEOUT ) ;
 8002a98:	23fa      	movs	r3, #250	; 0xfa
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <my_gnss_receive_byte+0x40>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f002 f869 	bl	8004b78 <HAL_UART_Transmit>
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	200007ec 	.word	0x200007ec
 8002ab4:	20000758 	.word	0x20000758

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <Error_Handler+0x8>
	...

08002ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_MspInit+0x4c>)
 8002acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_MspInit+0x4c>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_MspInit+0x4c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_MspInit+0x4c>)
 8002ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_MspInit+0x4c>)
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	0549      	lsls	r1, r1, #21
 8002aec:	430a      	orrs	r2, r1
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_MspInit+0x4c>)
 8002af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	055b      	lsls	r3, r3, #21
 8002af8:	4013      	ands	r3, r2
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002afe:	23c0      	movs	r3, #192	; 0xc0
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fa82 	bl	800300c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_TIM_Base_MspInit+0x44>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d113      	bne.n	8002b4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_TIM_Base_MspInit+0x48>)
 8002b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_TIM_Base_MspInit+0x48>)
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_TIM_Base_MspInit+0x48>)
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2210      	movs	r2, #16
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2103      	movs	r1, #3
 8002b42:	2011      	movs	r0, #17
 8002b44:	f000 fb24 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002b48:	2011      	movs	r0, #17
 8002b4a:	f000 fb36 	bl	80031ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	40001000 	.word	0x40001000
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b09f      	sub	sp, #124	; 0x7c
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	2364      	movs	r3, #100	; 0x64
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	2314      	movs	r3, #20
 8002b70:	001a      	movs	r2, r3
 8002b72:	2100      	movs	r1, #0
 8002b74:	f003 fd72 	bl	800665c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b78:	2418      	movs	r4, #24
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	234c      	movs	r3, #76	; 0x4c
 8002b80:	001a      	movs	r2, r3
 8002b82:	2100      	movs	r1, #0
 8002b84:	f003 fd6a 	bl	800665c <memset>
  if(huart->Instance==USART2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a3d      	ldr	r2, [pc, #244]	; (8002c84 <HAL_UART_MspInit+0x124>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d13f      	bne.n	8002c12 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f001 fa21 	bl	8003fe8 <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002baa:	f7ff ff85 	bl	8002ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	0289      	lsls	r1, r1, #10
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002be2:	2164      	movs	r1, #100	; 0x64
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	2202      	movs	r2, #2
 8002bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2201      	movs	r2, #1
 8002c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	187a      	adds	r2, r7, r1
 8002c04:	23a0      	movs	r3, #160	; 0xa0
 8002c06:	05db      	lsls	r3, r3, #23
 8002c08:	0011      	movs	r1, r2
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 faf2 	bl	80031f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8002c10:	e034      	b.n	8002c7c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART5)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_UART_MspInit+0x12c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d12f      	bne.n	8002c7c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	0049      	lsls	r1, r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002c3e:	2102      	movs	r1, #2
 8002c40:	430a      	orrs	r2, r1
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_UART_MspInit+0x128>)
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c50:	2164      	movs	r1, #100	; 0x64
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2218      	movs	r2, #24
 8002c56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_UART_MspInit+0x130>)
 8002c74:	0019      	movs	r1, r3
 8002c76:	0010      	movs	r0, r2
 8002c78:	f000 fabc 	bl	80031f4 <HAL_GPIO_Init>
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b01f      	add	sp, #124	; 0x7c
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40005000 	.word	0x40005000
 8002c90:	50000400 	.word	0x50000400

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c98:	e7fe      	b.n	8002c98 <NMI_Handler+0x4>

08002c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <HardFault_Handler+0x4>

08002ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb8:	f000 f968 	bl	8002f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f001 fcb0 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	2000070c 	.word	0x2000070c

08002cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_kill>:

int _kill(int pid, int sig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf2:	f003 fd4d 	bl	8006790 <__errno>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	2216      	movs	r2, #22
 8002cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	425b      	negs	r3, r3
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_exit>:

void _exit (int status)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d10:	2301      	movs	r3, #1
 8002d12:	425a      	negs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0011      	movs	r1, r2
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff ffe5 	bl	8002ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1e:	e7fe      	b.n	8002d1e <_exit+0x16>

08002d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e00a      	b.n	8002d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d32:	e000      	b.n	8002d36 <_read+0x16>
 8002d34:	bf00      	nop
 8002d36:	0001      	movs	r1, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbf0      	blt.n	8002d32 <_read+0x12>
  }

  return len;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b006      	add	sp, #24
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e009      	b.n	8002d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	0018      	movs	r0, r3
 8002d76:	e000      	b.n	8002d7a <_write+0x20>
 8002d78:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf1      	blt.n	8002d6c <_write+0x12>
  }
  return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:

int _close(int file)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	425b      	negs	r3, r3
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	0192      	lsls	r2, r2, #6
 8002db6:	605a      	str	r2, [r3, #4]
  return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_isatty>:

int _isatty(int file)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	18d3      	adds	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f003 fcb8 	bl	8006790 <__errno>
 8002e20:	0003      	movs	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	425b      	negs	r3, r3
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	18d2      	adds	r2, r2, r3
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <_sbrk+0x64>)
 8002e3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b006      	add	sp, #24
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20024000 	.word	0x20024000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	20000a78 	.word	0x20000a78
 8002e54:	20000d90 	.word	0x20000d90

08002e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e68:	f7ff fff6 	bl	8002e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e6e:	490d      	ldr	r1, [pc, #52]	; (8002ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <LoopForever+0xe>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e74:	e002      	b.n	8002e7c <LoopCopyDataInit>

08002e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7a:	3304      	adds	r3, #4

08002e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e80:	d3f9      	bcc.n	8002e76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e84:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <LoopForever+0x16>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e88:	e001      	b.n	8002e8e <LoopFillZerobss>

08002e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e8c:	3204      	adds	r2, #4

08002e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e90:	d3fb      	bcc.n	8002e8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e92:	f003 fc83 	bl	800679c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e96:	f7ff fa63 	bl	8002360 <main>

08002e9a <LoopForever>:

LoopForever:
  b LoopForever
 8002e9a:	e7fe      	b.n	8002e9a <LoopForever>
  ldr   r0, =_estack
 8002e9c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea4:	200006f0 	.word	0x200006f0
  ldr r2, =_sidata
 8002ea8:	0800b358 	.word	0x0800b358
  ldr r2, =_sbss
 8002eac:	200006f0 	.word	0x200006f0
  ldr r4, =_ebss
 8002eb0:	20000d90 	.word	0x20000d90

08002eb4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <ADC1_COMP_IRQHandler>
	...

08002eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_Init+0x3c>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_Init+0x3c>)
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	0049      	lsls	r1, r1, #1
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	f000 f810 	bl	8002ef8 <HAL_InitTick>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e001      	b.n	8002ee8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ee4:	f7ff fdee 	bl	8002ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	781b      	ldrb	r3, [r3, #0]
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_InitTick+0x88>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d02b      	beq.n	8002f68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_InitTick+0x8c>)
 8002f12:	681c      	ldr	r4, [r3, #0]
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_InitTick+0x88>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	0019      	movs	r1, r3
 8002f1a:	23fa      	movs	r3, #250	; 0xfa
 8002f1c:	0098      	lsls	r0, r3, #2
 8002f1e:	f7fd f90d 	bl	800013c <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	0019      	movs	r1, r3
 8002f26:	0020      	movs	r0, r4
 8002f28:	f7fd f908 	bl	800013c <__udivsi3>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 f953 	bl	80031da <HAL_SYSTICK_Config>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d112      	bne.n	8002f5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d80a      	bhi.n	8002f54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	2301      	movs	r3, #1
 8002f42:	425b      	negs	r3, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f922 	bl	8003190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_InitTick+0x90>)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00d      	b.n	8002f70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f54:	230f      	movs	r3, #15
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e008      	b.n	8002f70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f5e:	230f      	movs	r3, #15
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e003      	b.n	8002f70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f70:	230f      	movs	r3, #15
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781b      	ldrb	r3, [r3, #0]
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b005      	add	sp, #20
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000038 	.word	0x20000038
 8002f84:	20000030 	.word	0x20000030
 8002f88:	20000034 	.word	0x20000034

08002f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_IncTick+0x1c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	001a      	movs	r2, r3
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_IncTick+0x20>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	18d2      	adds	r2, r2, r3
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_IncTick+0x20>)
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	20000038 	.word	0x20000038
 8002fac:	20000a7c 	.word	0x20000a7c

08002fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <HAL_GetTick+0x10>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	20000a7c 	.word	0x20000a7c

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fff0 	bl	8002fb0 <HAL_GetTick>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_Delay+0x44>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	f7ff ffe0 	bl	8002fb0 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b004      	add	sp, #16
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20000038 	.word	0x20000038

0800300c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a06      	ldr	r2, [pc, #24]	; (8003034 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	40010000 	.word	0x40010000
 8003034:	fffff9ff 	.word	0xfffff9ff

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	0002      	movs	r2, r0
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003044:	1dfb      	adds	r3, r7, #7
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b7f      	cmp	r3, #127	; 0x7f
 800304a:	d809      	bhi.n	8003060 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	001a      	movs	r2, r3
 8003052:	231f      	movs	r3, #31
 8003054:	401a      	ands	r2, r3
 8003056:	4b04      	ldr	r3, [pc, #16]	; (8003068 <__NVIC_EnableIRQ+0x30>)
 8003058:	2101      	movs	r1, #1
 800305a:	4091      	lsls	r1, r2
 800305c:	000a      	movs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}
 8003068:	e000e100 	.word	0xe000e100

0800306c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	0002      	movs	r2, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b7f      	cmp	r3, #127	; 0x7f
 8003080:	d828      	bhi.n	80030d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003082:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <__NVIC_SetPriority+0xd4>)
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	33c0      	adds	r3, #192	; 0xc0
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	589b      	ldr	r3, [r3, r2]
 8003092:	1dfa      	adds	r2, r7, #7
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	0011      	movs	r1, r2
 8003098:	2203      	movs	r2, #3
 800309a:	400a      	ands	r2, r1
 800309c:	00d2      	lsls	r2, r2, #3
 800309e:	21ff      	movs	r1, #255	; 0xff
 80030a0:	4091      	lsls	r1, r2
 80030a2:	000a      	movs	r2, r1
 80030a4:	43d2      	mvns	r2, r2
 80030a6:	401a      	ands	r2, r3
 80030a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	401a      	ands	r2, r3
 80030b2:	1dfb      	adds	r3, r7, #7
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	0018      	movs	r0, r3
 80030b8:	2303      	movs	r3, #3
 80030ba:	4003      	ands	r3, r0
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030c0:	481f      	ldr	r0, [pc, #124]	; (8003140 <__NVIC_SetPriority+0xd4>)
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	430a      	orrs	r2, r1
 80030cc:	33c0      	adds	r3, #192	; 0xc0
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030d2:	e031      	b.n	8003138 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <__NVIC_SetPriority+0xd8>)
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	0019      	movs	r1, r3
 80030dc:	230f      	movs	r3, #15
 80030de:	400b      	ands	r3, r1
 80030e0:	3b08      	subs	r3, #8
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3306      	adds	r3, #6
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	18d3      	adds	r3, r2, r3
 80030ea:	3304      	adds	r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	1dfa      	adds	r2, r7, #7
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	0011      	movs	r1, r2
 80030f4:	2203      	movs	r2, #3
 80030f6:	400a      	ands	r2, r1
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	21ff      	movs	r1, #255	; 0xff
 80030fc:	4091      	lsls	r1, r2
 80030fe:	000a      	movs	r2, r1
 8003100:	43d2      	mvns	r2, r2
 8003102:	401a      	ands	r2, r3
 8003104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	22ff      	movs	r2, #255	; 0xff
 800310c:	401a      	ands	r2, r3
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	0018      	movs	r0, r3
 8003114:	2303      	movs	r3, #3
 8003116:	4003      	ands	r3, r0
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800311c:	4809      	ldr	r0, [pc, #36]	; (8003144 <__NVIC_SetPriority+0xd8>)
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	001c      	movs	r4, r3
 8003124:	230f      	movs	r3, #15
 8003126:	4023      	ands	r3, r4
 8003128:	3b08      	subs	r3, #8
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	430a      	orrs	r2, r1
 800312e:	3306      	adds	r3, #6
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	18c3      	adds	r3, r0, r3
 8003134:	3304      	adds	r3, #4
 8003136:	601a      	str	r2, [r3, #0]
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b003      	add	sp, #12
 800313e:	bd90      	pop	{r4, r7, pc}
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1e5a      	subs	r2, r3, #1
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	045b      	lsls	r3, r3, #17
 8003158:	429a      	cmp	r2, r3
 800315a:	d301      	bcc.n	8003160 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315c:	2301      	movs	r3, #1
 800315e:	e010      	b.n	8003182 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <SysTick_Config+0x44>)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	3a01      	subs	r2, #1
 8003166:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003168:	2301      	movs	r3, #1
 800316a:	425b      	negs	r3, r3
 800316c:	2103      	movs	r1, #3
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff ff7c 	bl	800306c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x44>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x44>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b002      	add	sp, #8
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	210f      	movs	r1, #15
 800319c:	187b      	adds	r3, r7, r1
 800319e:	1c02      	adds	r2, r0, #0
 80031a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	0011      	movs	r1, r2
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff ff5d 	bl	800306c <__NVIC_SetPriority>
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	0002      	movs	r2, r0
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c6:	1dfb      	adds	r3, r7, #7
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b25b      	sxtb	r3, r3
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff ff33 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff ffaf 	bl	8003148 <SysTick_Config>
 80031ea:	0003      	movs	r3, r0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003202:	e14d      	b.n	80034a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4091      	lsls	r1, r2
 800320e:	000a      	movs	r2, r1
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <HAL_GPIO_Init+0x28>
 800321a:	e13e      	b.n	800349a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	4013      	ands	r3, r2
 8003224:	2b01      	cmp	r3, #1
 8003226:	d005      	beq.n	8003234 <HAL_GPIO_Init+0x40>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	4013      	ands	r3, r2
 8003230:	2b02      	cmp	r3, #2
 8003232:	d130      	bne.n	8003296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	409a      	lsls	r2, r3
 8003242:	0013      	movs	r3, r2
 8003244:	43da      	mvns	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	409a      	lsls	r2, r3
 8003256:	0013      	movs	r3, r2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800326a:	2201      	movs	r2, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	2201      	movs	r2, #1
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	4013      	ands	r3, r2
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d017      	beq.n	80032d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	409a      	lsls	r2, r3
 80032b0:	0013      	movs	r3, r2
 80032b2:	43da      	mvns	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	4013      	ands	r3, r2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d123      	bne.n	8003326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	58d3      	ldr	r3, [r2, r3]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2207      	movs	r2, #7
 80032f0:	4013      	ands	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	43da      	mvns	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2107      	movs	r1, #7
 800330a:	400b      	ands	r3, r1
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	409a      	lsls	r2, r3
 8003310:	0013      	movs	r3, r2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	6939      	ldr	r1, [r7, #16]
 8003324:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	43da      	mvns	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	401a      	ands	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	0013      	movs	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	23c0      	movs	r3, #192	; 0xc0
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	4013      	ands	r3, r2
 8003364:	d100      	bne.n	8003368 <HAL_GPIO_Init+0x174>
 8003366:	e098      	b.n	800349a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003368:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3318      	adds	r3, #24
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	589b      	ldr	r3, [r3, r2]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2203      	movs	r2, #3
 800337a:	4013      	ands	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	220f      	movs	r2, #15
 8003380:	409a      	lsls	r2, r3
 8003382:	0013      	movs	r3, r2
 8003384:	43da      	mvns	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	23a0      	movs	r3, #160	; 0xa0
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	429a      	cmp	r2, r3
 8003394:	d019      	beq.n	80033ca <HAL_GPIO_Init+0x1d6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a48      	ldr	r2, [pc, #288]	; (80034bc <HAL_GPIO_Init+0x2c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_GPIO_Init+0x1d2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a47      	ldr	r2, [pc, #284]	; (80034c0 <HAL_GPIO_Init+0x2cc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00d      	beq.n	80033c2 <HAL_GPIO_Init+0x1ce>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a46      	ldr	r2, [pc, #280]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d007      	beq.n	80033be <HAL_GPIO_Init+0x1ca>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a45      	ldr	r2, [pc, #276]	; (80034c8 <HAL_GPIO_Init+0x2d4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_GPIO_Init+0x1c6>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x1d8>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x1d8>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x1d8>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x1d8>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x1d8>
 80033ca:	2300      	movs	r3, #0
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	2103      	movs	r1, #3
 80033d0:	400a      	ands	r2, r1
 80033d2:	00d2      	lsls	r2, r2, #3
 80033d4:	4093      	lsls	r3, r2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80033dc:	4936      	ldr	r1, [pc, #216]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3318      	adds	r3, #24
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43da      	mvns	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	035b      	lsls	r3, r3, #13
 8003402:	4013      	ands	r3, r2
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43da      	mvns	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	039b      	lsls	r3, r3, #14
 800342c:	4013      	ands	r3, r2
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003438:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800343e:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 8003440:	2384      	movs	r3, #132	; 0x84
 8003442:	58d3      	ldr	r3, [r2, r3]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43da      	mvns	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	4013      	ands	r3, r2
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003464:	4914      	ldr	r1, [pc, #80]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 8003466:	2284      	movs	r2, #132	; 0x84
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800346c:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	58d3      	ldr	r3, [r2, r3]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	43da      	mvns	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	025b      	lsls	r3, r3, #9
 8003486:	4013      	ands	r3, r2
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003492:	4909      	ldr	r1, [pc, #36]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	40da      	lsrs	r2, r3
 80034a8:	1e13      	subs	r3, r2, #0
 80034aa:	d000      	beq.n	80034ae <HAL_GPIO_Init+0x2ba>
 80034ac:	e6aa      	b.n	8003204 <HAL_GPIO_Init+0x10>
  }
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021800 	.word	0x40021800
 80034bc:	50000400 	.word	0x50000400
 80034c0:	50000800 	.word	0x50000800
 80034c4:	50000c00 	.word	0x50000c00
 80034c8:	50001000 	.word	0x50001000

080034cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	0008      	movs	r0, r1
 80034d6:	0011      	movs	r1, r2
 80034d8:	1cbb      	adds	r3, r7, #2
 80034da:	1c02      	adds	r2, r0, #0
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	1c7b      	adds	r3, r7, #1
 80034e0:	1c0a      	adds	r2, r1, #0
 80034e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e4:	1c7b      	adds	r3, r7, #1
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ec:	1cbb      	adds	r3, r7, #2
 80034ee:	881a      	ldrh	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f6:	1cbb      	adds	r3, r7, #2
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d11f      	bne.n	800356c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	0013      	movs	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	189b      	adds	r3, r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4912      	ldr	r1, [pc, #72]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800353a:	0018      	movs	r0, r3
 800353c:	f7fc fdfe 	bl	800013c <__udivsi3>
 8003540:	0003      	movs	r3, r0
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003546:	e008      	b.n	800355a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e001      	b.n	800355a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e009      	b.n	800356e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	401a      	ands	r2, r3
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	429a      	cmp	r2, r3
 800356a:	d0ed      	beq.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	40007000 	.word	0x40007000
 800357c:	fffff9ff 	.word	0xfffff9ff
 8003580:	20000030 	.word	0x20000030
 8003584:	000f4240 	.word	0x000f4240

08003588 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2207      	movs	r2, #7
 8003592:	4393      	bics	r3, r2
 8003594:	001a      	movs	r2, r3
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8003598:	2104      	movs	r1, #4
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80035a4:	2104      	movs	r1, #4
 80035a6:	430a      	orrs	r2, r1
 80035a8:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80035aa:	bf30      	wfi
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40007000 	.word	0x40007000
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	23e0      	movs	r3, #224	; 0xe0
 80035c6:	01db      	lsls	r3, r3, #7
 80035c8:	4013      	ands	r3, r2
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f000 fb50 	bl	8003c88 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d100      	bne.n	80035f4 <HAL_RCC_OscConfig+0x20>
 80035f2:	e07c      	b.n	80036ee <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f4:	4bc3      	ldr	r3, [pc, #780]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2238      	movs	r2, #56	; 0x38
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035fe:	4bc1      	ldr	r3, [pc, #772]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2203      	movs	r2, #3
 8003604:	4013      	ands	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d102      	bne.n	8003614 <HAL_RCC_OscConfig+0x40>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d002      	beq.n	800361a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d10b      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361a:	4bba      	ldr	r3, [pc, #744]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d062      	beq.n	80036ec <HAL_RCC_OscConfig+0x118>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d15e      	bne.n	80036ec <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e32a      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	025b      	lsls	r3, r3, #9
 800363a:	429a      	cmp	r2, r3
 800363c:	d107      	bne.n	800364e <HAL_RCC_OscConfig+0x7a>
 800363e:	4bb1      	ldr	r3, [pc, #708]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4bb0      	ldr	r3, [pc, #704]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0249      	lsls	r1, r1, #9
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e020      	b.n	8003690 <HAL_RCC_OscConfig+0xbc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	23a0      	movs	r3, #160	; 0xa0
 8003654:	02db      	lsls	r3, r3, #11
 8003656:	429a      	cmp	r2, r3
 8003658:	d10e      	bne.n	8003678 <HAL_RCC_OscConfig+0xa4>
 800365a:	4baa      	ldr	r3, [pc, #680]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4ba9      	ldr	r3, [pc, #676]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	02c9      	lsls	r1, r1, #11
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	4ba6      	ldr	r3, [pc, #664]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	0249      	lsls	r1, r1, #9
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xbc>
 8003678:	4ba2      	ldr	r3, [pc, #648]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4ba1      	ldr	r3, [pc, #644]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800367e:	49a2      	ldr	r1, [pc, #648]	; (8003908 <HAL_RCC_OscConfig+0x334>)
 8003680:	400a      	ands	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	4b9f      	ldr	r3, [pc, #636]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800368a:	49a0      	ldr	r1, [pc, #640]	; (800390c <HAL_RCC_OscConfig+0x338>)
 800368c:	400a      	ands	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d014      	beq.n	80036c2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7ff fc8a 	bl	8002fb0 <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a2:	f7ff fc85 	bl	8002fb0 <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b64      	cmp	r3, #100	; 0x64
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e2e9      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b4:	4b93      	ldr	r3, [pc, #588]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	4013      	ands	r3, r2
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0xce>
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7ff fc75 	bl	8002fb0 <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7ff fc70 	bl	8002fb0 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e2d4      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036de:	4b89      	ldr	r3, [pc, #548]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	4013      	ands	r3, r2
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0xf8>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	d100      	bne.n	80036fa <HAL_RCC_OscConfig+0x126>
 80036f8:	e099      	b.n	800382e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fa:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2238      	movs	r2, #56	; 0x38
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003704:	4b7f      	ldr	r3, [pc, #508]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2203      	movs	r2, #3
 800370a:	4013      	ands	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b10      	cmp	r3, #16
 8003712:	d102      	bne.n	800371a <HAL_RCC_OscConfig+0x146>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d002      	beq.n	8003720 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d135      	bne.n	800378c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003720:	4b78      	ldr	r3, [pc, #480]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4013      	ands	r3, r2
 800372a:	d005      	beq.n	8003738 <HAL_RCC_OscConfig+0x164>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e2a7      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b72      	ldr	r3, [pc, #456]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a74      	ldr	r2, [pc, #464]	; (8003910 <HAL_RCC_OscConfig+0x33c>)
 800373e:	4013      	ands	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	4b6e      	ldr	r3, [pc, #440]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d112      	bne.n	800377a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003754:	4b6b      	ldr	r3, [pc, #428]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x340>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	4b68      	ldr	r3, [pc, #416]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0adb      	lsrs	r3, r3, #11
 800376e:	2207      	movs	r2, #7
 8003770:	4013      	ands	r3, r2
 8003772:	4a69      	ldr	r2, [pc, #420]	; (8003918 <HAL_RCC_OscConfig+0x344>)
 8003774:	40da      	lsrs	r2, r3
 8003776:	4b69      	ldr	r3, [pc, #420]	; (800391c <HAL_RCC_OscConfig+0x348>)
 8003778:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800377a:	4b69      	ldr	r3, [pc, #420]	; (8003920 <HAL_RCC_OscConfig+0x34c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	0018      	movs	r0, r3
 8003780:	f7ff fbba 	bl	8002ef8 <HAL_InitTick>
 8003784:	1e03      	subs	r3, r0, #0
 8003786:	d051      	beq.n	800382c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e27d      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d030      	beq.n	80037f6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003794:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_RCC_OscConfig+0x340>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	4b58      	ldr	r3, [pc, #352]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b56      	ldr	r3, [pc, #344]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b55      	ldr	r3, [pc, #340]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	0049      	lsls	r1, r1, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7ff fbfb 	bl	8002fb0 <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c0:	f7ff fbf6 	bl	8002fb0 <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e25a      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d2:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4013      	ands	r3, r2
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b49      	ldr	r3, [pc, #292]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <HAL_RCC_OscConfig+0x33c>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	4b45      	ldr	r3, [pc, #276]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	e01b      	b.n	800382e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80037fc:	4949      	ldr	r1, [pc, #292]	; (8003924 <HAL_RCC_OscConfig+0x350>)
 80037fe:	400a      	ands	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7ff fbd5 	bl	8002fb0 <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380c:	f7ff fbd0 	bl	8002fb0 <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e234      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381e:	4b39      	ldr	r3, [pc, #228]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4013      	ands	r3, r2
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x238>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2208      	movs	r2, #8
 8003834:	4013      	ands	r3, r2
 8003836:	d047      	beq.n	80038c8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003838:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2238      	movs	r2, #56	; 0x38
 800383e:	4013      	ands	r3, r2
 8003840:	2b18      	cmp	r3, #24
 8003842:	d10a      	bne.n	800385a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003848:	2202      	movs	r2, #2
 800384a:	4013      	ands	r3, r2
 800384c:	d03c      	beq.n	80038c8 <HAL_RCC_OscConfig+0x2f4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d138      	bne.n	80038c8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e216      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d019      	beq.n	8003896 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003862:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003864:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003868:	2101      	movs	r1, #1
 800386a:	430a      	orrs	r2, r1
 800386c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7ff fb9f 	bl	8002fb0 <HAL_GetTick>
 8003872:	0003      	movs	r3, r0
 8003874:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003878:	f7ff fb9a 	bl	8002fb0 <HAL_GetTick>
 800387c:	0002      	movs	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1fe      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	2202      	movs	r2, #2
 8003890:	4013      	ands	r3, r2
 8003892:	d0f1      	beq.n	8003878 <HAL_RCC_OscConfig+0x2a4>
 8003894:	e018      	b.n	80038c8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 8003898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 800389c:	2101      	movs	r1, #1
 800389e:	438a      	bics	r2, r1
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7ff fb85 	bl	8002fb0 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ac:	f7ff fb80 	bl	8002fb0 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1e4      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d1f1      	bne.n	80038ac <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2204      	movs	r2, #4
 80038ce:	4013      	ands	r3, r2
 80038d0:	d100      	bne.n	80038d4 <HAL_RCC_OscConfig+0x300>
 80038d2:	e0c7      	b.n	8003a64 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d4:	231f      	movs	r3, #31
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038dc:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2238      	movs	r2, #56	; 0x38
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d11f      	bne.n	8003928 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_OscConfig+0x330>)
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d100      	bne.n	80038f4 <HAL_RCC_OscConfig+0x320>
 80038f2:	e0b7      	b.n	8003a64 <HAL_RCC_OscConfig+0x490>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d000      	beq.n	80038fe <HAL_RCC_OscConfig+0x32a>
 80038fc:	e0b2      	b.n	8003a64 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e1c2      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	40021000 	.word	0x40021000
 8003908:	fffeffff 	.word	0xfffeffff
 800390c:	fffbffff 	.word	0xfffbffff
 8003910:	ffff80ff 	.word	0xffff80ff
 8003914:	ffffc7ff 	.word	0xffffc7ff
 8003918:	00f42400 	.word	0x00f42400
 800391c:	20000030 	.word	0x20000030
 8003920:	20000034 	.word	0x20000034
 8003924:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003928:	4bb5      	ldr	r3, [pc, #724]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 800392a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	055b      	lsls	r3, r3, #21
 8003930:	4013      	ands	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_RCC_OscConfig+0x364>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x366>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d011      	beq.n	8003962 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	4bb0      	ldr	r3, [pc, #704]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003942:	4baf      	ldr	r3, [pc, #700]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0549      	lsls	r1, r1, #21
 8003948:	430a      	orrs	r2, r1
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
 800394c:	4bac      	ldr	r3, [pc, #688]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 800394e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	055b      	lsls	r3, r3, #21
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800395a:	231f      	movs	r3, #31
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003962:	4ba8      	ldr	r3, [pc, #672]	; (8003c04 <HAL_RCC_OscConfig+0x630>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4013      	ands	r3, r2
 800396c:	d11a      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800396e:	4ba5      	ldr	r3, [pc, #660]	; (8003c04 <HAL_RCC_OscConfig+0x630>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4ba4      	ldr	r3, [pc, #656]	; (8003c04 <HAL_RCC_OscConfig+0x630>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0049      	lsls	r1, r1, #1
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800397c:	f7ff fb18 	bl	8002fb0 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7ff fb13 	bl	8002fb0 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e177      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003998:	4b9a      	ldr	r3, [pc, #616]	; (8003c04 <HAL_RCC_OscConfig+0x630>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4013      	ands	r3, r2
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x3e6>
 80039ac:	4b94      	ldr	r3, [pc, #592]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039b0:	4b93      	ldr	r3, [pc, #588]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039b2:	2101      	movs	r1, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x420>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x408>
 80039c2:	4b8f      	ldr	r3, [pc, #572]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039c6:	4b8e      	ldr	r3, [pc, #568]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039c8:	2104      	movs	r1, #4
 80039ca:	430a      	orrs	r2, r1
 80039cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ce:	4b8c      	ldr	r3, [pc, #560]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0x420>
 80039dc:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039e0:	4b87      	ldr	r3, [pc, #540]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80039e8:	4b85      	ldr	r3, [pc, #532]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ec:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 80039ee:	2104      	movs	r1, #4
 80039f0:	438a      	bics	r2, r1
 80039f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7ff fad8 	bl	8002fb0 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a04:	e009      	b.n	8003a1a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7ff fad3 	bl	8002fb0 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	4a7d      	ldr	r2, [pc, #500]	; (8003c08 <HAL_RCC_OscConfig+0x634>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e136      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1a:	4b79      	ldr	r3, [pc, #484]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	2202      	movs	r2, #2
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x432>
 8003a24:	e013      	b.n	8003a4e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7ff fac3 	bl	8002fb0 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a2e:	e009      	b.n	8003a44 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7ff fabe 	bl	8002fb0 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	4a73      	ldr	r2, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x634>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e121      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a44:	4b6e      	ldr	r3, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a4e:	231f      	movs	r3, #31
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a58:	4b69      	ldr	r3, [pc, #420]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a5c:	4b68      	ldr	r3, [pc, #416]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003a5e:	496b      	ldr	r1, [pc, #428]	; (8003c0c <HAL_RCC_OscConfig+0x638>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d039      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01b      	beq.n	8003aae <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	03c9      	lsls	r1, r1, #15
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7ff fa94 	bl	8002fb0 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a8e:	f7ff fa8f 	bl	8002fb0 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0f3      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003aa0:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4ba>
 8003aac:	e019      	b.n	8003ae2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003ab4:	4956      	ldr	r1, [pc, #344]	; (8003c10 <HAL_RCC_OscConfig+0x63c>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7ff fa79 	bl	8002fb0 <HAL_GetTick>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac4:	f7ff fa74 	bl	8002fb0 <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0d8      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d100      	bne.n	8003aec <HAL_RCC_OscConfig+0x518>
 8003aea:	e0cc      	b.n	8003c86 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	4b44      	ldr	r3, [pc, #272]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2238      	movs	r2, #56	; 0x38
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_OscConfig+0x526>
 8003af8:	e07b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d156      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b08:	4942      	ldr	r1, [pc, #264]	; (8003c14 <HAL_RCC_OscConfig+0x640>)
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7ff fa4f 	bl	8002fb0 <HAL_GetTick>
 8003b12:	0003      	movs	r3, r0
 8003b14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7ff fa4a 	bl	8002fb0 <HAL_GetTick>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0ae      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	049b      	lsls	r3, r3, #18
 8003b32:	4013      	ands	r3, r2
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b36:	4b32      	ldr	r3, [pc, #200]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a37      	ldr	r2, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x644>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	431a      	orrs	r2, r3
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b66:	430a      	orrs	r2, r1
 8003b68:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	0449      	lsls	r1, r1, #17
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	0549      	lsls	r1, r1, #21
 8003b82:	430a      	orrs	r2, r1
 8003b84:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7ff fa13 	bl	8002fb0 <HAL_GetTick>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7ff fa0e 	bl	8002fb0 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e072      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	049b      	lsls	r3, r3, #18
 8003baa:	4013      	ands	r3, r2
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x5bc>
 8003bae:	e06a      	b.n	8003c86 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003bb6:	4917      	ldr	r1, [pc, #92]	; (8003c14 <HAL_RCC_OscConfig+0x640>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7ff f9f8 	bl	8002fb0 <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7ff f9f3 	bl	8002fb0 <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e057      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	049b      	lsls	r3, r3, #18
 8003be0:	4013      	ands	r3, r2
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_OscConfig+0x62c>)
 8003bea:	490c      	ldr	r1, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x648>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	e049      	b.n	8003c86 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d112      	bne.n	8003c20 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e044      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
 8003c08:	00001388 	.word	0x00001388
 8003c0c:	efffffff 	.word	0xefffffff
 8003c10:	ffbfffff 	.word	0xffbfffff
 8003c14:	feffffff 	.word	0xfeffffff
 8003c18:	11c1808c 	.word	0x11c1808c
 8003c1c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x6bc>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d126      	bne.n	8003c82 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2270      	movs	r2, #112	; 0x70
 8003c38:	401a      	ands	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d11f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	23fe      	movs	r3, #254	; 0xfe
 8003c46:	01db      	lsls	r3, r3, #7
 8003c48:	401a      	ands	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d116      	bne.n	8003c82 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	23f8      	movs	r3, #248	; 0xf8
 8003c58:	039b      	lsls	r3, r3, #14
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d10e      	bne.n	8003c82 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	23e0      	movs	r3, #224	; 0xe0
 8003c68:	051b      	lsls	r3, r3, #20
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	0f5b      	lsrs	r3, r3, #29
 8003c78:	075a      	lsls	r2, r3, #29
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b008      	add	sp, #32
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0e9      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2207      	movs	r2, #7
 8003cae:	4013      	ands	r3, r2
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d91e      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2207      	movs	r2, #7
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cc8:	f7ff f972 	bl	8002fb0 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cd0:	e009      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd2:	f7ff f96d 	bl	8002fb0 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_RCC_ClockConfig+0x1f4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0ca      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ce6:	4b67      	ldr	r3, [pc, #412]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2207      	movs	r2, #7
 8003cec:	4013      	ands	r3, r2
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1ee      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d015      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2204      	movs	r2, #4
 8003d04:	4013      	ands	r3, r2
 8003d06:	d006      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d08:	4b60      	ldr	r3, [pc, #384]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b5f      	ldr	r3, [pc, #380]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d0e:	21e0      	movs	r1, #224	; 0xe0
 8003d10:	01c9      	lsls	r1, r1, #7
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d16:	4b5d      	ldr	r3, [pc, #372]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_RCC_ClockConfig+0x1fc>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d26:	430a      	orrs	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	4013      	ands	r3, r2
 8003d32:	d057      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	4013      	ands	r3, r2
 8003d46:	d12b      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e097      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b4d      	ldr	r3, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	049b      	lsls	r3, r3, #18
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d11f      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e08b      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4013      	ands	r3, r2
 8003d76:	d113      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e07f      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	2202      	movs	r2, #2
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e074      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	4b3e      	ldr	r3, [pc, #248]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2202      	movs	r2, #2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e06d      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2207      	movs	r2, #7
 8003da6:	4393      	bics	r3, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db4:	f7ff f8fc 	bl	8002fb0 <HAL_GetTick>
 8003db8:	0003      	movs	r3, r0
 8003dba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbc:	e009      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbe:	f7ff f8f7 	bl	8002fb0 <HAL_GetTick>
 8003dc2:	0002      	movs	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <HAL_RCC_ClockConfig+0x1f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e054      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1ec      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2207      	movs	r2, #7
 8003dea:	4013      	ands	r3, r2
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d21e      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2207      	movs	r2, #7
 8003df8:	4393      	bics	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e04:	f7ff f8d4 	bl	8002fb0 <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e0c:	e009      	b.n	8003e22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0e:	f7ff f8cf 	bl	8002fb0 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_RCC_ClockConfig+0x1f4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e02c      	b.n	8003e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2207      	movs	r2, #7
 8003e28:	4013      	ands	r3, r2
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1ee      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2204      	movs	r2, #4
 8003e36:	4013      	ands	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_RCC_ClockConfig+0x200>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e4e:	f000 f829 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003e52:	0001      	movs	r1, r0
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_ClockConfig+0x1f8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	220f      	movs	r2, #15
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_RCC_ClockConfig+0x204>)
 8003e60:	0092      	lsls	r2, r2, #2
 8003e62:	58d3      	ldr	r3, [r2, r3]
 8003e64:	221f      	movs	r2, #31
 8003e66:	4013      	ands	r3, r2
 8003e68:	000a      	movs	r2, r1
 8003e6a:	40da      	lsrs	r2, r3
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x208>)
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_ClockConfig+0x20c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff f83f 	bl	8002ef8 <HAL_InitTick>
 8003e7a:	0003      	movs	r3, r0
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b004      	add	sp, #16
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40022000 	.word	0x40022000
 8003e88:	00001388 	.word	0x00001388
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	fffff0ff 	.word	0xfffff0ff
 8003e94:	ffff8fff 	.word	0xffff8fff
 8003e98:	0800af30 	.word	0x0800af30
 8003e9c:	20000030 	.word	0x20000030
 8003ea0:	20000034 	.word	0x20000034

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2238      	movs	r2, #56	; 0x38
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d10f      	bne.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0adb      	lsrs	r3, r3, #11
 8003eba:	2207      	movs	r2, #7
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	0013      	movs	r3, r2
 8003ec4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	4835      	ldr	r0, [pc, #212]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003eca:	f7fc f937 	bl	800013c <__udivsi3>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	e05d      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed4:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2238      	movs	r2, #56	; 0x38
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d102      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ee0:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	e054      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2238      	movs	r2, #56	; 0x38
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d138      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	2207      	movs	r2, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	3301      	adds	r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4824      	ldr	r0, [pc, #144]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f14:	f7fc f912 	bl	800013c <__udivsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	227f      	movs	r2, #127	; 0x7f
 8003f24:	4013      	ands	r3, r2
 8003f26:	434b      	muls	r3, r1
 8003f28:	617b      	str	r3, [r7, #20]
        break;
 8003f2a:	e00d      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	481c      	ldr	r0, [pc, #112]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f30:	f7fc f904 	bl	800013c <__udivsi3>
 8003f34:	0003      	movs	r3, r0
 8003f36:	0019      	movs	r1, r3
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	227f      	movs	r2, #127	; 0x7f
 8003f40:	4013      	ands	r3, r2
 8003f42:	434b      	muls	r3, r1
 8003f44:	617b      	str	r3, [r7, #20]
        break;
 8003f46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	0f5b      	lsrs	r3, r3, #29
 8003f4e:	2207      	movs	r2, #7
 8003f50:	4013      	ands	r3, r2
 8003f52:	3301      	adds	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	6978      	ldr	r0, [r7, #20]
 8003f5a:	f7fc f8ef 	bl	800013c <__udivsi3>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e015      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2238      	movs	r2, #56	; 0x38
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d103      	bne.n	8003f78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2238      	movs	r2, #56	; 0x38
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b18      	cmp	r3, #24
 8003f82:	d103      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f84:	23fa      	movs	r3, #250	; 0xfa
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e001      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f90:	693b      	ldr	r3, [r7, #16]
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b006      	add	sp, #24
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b02      	ldr	r3, [pc, #8]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	20000030 	.word	0x20000030

08003fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fbc:	b5b0      	push	{r4, r5, r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003fc0:	f7ff fff2 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc4:	0004      	movs	r4, r0
 8003fc6:	f7ff faf9 	bl	80035bc <LL_RCC_GetAPB1Prescaler>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	0b1a      	lsrs	r2, r3, #12
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fd0:	0092      	lsls	r2, r2, #2
 8003fd2:	58d3      	ldr	r3, [r2, r3]
 8003fd4:	221f      	movs	r2, #31
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	40dc      	lsrs	r4, r3
 8003fda:	0023      	movs	r3, r4
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	0800af70 	.word	0x0800af70

08003fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003ff0:	2313      	movs	r3, #19
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ff8:	2312      	movs	r3, #18
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	4013      	ands	r3, r2
 800400a:	d100      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800400c:	e0ad      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400e:	2011      	movs	r0, #17
 8004010:	183b      	adds	r3, r7, r0
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	055b      	lsls	r3, r3, #21
 800401e:	4013      	ands	r3, r2
 8004020:	d110      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b44      	ldr	r3, [pc, #272]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004026:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	0549      	lsls	r1, r1, #21
 800402c:	430a      	orrs	r2, r1
 800402e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004030:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	055b      	lsls	r3, r3, #21
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	183b      	adds	r3, r7, r0
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	0049      	lsls	r1, r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004052:	f7fe ffad 	bl	8002fb0 <HAL_GetTick>
 8004056:	0003      	movs	r3, r0
 8004058:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405a:	e00b      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fe ffa8 	bl	8002fb0 <HAL_GetTick>
 8004060:	0002      	movs	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d904      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800406a:	2313      	movs	r3, #19
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	2203      	movs	r2, #3
 8004070:	701a      	strb	r2, [r3, #0]
        break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d0ed      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004080:	2313      	movs	r3, #19
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d15e      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800408a:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800408c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800408e:	23c0      	movs	r3, #192	; 0xc0
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4013      	ands	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d019      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d014      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	4a24      	ldr	r2, [pc, #144]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040b4:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	0249      	lsls	r1, r1, #9
 80040ba:	430a      	orrs	r2, r1
 80040bc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040c4:	491e      	ldr	r1, [pc, #120]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80040c6:	400a      	ands	r2, r1
 80040c8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ca:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4013      	ands	r3, r2
 80040d6:	d016      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe ff6a 	bl	8002fb0 <HAL_GetTick>
 80040dc:	0003      	movs	r3, r0
 80040de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e0:	e00c      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fe ff65 	bl	8002fb0 <HAL_GetTick>
 80040e6:	0002      	movs	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	4a15      	ldr	r2, [pc, #84]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d904      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80040f2:	2313      	movs	r3, #19
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2203      	movs	r2, #3
 80040f8:	701a      	strb	r2, [r3, #0]
            break;
 80040fa:	e004      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d0ed      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004106:	2313      	movs	r3, #19
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004116:	4013      	ands	r3, r2
 8004118:	0019      	movs	r1, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004120:	430a      	orrs	r2, r1
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c
 8004124:	e016      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004126:	2312      	movs	r3, #18
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	2213      	movs	r2, #19
 800412c:	18ba      	adds	r2, r7, r2
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e00f      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004134:	40021000 	.word	0x40021000
 8004138:	40007000 	.word	0x40007000
 800413c:	fffffcff 	.word	0xfffffcff
 8004140:	fffeffff 	.word	0xfffeffff
 8004144:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	2312      	movs	r3, #18
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2213      	movs	r2, #19
 800414e:	18ba      	adds	r2, r7, r2
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004154:	2311      	movs	r3, #17
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4bb6      	ldr	r3, [pc, #728]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004162:	4bb5      	ldr	r3, [pc, #724]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004164:	49b5      	ldr	r1, [pc, #724]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004166:	400a      	ands	r2, r1
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	4013      	ands	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004174:	4bb0      	ldr	r3, [pc, #704]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	2203      	movs	r2, #3
 800417a:	4393      	bics	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	4bad      	ldr	r3, [pc, #692]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004184:	430a      	orrs	r2, r1
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004192:	4ba9      	ldr	r3, [pc, #676]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	220c      	movs	r2, #12
 8004198:	4393      	bics	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	4ba5      	ldr	r3, [pc, #660]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041a2:	430a      	orrs	r2, r1
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2204      	movs	r2, #4
 80041ac:	4013      	ands	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b0:	4ba1      	ldr	r3, [pc, #644]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	2230      	movs	r2, #48	; 0x30
 80041b6:	4393      	bics	r3, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	4b9e      	ldr	r3, [pc, #632]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041c0:	430a      	orrs	r2, r1
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2210      	movs	r2, #16
 80041ca:	4013      	ands	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ce:	4b9a      	ldr	r3, [pc, #616]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	4a9b      	ldr	r2, [pc, #620]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	4b96      	ldr	r3, [pc, #600]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041de:	430a      	orrs	r2, r1
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	015b      	lsls	r3, r3, #5
 80041ea:	4013      	ands	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80041ee:	4b92      	ldr	r3, [pc, #584]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	4a94      	ldr	r2, [pc, #592]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	4b8e      	ldr	r3, [pc, #568]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041fe:	430a      	orrs	r2, r1
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4013      	ands	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420e:	4b8a      	ldr	r3, [pc, #552]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	4a8d      	ldr	r2, [pc, #564]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421c:	4b86      	ldr	r3, [pc, #536]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800421e:	430a      	orrs	r2, r1
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4013      	ands	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800422e:	4b82      	ldr	r3, [pc, #520]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	4a86      	ldr	r2, [pc, #536]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004234:	4013      	ands	r3, r2
 8004236:	0019      	movs	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b7e      	ldr	r3, [pc, #504]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800423e:	430a      	orrs	r2, r1
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2220      	movs	r2, #32
 8004248:	4013      	ands	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424c:	4b7a      	ldr	r3, [pc, #488]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	4a7f      	ldr	r2, [pc, #508]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	4b77      	ldr	r3, [pc, #476]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800425c:	430a      	orrs	r2, r1
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2240      	movs	r2, #64	; 0x40
 8004266:	4013      	ands	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426a:	4b73      	ldr	r3, [pc, #460]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	4a79      	ldr	r2, [pc, #484]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	4b6f      	ldr	r3, [pc, #444]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800427a:	430a      	orrs	r2, r1
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	01db      	lsls	r3, r3, #7
 8004286:	4013      	ands	r3, r2
 8004288:	d015      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800428a:	4b6b      	ldr	r3, [pc, #428]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	0899      	lsrs	r1, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004296:	4b68      	ldr	r3, [pc, #416]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004298:	430a      	orrs	r2, r1
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	05db      	lsls	r3, r3, #23
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d106      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042a8:	4b63      	ldr	r3, [pc, #396]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	4b62      	ldr	r3, [pc, #392]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	0249      	lsls	r1, r1, #9
 80042b2:	430a      	orrs	r2, r1
 80042b4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	031b      	lsls	r3, r3, #12
 80042be:	4013      	ands	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042c2:	4b5d      	ldr	r3, [pc, #372]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	4393      	bics	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d0:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	039b      	lsls	r3, r3, #14
 80042de:	4013      	ands	r3, r2
 80042e0:	d016      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	4a5c      	ldr	r2, [pc, #368]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f0:	4b51      	ldr	r3, [pc, #324]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	03db      	lsls	r3, r3, #15
 80042fe:	429a      	cmp	r2, r3
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004302:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b4c      	ldr	r3, [pc, #304]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	0449      	lsls	r1, r1, #17
 800430c:	430a      	orrs	r2, r1
 800430e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	03db      	lsls	r3, r3, #15
 8004318:	4013      	ands	r3, r2
 800431a:	d016      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800431c:	4b46      	ldr	r3, [pc, #280]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	4a4e      	ldr	r2, [pc, #312]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800432a:	4b43      	ldr	r3, [pc, #268]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800432c:	430a      	orrs	r2, r1
 800432e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	045b      	lsls	r3, r3, #17
 8004338:	429a      	cmp	r2, r3
 800433a:	d106      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800433c:	4b3e      	ldr	r3, [pc, #248]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4b3d      	ldr	r3, [pc, #244]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0449      	lsls	r1, r1, #17
 8004346:	430a      	orrs	r2, r1
 8004348:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4013      	ands	r3, r2
 8004354:	d014      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004356:	4b38      	ldr	r3, [pc, #224]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	2203      	movs	r2, #3
 800435c:	4393      	bics	r3, r2
 800435e:	0019      	movs	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	4b34      	ldr	r3, [pc, #208]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004366:	430a      	orrs	r2, r1
 8004368:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d106      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	4b30      	ldr	r3, [pc, #192]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	0249      	lsls	r1, r1, #9
 800437c:	430a      	orrs	r2, r1
 800437e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	019b      	lsls	r3, r3, #6
 8004388:	4013      	ands	r3, r2
 800438a:	d014      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800438c:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	220c      	movs	r2, #12
 8004392:	4393      	bics	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800439c:	430a      	orrs	r2, r1
 800439e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d106      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043a8:	4b23      	ldr	r3, [pc, #140]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	0249      	lsls	r1, r1, #9
 80043b2:	430a      	orrs	r2, r1
 80043b4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	045b      	lsls	r3, r3, #17
 80043be:	4013      	ands	r3, r2
 80043c0:	d016      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043d2:	430a      	orrs	r2, r1
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	429a      	cmp	r2, r3
 80043e0:	d106      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0449      	lsls	r1, r1, #17
 80043ec:	430a      	orrs	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	049b      	lsls	r3, r3, #18
 80043f8:	4013      	ands	r3, r2
 80043fa:	d016      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004402:	4013      	ands	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800440c:	430a      	orrs	r2, r1
 800440e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	429a      	cmp	r2, r3
 800441a:	d106      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0449      	lsls	r1, r1, #17
 8004426:	430a      	orrs	r2, r1
 8004428:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800442a:	2312      	movs	r3, #18
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b006      	add	sp, #24
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	efffffff 	.word	0xefffffff
 8004440:	fffff3ff 	.word	0xfffff3ff
 8004444:	fffffcff 	.word	0xfffffcff
 8004448:	fff3ffff 	.word	0xfff3ffff
 800444c:	ffcfffff 	.word	0xffcfffff
 8004450:	ffffcfff 	.word	0xffffcfff
 8004454:	ffff3fff 	.word	0xffff3fff
 8004458:	ffbfffff 	.word	0xffbfffff
 800445c:	feffffff 	.word	0xfeffffff

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e04a      	b.n	8004508 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	223d      	movs	r2, #61	; 0x3d
 8004476:	5c9b      	ldrb	r3, [r3, r2]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	223c      	movs	r2, #60	; 0x3c
 8004482:	2100      	movs	r1, #0
 8004484:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fe fb43 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223d      	movs	r2, #61	; 0x3d
 8004492:	2102      	movs	r1, #2
 8004494:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	0019      	movs	r1, r3
 80044a0:	0010      	movs	r0, r2
 80044a2:	f000 f9ed 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2248      	movs	r2, #72	; 0x48
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223e      	movs	r2, #62	; 0x3e
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2240      	movs	r2, #64	; 0x40
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2241      	movs	r2, #65	; 0x41
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2242      	movs	r2, #66	; 0x42
 80044d2:	2101      	movs	r1, #1
 80044d4:	5499      	strb	r1, [r3, r2]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2243      	movs	r2, #67	; 0x43
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2244      	movs	r2, #68	; 0x44
 80044e2:	2101      	movs	r1, #1
 80044e4:	5499      	strb	r1, [r3, r2]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2245      	movs	r2, #69	; 0x45
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2246      	movs	r2, #70	; 0x46
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2247      	movs	r2, #71	; 0x47
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	223d      	movs	r2, #61	; 0x3d
 8004502:	2101      	movs	r1, #1
 8004504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b002      	add	sp, #8
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	223d      	movs	r2, #61	; 0x3d
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e047      	b.n	80045b8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223d      	movs	r2, #61	; 0x3d
 800452c:	2102      	movs	r1, #2
 800452e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2101      	movs	r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d014      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x64>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	429a      	cmp	r2, r3
 8004554:	d00e      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x64>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x64>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x64>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_TIM_Base_Start_IT+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d116      	bne.n	80045a2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b06      	cmp	r3, #6
 8004584:	d016      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0xa4>
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	025b      	lsls	r3, r3, #9
 800458c:	429a      	cmp	r2, r3
 800458e:	d011      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2101      	movs	r1, #1
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a0:	e008      	b.n	80045b4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	430a      	orrs	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e000      	b.n	80045b6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40014000 	.word	0x40014000
 80045d0:	00010007 	.word	0x00010007

080045d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2101      	movs	r1, #1
 80045e8:	438a      	bics	r2, r1
 80045ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_TIM_Base_Stop_IT+0x54>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	d10d      	bne.n	8004614 <HAL_TIM_Base_Stop_IT+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_TIM_Base_Stop_IT+0x58>)
 8004600:	4013      	ands	r3, r2
 8004602:	d107      	bne.n	8004614 <HAL_TIM_Base_Stop_IT+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	438a      	bics	r2, r1
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	223d      	movs	r2, #61	; 0x3d
 8004618:	2101      	movs	r1, #1
 800461a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	00001111 	.word	0x00001111
 800462c:	00000444 	.word	0x00000444

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	d021      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2202      	movs	r2, #2
 8004654:	4013      	ands	r3, r2
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2203      	movs	r2, #3
 800465e:	4252      	negs	r2, r2
 8004660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2203      	movs	r2, #3
 8004670:	4013      	ands	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 f8ea 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 800467c:	e007      	b.n	800468e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f8dd 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 f8e9 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2204      	movs	r2, #4
 8004698:	4013      	ands	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2204      	movs	r2, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	d01e      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2205      	movs	r2, #5
 80046aa:	4252      	negs	r2, r2
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	23c0      	movs	r3, #192	; 0xc0
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 f8c3 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 80046ca:	e007      	b.n	80046dc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f8b6 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 f8c2 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2208      	movs	r2, #8
 80046e6:	4013      	ands	r3, r2
 80046e8:	d021      	beq.n	800472e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2208      	movs	r2, #8
 80046ee:	4013      	ands	r3, r2
 80046f0:	d01d      	beq.n	800472e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2209      	movs	r2, #9
 80046f8:	4252      	negs	r2, r2
 80046fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2204      	movs	r2, #4
 8004700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2203      	movs	r2, #3
 800470a:	4013      	ands	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f89d 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 8004716:	e007      	b.n	8004728 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 f890 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f89c 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2210      	movs	r2, #16
 8004732:	4013      	ands	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2210      	movs	r2, #16
 800473a:	4013      	ands	r3, r2
 800473c:	d01e      	beq.n	800477c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2211      	movs	r2, #17
 8004744:	4252      	negs	r2, r2
 8004746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2208      	movs	r2, #8
 800474c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	23c0      	movs	r3, #192	; 0xc0
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4013      	ands	r3, r2
 800475a:	d004      	beq.n	8004766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0018      	movs	r0, r3
 8004760:	f000 f876 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 8004764:	e007      	b.n	8004776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	0018      	movs	r0, r3
 800476a:	f000 f869 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f875 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2201      	movs	r2, #1
 8004780:	4013      	ands	r3, r2
 8004782:	d00c      	beq.n	800479e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d008      	beq.n	800479e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2202      	movs	r2, #2
 8004792:	4252      	negs	r2, r2
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7fe f869 	bl	8002870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2280      	movs	r2, #128	; 0x80
 80047a2:	4013      	ands	r3, r2
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	019b      	lsls	r3, r3, #6
 80047ac:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047ae:	d00b      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	4013      	ands	r3, r2
 80047b6:	d007      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_TIM_IRQHandler+0x208>)
 80047be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 f972 	bl	8004aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4013      	ands	r3, r2
 80047d0:	d00b      	beq.n	80047ea <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	4013      	ands	r3, r2
 80047d8:	d007      	beq.n	80047ea <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_TIM_IRQHandler+0x20c>)
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f969 	bl	8004abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	4013      	ands	r3, r2
 80047f0:	d00c      	beq.n	800480c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	4013      	ands	r3, r2
 80047f8:	d008      	beq.n	800480c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2241      	movs	r2, #65	; 0x41
 8004800:	4252      	negs	r2, r2
 8004802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 f832 	bl	8004870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2220      	movs	r2, #32
 8004810:	4013      	ands	r3, r2
 8004812:	d00c      	beq.n	800482e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	4013      	ands	r3, r2
 800481a:	d008      	beq.n	800482e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2221      	movs	r2, #33	; 0x21
 8004822:	4252      	negs	r2, r2
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 f937 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b004      	add	sp, #16
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	ffffdf7f 	.word	0xffffdf7f
 800483c:	fffffeff 	.word	0xfffffeff

08004840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b002      	add	sp, #8
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a3f      	ldr	r2, [pc, #252]	; (8004990 <TIM_Base_SetConfig+0x110>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00c      	beq.n	80048b2 <TIM_Base_SetConfig+0x32>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	05db      	lsls	r3, r3, #23
 800489e:	429a      	cmp	r2, r3
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x32>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <TIM_Base_SetConfig+0x114>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x32>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a3a      	ldr	r2, [pc, #232]	; (8004998 <TIM_Base_SetConfig+0x118>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2270      	movs	r2, #112	; 0x70
 80048b6:	4393      	bics	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a32      	ldr	r2, [pc, #200]	; (8004990 <TIM_Base_SetConfig+0x110>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d01c      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	05db      	lsls	r3, r3, #23
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d017      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <TIM_Base_SetConfig+0x114>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <TIM_Base_SetConfig+0x118>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2c      	ldr	r2, [pc, #176]	; (800499c <TIM_Base_SetConfig+0x11c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <TIM_Base_SetConfig+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x86>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <TIM_Base_SetConfig+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <TIM_Base_SetConfig+0x12c>)
 800490a:	4013      	ands	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	4393      	bics	r3, r2
 800491e:	001a      	movs	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <TIM_Base_SetConfig+0x110>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0xde>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <TIM_Base_SetConfig+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0xde>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0xde>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <TIM_Base_SetConfig+0x128>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d103      	bne.n	8004966 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2201      	movs	r2, #1
 800497e:	4393      	bics	r3, r2
 8004980:	001a      	movs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	611a      	str	r2, [r3, #16]
  }
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40002000 	.word	0x40002000
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40014400 	.word	0x40014400
 80049a8:	40014800 	.word	0x40014800
 80049ac:	fffffcff 	.word	0xfffffcff

080049b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223c      	movs	r2, #60	; 0x3c
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e05a      	b.n	8004a7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	223c      	movs	r2, #60	; 0x3c
 80049cc:	2101      	movs	r1, #1
 80049ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	223d      	movs	r2, #61	; 0x3d
 80049d4:	2102      	movs	r1, #2
 80049d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2270      	movs	r2, #112	; 0x70
 8004a08:	4393      	bics	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d014      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	05db      	lsls	r3, r3, #23
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d00e      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10c      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2280      	movs	r2, #128	; 0x80
 8004a56:	4393      	bics	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	223d      	movs	r2, #61	; 0x3d
 8004a70:	2101      	movs	r1, #1
 8004a72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223c      	movs	r2, #60	; 0x3c
 8004a78:	2100      	movs	r1, #0
 8004a7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b004      	add	sp, #16
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	ff0fffff 	.word	0xff0fffff
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40014000 	.word	0x40014000

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e046      	b.n	8004b6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2288      	movs	r2, #136	; 0x88
 8004ae2:	589b      	ldr	r3, [r3, r2]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d107      	bne.n	8004af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2284      	movs	r2, #132	; 0x84
 8004aec:	2100      	movs	r1, #0
 8004aee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fe f834 	bl	8002b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2288      	movs	r2, #136	; 0x88
 8004afc:	2124      	movs	r1, #36	; 0x24
 8004afe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	438a      	bics	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 fd0c 	bl	8005538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 f9b2 	bl	8004e8c <UART_SetConfig>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e01c      	b.n	8004b6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	490d      	ldr	r1, [pc, #52]	; (8004b74 <HAL_UART_Init+0xa8>)
 8004b3e:	400a      	ands	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	212a      	movs	r1, #42	; 0x2a
 8004b4e:	438a      	bics	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f000 fd9b 	bl	80056a0 <UART_CheckIdleState>
 8004b6a:	0003      	movs	r3, r0
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	ffffb7ff 	.word	0xffffb7ff

08004b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	1dbb      	adds	r3, r7, #6
 8004b86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2288      	movs	r2, #136	; 0x88
 8004b8c:	589b      	ldr	r3, [r3, r2]
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d000      	beq.n	8004b94 <HAL_UART_Transmit+0x1c>
 8004b92:	e090      	b.n	8004cb6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_UART_Transmit+0x2a>
 8004b9a:	1dbb      	adds	r3, r7, #6
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e088      	b.n	8004cb8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	015b      	lsls	r3, r3, #5
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d109      	bne.n	8004bc6 <HAL_UART_Transmit+0x4e>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d001      	beq.n	8004bc6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e078      	b.n	8004cb8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2290      	movs	r2, #144	; 0x90
 8004bca:	2100      	movs	r1, #0
 8004bcc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2288      	movs	r2, #136	; 0x88
 8004bd2:	2121      	movs	r1, #33	; 0x21
 8004bd4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd6:	f7fe f9eb 	bl	8002fb0 <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1dba      	adds	r2, r7, #6
 8004be2:	2154      	movs	r1, #84	; 0x54
 8004be4:	8812      	ldrh	r2, [r2, #0]
 8004be6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1dba      	adds	r2, r7, #6
 8004bec:	2156      	movs	r1, #86	; 0x56
 8004bee:	8812      	ldrh	r2, [r2, #0]
 8004bf0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	015b      	lsls	r3, r3, #5
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d108      	bne.n	8004c10 <HAL_UART_Transmit+0x98>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e003      	b.n	8004c18 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c18:	e030      	b.n	8004c7c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	0013      	movs	r3, r2
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	f000 fde4 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	1e03      	subs	r3, r0, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2288      	movs	r2, #136	; 0x88
 8004c34:	2120      	movs	r1, #32
 8004c36:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e03d      	b.n	8004cb8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	001a      	movs	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	05d2      	lsls	r2, r2, #23
 8004c4e:	0dd2      	lsrs	r2, r2, #23
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	3302      	adds	r3, #2
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	e007      	b.n	8004c6a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3301      	adds	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2256      	movs	r2, #86	; 0x56
 8004c6e:	5a9b      	ldrh	r3, [r3, r2]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b299      	uxth	r1, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2256      	movs	r2, #86	; 0x56
 8004c7a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2256      	movs	r2, #86	; 0x56
 8004c80:	5a9b      	ldrh	r3, [r3, r2]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1c8      	bne.n	8004c1a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	0013      	movs	r3, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	2140      	movs	r1, #64	; 0x40
 8004c96:	f000 fdad 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8004c9a:	1e03      	subs	r3, r0, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2288      	movs	r2, #136	; 0x88
 8004ca2:	2120      	movs	r1, #32
 8004ca4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e006      	b.n	8004cb8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2288      	movs	r2, #136	; 0x88
 8004cae:	2120      	movs	r1, #32
 8004cb0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b008      	add	sp, #32
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	228c      	movs	r2, #140	; 0x8c
 8004cd4:	589b      	ldr	r3, [r3, r2]
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d000      	beq.n	8004cdc <HAL_UART_Receive+0x1c>
 8004cda:	e0d0      	b.n	8004e7e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_Receive+0x2a>
 8004ce2:	1dbb      	adds	r3, r7, #6
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0c8      	b.n	8004e80 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	015b      	lsls	r3, r3, #5
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d109      	bne.n	8004d0e <HAL_UART_Receive+0x4e>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	d001      	beq.n	8004d0e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0b8      	b.n	8004e80 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2290      	movs	r2, #144	; 0x90
 8004d12:	2100      	movs	r1, #0
 8004d14:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	228c      	movs	r2, #140	; 0x8c
 8004d1a:	2122      	movs	r1, #34	; 0x22
 8004d1c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d24:	f7fe f944 	bl	8002fb0 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1dba      	adds	r2, r7, #6
 8004d30:	215c      	movs	r1, #92	; 0x5c
 8004d32:	8812      	ldrh	r2, [r2, #0]
 8004d34:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1dba      	adds	r2, r7, #6
 8004d3a:	215e      	movs	r1, #94	; 0x5e
 8004d3c:	8812      	ldrh	r2, [r2, #0]
 8004d3e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	015b      	lsls	r3, r3, #5
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d10d      	bne.n	8004d68 <HAL_UART_Receive+0xa8>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_UART_Receive+0x9e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2260      	movs	r2, #96	; 0x60
 8004d58:	494b      	ldr	r1, [pc, #300]	; (8004e88 <HAL_UART_Receive+0x1c8>)
 8004d5a:	5299      	strh	r1, [r3, r2]
 8004d5c:	e02e      	b.n	8004dbc <HAL_UART_Receive+0xfc>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2260      	movs	r2, #96	; 0x60
 8004d62:	21ff      	movs	r1, #255	; 0xff
 8004d64:	5299      	strh	r1, [r3, r2]
 8004d66:	e029      	b.n	8004dbc <HAL_UART_Receive+0xfc>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10d      	bne.n	8004d8c <HAL_UART_Receive+0xcc>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_UART_Receive+0xc2>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2260      	movs	r2, #96	; 0x60
 8004d7c:	21ff      	movs	r1, #255	; 0xff
 8004d7e:	5299      	strh	r1, [r3, r2]
 8004d80:	e01c      	b.n	8004dbc <HAL_UART_Receive+0xfc>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2260      	movs	r2, #96	; 0x60
 8004d86:	217f      	movs	r1, #127	; 0x7f
 8004d88:	5299      	strh	r1, [r3, r2]
 8004d8a:	e017      	b.n	8004dbc <HAL_UART_Receive+0xfc>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	055b      	lsls	r3, r3, #21
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d10d      	bne.n	8004db4 <HAL_UART_Receive+0xf4>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_UART_Receive+0xea>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2260      	movs	r2, #96	; 0x60
 8004da4:	217f      	movs	r1, #127	; 0x7f
 8004da6:	5299      	strh	r1, [r3, r2]
 8004da8:	e008      	b.n	8004dbc <HAL_UART_Receive+0xfc>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2260      	movs	r2, #96	; 0x60
 8004dae:	213f      	movs	r1, #63	; 0x3f
 8004db0:	5299      	strh	r1, [r3, r2]
 8004db2:	e003      	b.n	8004dbc <HAL_UART_Receive+0xfc>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2260      	movs	r2, #96	; 0x60
 8004db8:	2100      	movs	r1, #0
 8004dba:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004dbc:	2312      	movs	r3, #18
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	2160      	movs	r1, #96	; 0x60
 8004dc4:	5a52      	ldrh	r2, [r2, r1]
 8004dc6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	015b      	lsls	r3, r3, #5
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d108      	bne.n	8004de6 <HAL_UART_Receive+0x126>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e003      	b.n	8004dee <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004dee:	e03a      	b.n	8004e66 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	0013      	movs	r3, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2120      	movs	r1, #32
 8004dfe:	f000 fcf9 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8004e02:	1e03      	subs	r3, r0, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	228c      	movs	r2, #140	; 0x8c
 8004e0a:	2120      	movs	r1, #32
 8004e0c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e036      	b.n	8004e80 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10e      	bne.n	8004e36 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2212      	movs	r2, #18
 8004e22:	18ba      	adds	r2, r7, r2
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	4013      	ands	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3302      	adds	r3, #2
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e00e      	b.n	8004e54 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2212      	movs	r2, #18
 8004e40:	18ba      	adds	r2, r7, r2
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	4013      	ands	r3, r2
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3301      	adds	r3, #1
 8004e52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	225e      	movs	r2, #94	; 0x5e
 8004e58:	5a9b      	ldrh	r3, [r3, r2]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b299      	uxth	r1, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	225e      	movs	r2, #94	; 0x5e
 8004e64:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	225e      	movs	r2, #94	; 0x5e
 8004e6a:	5a9b      	ldrh	r3, [r3, r2]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1be      	bne.n	8004df0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	228c      	movs	r2, #140	; 0x8c
 8004e76:	2120      	movs	r1, #32
 8004e78:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b008      	add	sp, #32
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	000001ff 	.word	0x000001ff

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b090      	sub	sp, #64	; 0x40
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e94:	231a      	movs	r3, #26
 8004e96:	2220      	movs	r2, #32
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	19db      	adds	r3, r3, r7
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4ac1      	ldr	r2, [pc, #772]	; (80051c4 <UART_SetConfig+0x338>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	0019      	movs	r1, r3
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4abc      	ldr	r2, [pc, #752]	; (80051c8 <UART_SetConfig+0x33c>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	0018      	movs	r0, r3
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	68d9      	ldr	r1, [r3, #12]
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4ab6      	ldr	r2, [pc, #728]	; (80051cc <UART_SetConfig+0x340>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <UART_SetConfig+0x80>
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4ab4      	ldr	r2, [pc, #720]	; (80051d0 <UART_SetConfig+0x344>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4ab0      	ldr	r2, [pc, #704]	; (80051d4 <UART_SetConfig+0x348>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	0019      	movs	r1, r3
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	220f      	movs	r2, #15
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	0003      	movs	r3, r0
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4aa5      	ldr	r2, [pc, #660]	; (80051d8 <UART_SetConfig+0x34c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d131      	bne.n	8004faa <UART_SetConfig+0x11e>
 8004f46:	4ba5      	ldr	r3, [pc, #660]	; (80051dc <UART_SetConfig+0x350>)
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d01d      	beq.n	8004f8e <UART_SetConfig+0x102>
 8004f52:	d823      	bhi.n	8004f9c <UART_SetConfig+0x110>
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d00c      	beq.n	8004f72 <UART_SetConfig+0xe6>
 8004f58:	d820      	bhi.n	8004f9c <UART_SetConfig+0x110>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <UART_SetConfig+0xd8>
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d00e      	beq.n	8004f80 <UART_SetConfig+0xf4>
 8004f62:	e01b      	b.n	8004f9c <UART_SetConfig+0x110>
 8004f64:	231b      	movs	r3, #27
 8004f66:	2220      	movs	r2, #32
 8004f68:	189b      	adds	r3, r3, r2
 8004f6a:	19db      	adds	r3, r3, r7
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e154      	b.n	800521c <UART_SetConfig+0x390>
 8004f72:	231b      	movs	r3, #27
 8004f74:	2220      	movs	r2, #32
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	19db      	adds	r3, r3, r7
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e14d      	b.n	800521c <UART_SetConfig+0x390>
 8004f80:	231b      	movs	r3, #27
 8004f82:	2220      	movs	r2, #32
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	2204      	movs	r2, #4
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e146      	b.n	800521c <UART_SetConfig+0x390>
 8004f8e:	231b      	movs	r3, #27
 8004f90:	2220      	movs	r2, #32
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	19db      	adds	r3, r3, r7
 8004f96:	2208      	movs	r2, #8
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e13f      	b.n	800521c <UART_SetConfig+0x390>
 8004f9c:	231b      	movs	r3, #27
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	19db      	adds	r3, r3, r7
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e138      	b.n	800521c <UART_SetConfig+0x390>
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a8c      	ldr	r2, [pc, #560]	; (80051e0 <UART_SetConfig+0x354>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d131      	bne.n	8005018 <UART_SetConfig+0x18c>
 8004fb4:	4b89      	ldr	r3, [pc, #548]	; (80051dc <UART_SetConfig+0x350>)
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	220c      	movs	r2, #12
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d01d      	beq.n	8004ffc <UART_SetConfig+0x170>
 8004fc0:	d823      	bhi.n	800500a <UART_SetConfig+0x17e>
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d00c      	beq.n	8004fe0 <UART_SetConfig+0x154>
 8004fc6:	d820      	bhi.n	800500a <UART_SetConfig+0x17e>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <UART_SetConfig+0x146>
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d00e      	beq.n	8004fee <UART_SetConfig+0x162>
 8004fd0:	e01b      	b.n	800500a <UART_SetConfig+0x17e>
 8004fd2:	231b      	movs	r3, #27
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	19db      	adds	r3, r3, r7
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e11d      	b.n	800521c <UART_SetConfig+0x390>
 8004fe0:	231b      	movs	r3, #27
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	19db      	adds	r3, r3, r7
 8004fe8:	2202      	movs	r2, #2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e116      	b.n	800521c <UART_SetConfig+0x390>
 8004fee:	231b      	movs	r3, #27
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	19db      	adds	r3, r3, r7
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e10f      	b.n	800521c <UART_SetConfig+0x390>
 8004ffc:	231b      	movs	r3, #27
 8004ffe:	2220      	movs	r2, #32
 8005000:	189b      	adds	r3, r3, r2
 8005002:	19db      	adds	r3, r3, r7
 8005004:	2208      	movs	r2, #8
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e108      	b.n	800521c <UART_SetConfig+0x390>
 800500a:	231b      	movs	r3, #27
 800500c:	2220      	movs	r2, #32
 800500e:	189b      	adds	r3, r3, r2
 8005010:	19db      	adds	r3, r3, r7
 8005012:	2210      	movs	r2, #16
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e101      	b.n	800521c <UART_SetConfig+0x390>
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a71      	ldr	r2, [pc, #452]	; (80051e4 <UART_SetConfig+0x358>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d131      	bne.n	8005086 <UART_SetConfig+0x1fa>
 8005022:	4b6e      	ldr	r3, [pc, #440]	; (80051dc <UART_SetConfig+0x350>)
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	2230      	movs	r2, #48	; 0x30
 8005028:	4013      	ands	r3, r2
 800502a:	2b30      	cmp	r3, #48	; 0x30
 800502c:	d01d      	beq.n	800506a <UART_SetConfig+0x1de>
 800502e:	d823      	bhi.n	8005078 <UART_SetConfig+0x1ec>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d00c      	beq.n	800504e <UART_SetConfig+0x1c2>
 8005034:	d820      	bhi.n	8005078 <UART_SetConfig+0x1ec>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <UART_SetConfig+0x1b4>
 800503a:	2b10      	cmp	r3, #16
 800503c:	d00e      	beq.n	800505c <UART_SetConfig+0x1d0>
 800503e:	e01b      	b.n	8005078 <UART_SetConfig+0x1ec>
 8005040:	231b      	movs	r3, #27
 8005042:	2220      	movs	r2, #32
 8005044:	189b      	adds	r3, r3, r2
 8005046:	19db      	adds	r3, r3, r7
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e0e6      	b.n	800521c <UART_SetConfig+0x390>
 800504e:	231b      	movs	r3, #27
 8005050:	2220      	movs	r2, #32
 8005052:	189b      	adds	r3, r3, r2
 8005054:	19db      	adds	r3, r3, r7
 8005056:	2202      	movs	r2, #2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e0df      	b.n	800521c <UART_SetConfig+0x390>
 800505c:	231b      	movs	r3, #27
 800505e:	2220      	movs	r2, #32
 8005060:	189b      	adds	r3, r3, r2
 8005062:	19db      	adds	r3, r3, r7
 8005064:	2204      	movs	r2, #4
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e0d8      	b.n	800521c <UART_SetConfig+0x390>
 800506a:	231b      	movs	r3, #27
 800506c:	2220      	movs	r2, #32
 800506e:	189b      	adds	r3, r3, r2
 8005070:	19db      	adds	r3, r3, r7
 8005072:	2208      	movs	r2, #8
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e0d1      	b.n	800521c <UART_SetConfig+0x390>
 8005078:	231b      	movs	r3, #27
 800507a:	2220      	movs	r2, #32
 800507c:	189b      	adds	r3, r3, r2
 800507e:	19db      	adds	r3, r3, r7
 8005080:	2210      	movs	r2, #16
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e0ca      	b.n	800521c <UART_SetConfig+0x390>
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a57      	ldr	r2, [pc, #348]	; (80051e8 <UART_SetConfig+0x35c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d106      	bne.n	800509e <UART_SetConfig+0x212>
 8005090:	231b      	movs	r3, #27
 8005092:	2220      	movs	r2, #32
 8005094:	189b      	adds	r3, r3, r2
 8005096:	19db      	adds	r3, r3, r7
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e0be      	b.n	800521c <UART_SetConfig+0x390>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a52      	ldr	r2, [pc, #328]	; (80051ec <UART_SetConfig+0x360>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d106      	bne.n	80050b6 <UART_SetConfig+0x22a>
 80050a8:	231b      	movs	r3, #27
 80050aa:	2220      	movs	r2, #32
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	19db      	adds	r3, r3, r7
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e0b2      	b.n	800521c <UART_SetConfig+0x390>
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4d      	ldr	r2, [pc, #308]	; (80051f0 <UART_SetConfig+0x364>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d106      	bne.n	80050ce <UART_SetConfig+0x242>
 80050c0:	231b      	movs	r3, #27
 80050c2:	2220      	movs	r2, #32
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	19db      	adds	r3, r3, r7
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	e0a6      	b.n	800521c <UART_SetConfig+0x390>
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3e      	ldr	r2, [pc, #248]	; (80051cc <UART_SetConfig+0x340>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d13e      	bne.n	8005156 <UART_SetConfig+0x2ca>
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <UART_SetConfig+0x350>)
 80050da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050dc:	23c0      	movs	r3, #192	; 0xc0
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	4013      	ands	r3, r2
 80050e2:	22c0      	movs	r2, #192	; 0xc0
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d027      	beq.n	800513a <UART_SetConfig+0x2ae>
 80050ea:	22c0      	movs	r2, #192	; 0xc0
 80050ec:	0112      	lsls	r2, r2, #4
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d82a      	bhi.n	8005148 <UART_SetConfig+0x2bc>
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	0112      	lsls	r2, r2, #4
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d011      	beq.n	800511e <UART_SetConfig+0x292>
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	4293      	cmp	r3, r2
 8005100:	d822      	bhi.n	8005148 <UART_SetConfig+0x2bc>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <UART_SetConfig+0x284>
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	00d2      	lsls	r2, r2, #3
 800510a:	4293      	cmp	r3, r2
 800510c:	d00e      	beq.n	800512c <UART_SetConfig+0x2a0>
 800510e:	e01b      	b.n	8005148 <UART_SetConfig+0x2bc>
 8005110:	231b      	movs	r3, #27
 8005112:	2220      	movs	r2, #32
 8005114:	189b      	adds	r3, r3, r2
 8005116:	19db      	adds	r3, r3, r7
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e07e      	b.n	800521c <UART_SetConfig+0x390>
 800511e:	231b      	movs	r3, #27
 8005120:	2220      	movs	r2, #32
 8005122:	189b      	adds	r3, r3, r2
 8005124:	19db      	adds	r3, r3, r7
 8005126:	2202      	movs	r2, #2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e077      	b.n	800521c <UART_SetConfig+0x390>
 800512c:	231b      	movs	r3, #27
 800512e:	2220      	movs	r2, #32
 8005130:	189b      	adds	r3, r3, r2
 8005132:	19db      	adds	r3, r3, r7
 8005134:	2204      	movs	r2, #4
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e070      	b.n	800521c <UART_SetConfig+0x390>
 800513a:	231b      	movs	r3, #27
 800513c:	2220      	movs	r2, #32
 800513e:	189b      	adds	r3, r3, r2
 8005140:	19db      	adds	r3, r3, r7
 8005142:	2208      	movs	r2, #8
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e069      	b.n	800521c <UART_SetConfig+0x390>
 8005148:	231b      	movs	r3, #27
 800514a:	2220      	movs	r2, #32
 800514c:	189b      	adds	r3, r3, r2
 800514e:	19db      	adds	r3, r3, r7
 8005150:	2210      	movs	r2, #16
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e062      	b.n	800521c <UART_SetConfig+0x390>
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <UART_SetConfig+0x344>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d157      	bne.n	8005210 <UART_SetConfig+0x384>
 8005160:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <UART_SetConfig+0x350>)
 8005162:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005164:	23c0      	movs	r3, #192	; 0xc0
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4013      	ands	r3, r2
 800516a:	22c0      	movs	r2, #192	; 0xc0
 800516c:	0092      	lsls	r2, r2, #2
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <UART_SetConfig+0x368>
 8005172:	22c0      	movs	r2, #192	; 0xc0
 8005174:	0092      	lsls	r2, r2, #2
 8005176:	4293      	cmp	r3, r2
 8005178:	d843      	bhi.n	8005202 <UART_SetConfig+0x376>
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4293      	cmp	r3, r2
 8005180:	d011      	beq.n	80051a6 <UART_SetConfig+0x31a>
 8005182:	2280      	movs	r2, #128	; 0x80
 8005184:	0092      	lsls	r2, r2, #2
 8005186:	4293      	cmp	r3, r2
 8005188:	d83b      	bhi.n	8005202 <UART_SetConfig+0x376>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <UART_SetConfig+0x30c>
 800518e:	2280      	movs	r2, #128	; 0x80
 8005190:	0052      	lsls	r2, r2, #1
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <UART_SetConfig+0x328>
 8005196:	e034      	b.n	8005202 <UART_SetConfig+0x376>
 8005198:	231b      	movs	r3, #27
 800519a:	2220      	movs	r2, #32
 800519c:	189b      	adds	r3, r3, r2
 800519e:	19db      	adds	r3, r3, r7
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e03a      	b.n	800521c <UART_SetConfig+0x390>
 80051a6:	231b      	movs	r3, #27
 80051a8:	2220      	movs	r2, #32
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	19db      	adds	r3, r3, r7
 80051ae:	2202      	movs	r2, #2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e033      	b.n	800521c <UART_SetConfig+0x390>
 80051b4:	231b      	movs	r3, #27
 80051b6:	2220      	movs	r2, #32
 80051b8:	189b      	adds	r3, r3, r2
 80051ba:	19db      	adds	r3, r3, r7
 80051bc:	2204      	movs	r2, #4
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e02c      	b.n	800521c <UART_SetConfig+0x390>
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	cfff69f3 	.word	0xcfff69f3
 80051c8:	ffffcfff 	.word	0xffffcfff
 80051cc:	40008000 	.word	0x40008000
 80051d0:	40008400 	.word	0x40008400
 80051d4:	11fff4ff 	.word	0x11fff4ff
 80051d8:	40013800 	.word	0x40013800
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40004400 	.word	0x40004400
 80051e4:	40004800 	.word	0x40004800
 80051e8:	40004c00 	.word	0x40004c00
 80051ec:	40005000 	.word	0x40005000
 80051f0:	40013c00 	.word	0x40013c00
 80051f4:	231b      	movs	r3, #27
 80051f6:	2220      	movs	r2, #32
 80051f8:	189b      	adds	r3, r3, r2
 80051fa:	19db      	adds	r3, r3, r7
 80051fc:	2208      	movs	r2, #8
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e00c      	b.n	800521c <UART_SetConfig+0x390>
 8005202:	231b      	movs	r3, #27
 8005204:	2220      	movs	r2, #32
 8005206:	189b      	adds	r3, r3, r2
 8005208:	19db      	adds	r3, r3, r7
 800520a:	2210      	movs	r2, #16
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e005      	b.n	800521c <UART_SetConfig+0x390>
 8005210:	231b      	movs	r3, #27
 8005212:	2220      	movs	r2, #32
 8005214:	189b      	adds	r3, r3, r2
 8005216:	19db      	adds	r3, r3, r7
 8005218:	2210      	movs	r2, #16
 800521a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4ac1      	ldr	r2, [pc, #772]	; (8005528 <UART_SetConfig+0x69c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d005      	beq.n	8005232 <UART_SetConfig+0x3a6>
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4ac0      	ldr	r2, [pc, #768]	; (800552c <UART_SetConfig+0x6a0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d000      	beq.n	8005232 <UART_SetConfig+0x3a6>
 8005230:	e093      	b.n	800535a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005232:	231b      	movs	r3, #27
 8005234:	2220      	movs	r2, #32
 8005236:	189b      	adds	r3, r3, r2
 8005238:	19db      	adds	r3, r3, r7
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d015      	beq.n	800526c <UART_SetConfig+0x3e0>
 8005240:	dc18      	bgt.n	8005274 <UART_SetConfig+0x3e8>
 8005242:	2b04      	cmp	r3, #4
 8005244:	d00d      	beq.n	8005262 <UART_SetConfig+0x3d6>
 8005246:	dc15      	bgt.n	8005274 <UART_SetConfig+0x3e8>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <UART_SetConfig+0x3c6>
 800524c:	2b02      	cmp	r3, #2
 800524e:	d005      	beq.n	800525c <UART_SetConfig+0x3d0>
 8005250:	e010      	b.n	8005274 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005252:	f7fe feb3 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 8005256:	0003      	movs	r3, r0
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800525a:	e014      	b.n	8005286 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800525c:	4bb4      	ldr	r3, [pc, #720]	; (8005530 <UART_SetConfig+0x6a4>)
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005260:	e011      	b.n	8005286 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005262:	f7fe fe1f 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8005266:	0003      	movs	r3, r0
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800526a:	e00c      	b.n	8005286 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005272:	e008      	b.n	8005286 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005278:	231a      	movs	r3, #26
 800527a:	2220      	movs	r2, #32
 800527c:	189b      	adds	r3, r3, r2
 800527e:	19db      	adds	r3, r3, r7
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
        break;
 8005284:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	d100      	bne.n	800528e <UART_SetConfig+0x402>
 800528c:	e135      	b.n	80054fa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005292:	4ba8      	ldr	r3, [pc, #672]	; (8005534 <UART_SetConfig+0x6a8>)
 8005294:	0052      	lsls	r2, r2, #1
 8005296:	5ad3      	ldrh	r3, [r2, r3]
 8005298:	0019      	movs	r1, r3
 800529a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800529c:	f7fa ff4e 	bl	800013c <__udivsi3>
 80052a0:	0003      	movs	r3, r0
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	0013      	movs	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	189b      	adds	r3, r3, r2
 80052ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d305      	bcc.n	80052c0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	429a      	cmp	r2, r3
 80052be:	d906      	bls.n	80052ce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80052c0:	231a      	movs	r3, #26
 80052c2:	2220      	movs	r2, #32
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	19db      	adds	r3, r3, r7
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e044      	b.n	8005358 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052da:	4b96      	ldr	r3, [pc, #600]	; (8005534 <UART_SetConfig+0x6a8>)
 80052dc:	0052      	lsls	r2, r2, #1
 80052de:	5ad3      	ldrh	r3, [r2, r3]
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	69b8      	ldr	r0, [r7, #24]
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	f7fb f8d9 	bl	80004a4 <__aeabi_uldivmod>
 80052f2:	0002      	movs	r2, r0
 80052f4:	000b      	movs	r3, r1
 80052f6:	0e11      	lsrs	r1, r2, #24
 80052f8:	021d      	lsls	r5, r3, #8
 80052fa:	430d      	orrs	r5, r1
 80052fc:	0214      	lsls	r4, r2, #8
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	1900      	adds	r0, r0, r4
 8005310:	4169      	adcs	r1, r5
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f7fb f8c0 	bl	80004a4 <__aeabi_uldivmod>
 8005324:	0002      	movs	r2, r0
 8005326:	000b      	movs	r3, r1
 8005328:	0013      	movs	r3, r2
 800532a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	23c0      	movs	r3, #192	; 0xc0
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	429a      	cmp	r2, r3
 8005334:	d309      	bcc.n	800534a <UART_SetConfig+0x4be>
 8005336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	035b      	lsls	r3, r3, #13
 800533c:	429a      	cmp	r2, r3
 800533e:	d204      	bcs.n	800534a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	e006      	b.n	8005358 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800534a:	231a      	movs	r3, #26
 800534c:	2220      	movs	r2, #32
 800534e:	189b      	adds	r3, r3, r2
 8005350:	19db      	adds	r3, r3, r7
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005356:	e0d0      	b.n	80054fa <UART_SetConfig+0x66e>
 8005358:	e0cf      	b.n	80054fa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	69da      	ldr	r2, [r3, #28]
 800535e:	2380      	movs	r3, #128	; 0x80
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	429a      	cmp	r2, r3
 8005364:	d000      	beq.n	8005368 <UART_SetConfig+0x4dc>
 8005366:	e070      	b.n	800544a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005368:	231b      	movs	r3, #27
 800536a:	2220      	movs	r2, #32
 800536c:	189b      	adds	r3, r3, r2
 800536e:	19db      	adds	r3, r3, r7
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b08      	cmp	r3, #8
 8005374:	d015      	beq.n	80053a2 <UART_SetConfig+0x516>
 8005376:	dc18      	bgt.n	80053aa <UART_SetConfig+0x51e>
 8005378:	2b04      	cmp	r3, #4
 800537a:	d00d      	beq.n	8005398 <UART_SetConfig+0x50c>
 800537c:	dc15      	bgt.n	80053aa <UART_SetConfig+0x51e>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <UART_SetConfig+0x4fc>
 8005382:	2b02      	cmp	r3, #2
 8005384:	d005      	beq.n	8005392 <UART_SetConfig+0x506>
 8005386:	e010      	b.n	80053aa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fe18 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 800538c:	0003      	movs	r3, r0
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005390:	e014      	b.n	80053bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005392:	4b67      	ldr	r3, [pc, #412]	; (8005530 <UART_SetConfig+0x6a4>)
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005396:	e011      	b.n	80053bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005398:	f7fe fd84 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 800539c:	0003      	movs	r3, r0
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a0:	e00c      	b.n	80053bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a8:	e008      	b.n	80053bc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80053ae:	231a      	movs	r3, #26
 80053b0:	2220      	movs	r2, #32
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
        break;
 80053ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d100      	bne.n	80053c4 <UART_SetConfig+0x538>
 80053c2:	e09a      	b.n	80054fa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053c8:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <UART_SetConfig+0x6a8>)
 80053ca:	0052      	lsls	r2, r2, #1
 80053cc:	5ad3      	ldrh	r3, [r2, r3]
 80053ce:	0019      	movs	r1, r3
 80053d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053d2:	f7fa feb3 	bl	800013c <__udivsi3>
 80053d6:	0003      	movs	r3, r0
 80053d8:	005a      	lsls	r2, r3, #1
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	18d2      	adds	r2, r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	0019      	movs	r1, r3
 80053e8:	0010      	movs	r0, r2
 80053ea:	f7fa fea7 	bl	800013c <__udivsi3>
 80053ee:	0003      	movs	r3, r0
 80053f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2b0f      	cmp	r3, #15
 80053f6:	d921      	bls.n	800543c <UART_SetConfig+0x5b0>
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	025b      	lsls	r3, r3, #9
 80053fe:	429a      	cmp	r2, r3
 8005400:	d21c      	bcs.n	800543c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	b29a      	uxth	r2, r3
 8005406:	200e      	movs	r0, #14
 8005408:	2420      	movs	r4, #32
 800540a:	1903      	adds	r3, r0, r4
 800540c:	19db      	adds	r3, r3, r7
 800540e:	210f      	movs	r1, #15
 8005410:	438a      	bics	r2, r1
 8005412:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	2207      	movs	r2, #7
 800541c:	4013      	ands	r3, r2
 800541e:	b299      	uxth	r1, r3
 8005420:	1903      	adds	r3, r0, r4
 8005422:	19db      	adds	r3, r3, r7
 8005424:	1902      	adds	r2, r0, r4
 8005426:	19d2      	adds	r2, r2, r7
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1902      	adds	r2, r0, r4
 8005434:	19d2      	adds	r2, r2, r7
 8005436:	8812      	ldrh	r2, [r2, #0]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	e05e      	b.n	80054fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800543c:	231a      	movs	r3, #26
 800543e:	2220      	movs	r2, #32
 8005440:	189b      	adds	r3, r3, r2
 8005442:	19db      	adds	r3, r3, r7
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e057      	b.n	80054fa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800544a:	231b      	movs	r3, #27
 800544c:	2220      	movs	r2, #32
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d015      	beq.n	8005484 <UART_SetConfig+0x5f8>
 8005458:	dc18      	bgt.n	800548c <UART_SetConfig+0x600>
 800545a:	2b04      	cmp	r3, #4
 800545c:	d00d      	beq.n	800547a <UART_SetConfig+0x5ee>
 800545e:	dc15      	bgt.n	800548c <UART_SetConfig+0x600>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <UART_SetConfig+0x5de>
 8005464:	2b02      	cmp	r3, #2
 8005466:	d005      	beq.n	8005474 <UART_SetConfig+0x5e8>
 8005468:	e010      	b.n	800548c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546a:	f7fe fda7 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 800546e:	0003      	movs	r3, r0
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005472:	e014      	b.n	800549e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <UART_SetConfig+0x6a4>)
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005478:	e011      	b.n	800549e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fd13 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 800547e:	0003      	movs	r3, r0
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005482:	e00c      	b.n	800549e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800548a:	e008      	b.n	800549e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005490:	231a      	movs	r3, #26
 8005492:	2220      	movs	r2, #32
 8005494:	189b      	adds	r3, r3, r2
 8005496:	19db      	adds	r3, r3, r7
 8005498:	2201      	movs	r2, #1
 800549a:	701a      	strb	r2, [r3, #0]
        break;
 800549c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d02a      	beq.n	80054fa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a8:	4b22      	ldr	r3, [pc, #136]	; (8005534 <UART_SetConfig+0x6a8>)
 80054aa:	0052      	lsls	r2, r2, #1
 80054ac:	5ad3      	ldrh	r3, [r2, r3]
 80054ae:	0019      	movs	r1, r3
 80054b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054b2:	f7fa fe43 	bl	800013c <__udivsi3>
 80054b6:	0003      	movs	r3, r0
 80054b8:	001a      	movs	r2, r3
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	18d2      	adds	r2, r2, r3
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	0019      	movs	r1, r3
 80054c8:	0010      	movs	r0, r2
 80054ca:	f7fa fe37 	bl	800013c <__udivsi3>
 80054ce:	0003      	movs	r3, r0
 80054d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d90a      	bls.n	80054ee <UART_SetConfig+0x662>
 80054d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	429a      	cmp	r2, r3
 80054e0:	d205      	bcs.n	80054ee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60da      	str	r2, [r3, #12]
 80054ec:	e005      	b.n	80054fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80054ee:	231a      	movs	r3, #26
 80054f0:	2220      	movs	r2, #32
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	19db      	adds	r3, r3, r7
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	226a      	movs	r2, #106	; 0x6a
 80054fe:	2101      	movs	r1, #1
 8005500:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	2268      	movs	r2, #104	; 0x68
 8005506:	2101      	movs	r1, #1
 8005508:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	2200      	movs	r2, #0
 800550e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	2200      	movs	r2, #0
 8005514:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005516:	231a      	movs	r3, #26
 8005518:	2220      	movs	r2, #32
 800551a:	189b      	adds	r3, r3, r2
 800551c:	19db      	adds	r3, r3, r7
 800551e:	781b      	ldrb	r3, [r3, #0]
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b010      	add	sp, #64	; 0x40
 8005526:	bdb0      	pop	{r4, r5, r7, pc}
 8005528:	40008000 	.word	0x40008000
 800552c:	40008400 	.word	0x40008400
 8005530:	00f42400 	.word	0x00f42400
 8005534:	0800af90 	.word	0x0800af90

08005538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	2208      	movs	r2, #8
 8005546:	4013      	ands	r3, r2
 8005548:	d00b      	beq.n	8005562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a4a      	ldr	r2, [pc, #296]	; (800567c <UART_AdvFeatureConfig+0x144>)
 8005552:	4013      	ands	r3, r2
 8005554:	0019      	movs	r1, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	2201      	movs	r2, #1
 8005568:	4013      	ands	r3, r2
 800556a:	d00b      	beq.n	8005584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a43      	ldr	r2, [pc, #268]	; (8005680 <UART_AdvFeatureConfig+0x148>)
 8005574:	4013      	ands	r3, r2
 8005576:	0019      	movs	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	2202      	movs	r2, #2
 800558a:	4013      	ands	r3, r2
 800558c:	d00b      	beq.n	80055a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <UART_AdvFeatureConfig+0x14c>)
 8005596:	4013      	ands	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	2204      	movs	r2, #4
 80055ac:	4013      	ands	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4a34      	ldr	r2, [pc, #208]	; (8005688 <UART_AdvFeatureConfig+0x150>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	2210      	movs	r2, #16
 80055ce:	4013      	ands	r3, r2
 80055d0:	d00b      	beq.n	80055ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a2c      	ldr	r2, [pc, #176]	; (800568c <UART_AdvFeatureConfig+0x154>)
 80055da:	4013      	ands	r3, r2
 80055dc:	0019      	movs	r1, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	2220      	movs	r2, #32
 80055f0:	4013      	ands	r3, r2
 80055f2:	d00b      	beq.n	800560c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	4a25      	ldr	r2, [pc, #148]	; (8005690 <UART_AdvFeatureConfig+0x158>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	2240      	movs	r2, #64	; 0x40
 8005612:	4013      	ands	r3, r2
 8005614:	d01d      	beq.n	8005652 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <UART_AdvFeatureConfig+0x15c>)
 800561e:	4013      	ands	r3, r2
 8005620:	0019      	movs	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	035b      	lsls	r3, r3, #13
 8005636:	429a      	cmp	r2, r3
 8005638:	d10b      	bne.n	8005652 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <UART_AdvFeatureConfig+0x160>)
 8005642:	4013      	ands	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	4013      	ands	r3, r2
 800565a:	d00b      	beq.n	8005674 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4a0e      	ldr	r2, [pc, #56]	; (800569c <UART_AdvFeatureConfig+0x164>)
 8005664:	4013      	ands	r3, r2
 8005666:	0019      	movs	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}
 800567c:	ffff7fff 	.word	0xffff7fff
 8005680:	fffdffff 	.word	0xfffdffff
 8005684:	fffeffff 	.word	0xfffeffff
 8005688:	fffbffff 	.word	0xfffbffff
 800568c:	ffffefff 	.word	0xffffefff
 8005690:	ffffdfff 	.word	0xffffdfff
 8005694:	ffefffff 	.word	0xffefffff
 8005698:	ff9fffff 	.word	0xff9fffff
 800569c:	fff7ffff 	.word	0xfff7ffff

080056a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b092      	sub	sp, #72	; 0x48
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2290      	movs	r2, #144	; 0x90
 80056ac:	2100      	movs	r1, #0
 80056ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b0:	f7fd fc7e 	bl	8002fb0 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2208      	movs	r2, #8
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d12d      	bne.n	8005722 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c8:	2280      	movs	r2, #128	; 0x80
 80056ca:	0391      	lsls	r1, r2, #14
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4a47      	ldr	r2, [pc, #284]	; (80057ec <UART_CheckIdleState+0x14c>)
 80056d0:	9200      	str	r2, [sp, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f000 f88e 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 80056d8:	1e03      	subs	r3, r0, #0
 80056da:	d022      	beq.n	8005722 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056dc:	f3ef 8310 	mrs	r3, PRIMASK
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e6:	2301      	movs	r3, #1
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	f383 8810 	msr	PRIMASK, r3
}
 80056f0:	46c0      	nop			; (mov r8, r8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	438a      	bics	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	f383 8810 	msr	PRIMASK, r3
}
 800570c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2288      	movs	r2, #136	; 0x88
 8005712:	2120      	movs	r1, #32
 8005714:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2284      	movs	r2, #132	; 0x84
 800571a:	2100      	movs	r1, #0
 800571c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e060      	b.n	80057e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2204      	movs	r2, #4
 800572a:	4013      	ands	r3, r2
 800572c:	2b04      	cmp	r3, #4
 800572e:	d146      	bne.n	80057be <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	03d1      	lsls	r1, r2, #15
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4a2c      	ldr	r2, [pc, #176]	; (80057ec <UART_CheckIdleState+0x14c>)
 800573a:	9200      	str	r2, [sp, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	f000 f859 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8005742:	1e03      	subs	r3, r0, #0
 8005744:	d03b      	beq.n	80057be <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005746:	f3ef 8310 	mrs	r3, PRIMASK
 800574a:	60fb      	str	r3, [r7, #12]
  return(result);
 800574c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
 8005750:	2301      	movs	r3, #1
 8005752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f383 8810 	msr	PRIMASK, r3
}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4922      	ldr	r1, [pc, #136]	; (80057f0 <UART_CheckIdleState+0x150>)
 8005768:	400a      	ands	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005778:	f3ef 8310 	mrs	r3, PRIMASK
 800577c:	61bb      	str	r3, [r7, #24]
  return(result);
 800577e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
 8005782:	2301      	movs	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f383 8810 	msr	PRIMASK, r3
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2101      	movs	r1, #1
 800579a:	438a      	bics	r2, r1
 800579c:	609a      	str	r2, [r3, #8]
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	228c      	movs	r2, #140	; 0x8c
 80057ae:	2120      	movs	r1, #32
 80057b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2284      	movs	r2, #132	; 0x84
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e012      	b.n	80057e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2288      	movs	r2, #136	; 0x88
 80057c2:	2120      	movs	r1, #32
 80057c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	228c      	movs	r2, #140	; 0x8c
 80057ca:	2120      	movs	r1, #32
 80057cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2284      	movs	r2, #132	; 0x84
 80057de:	2100      	movs	r1, #0
 80057e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b010      	add	sp, #64	; 0x40
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	01ffffff 	.word	0x01ffffff
 80057f0:	fffffedf 	.word	0xfffffedf

080057f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	1dfb      	adds	r3, r7, #7
 8005802:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005804:	e051      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3301      	adds	r3, #1
 800580a:	d04e      	beq.n	80058aa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580c:	f7fd fbd0 	bl	8002fb0 <HAL_GetTick>
 8005810:	0002      	movs	r2, r0
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <UART_WaitOnFlagUntilTimeout+0x2e>
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e051      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2204      	movs	r2, #4
 800582e:	4013      	ands	r3, r2
 8005830:	d03b      	beq.n	80058aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d038      	beq.n	80058aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d035      	beq.n	80058aa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2208      	movs	r2, #8
 8005846:	4013      	ands	r3, r2
 8005848:	2b08      	cmp	r3, #8
 800584a:	d111      	bne.n	8005870 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2208      	movs	r2, #8
 8005852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 f83c 	bl	80058d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2290      	movs	r2, #144	; 0x90
 8005860:	2108      	movs	r1, #8
 8005862:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2284      	movs	r2, #132	; 0x84
 8005868:	2100      	movs	r1, #0
 800586a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e02c      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	401a      	ands	r2, r3
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	429a      	cmp	r2, r3
 8005882:	d112      	bne.n	80058aa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	0112      	lsls	r2, r2, #4
 800588c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	0018      	movs	r0, r3
 8005892:	f000 f81f 	bl	80058d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2290      	movs	r2, #144	; 0x90
 800589a:	2120      	movs	r1, #32
 800589c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2284      	movs	r2, #132	; 0x84
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e00f      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	425a      	negs	r2, r3
 80058ba:	4153      	adcs	r3, r2
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	001a      	movs	r2, r3
 80058c0:	1dfb      	adds	r3, r7, #7
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d09e      	beq.n	8005806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	0018      	movs	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b004      	add	sp, #16
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08e      	sub	sp, #56	; 0x38
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058dc:	f3ef 8310 	mrs	r3, PRIMASK
 80058e0:	617b      	str	r3, [r7, #20]
  return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
 80058e6:	2301      	movs	r3, #1
 80058e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4926      	ldr	r1, [pc, #152]	; (8005998 <UART_EndRxTransfer+0xc4>)
 80058fe:	400a      	ands	r2, r1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f383 8810 	msr	PRIMASK, r3
}
 800590c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590e:	f3ef 8310 	mrs	r3, PRIMASK
 8005912:	623b      	str	r3, [r7, #32]
  return(result);
 8005914:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
 8005918:	2301      	movs	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	491b      	ldr	r1, [pc, #108]	; (800599c <UART_EndRxTransfer+0xc8>)
 8005930:	400a      	ands	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	f383 8810 	msr	PRIMASK, r3
}
 800593e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d118      	bne.n	800597a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	60bb      	str	r3, [r7, #8]
  return(result);
 800594e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005952:	2301      	movs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2110      	movs	r1, #16
 800596a:	438a      	bics	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	228c      	movs	r2, #140	; 0x8c
 800597e:	2120      	movs	r1, #32
 8005980:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b00e      	add	sp, #56	; 0x38
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	fffffedf 	.word	0xfffffedf
 800599c:	effffffe 	.word	0xeffffffe

080059a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2284      	movs	r2, #132	; 0x84
 80059ac:	5c9b      	ldrb	r3, [r3, r2]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e027      	b.n	8005a06 <HAL_UARTEx_DisableFifoMode+0x66>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2284      	movs	r2, #132	; 0x84
 80059ba:	2101      	movs	r1, #1
 80059bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2288      	movs	r2, #136	; 0x88
 80059c2:	2124      	movs	r1, #36	; 0x24
 80059c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2101      	movs	r1, #1
 80059da:	438a      	bics	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <HAL_UARTEx_DisableFifoMode+0x70>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2288      	movs	r2, #136	; 0x88
 80059f8:	2120      	movs	r1, #32
 80059fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2284      	movs	r2, #132	; 0x84
 8005a00:	2100      	movs	r1, #0
 8005a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b004      	add	sp, #16
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	dfffffff 	.word	0xdfffffff

08005a14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2284      	movs	r2, #132	; 0x84
 8005a22:	5c9b      	ldrb	r3, [r3, r2]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e02e      	b.n	8005a8a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2284      	movs	r2, #132	; 0x84
 8005a30:	2101      	movs	r1, #1
 8005a32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2288      	movs	r2, #136	; 0x88
 8005a38:	2124      	movs	r1, #36	; 0x24
 8005a3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2101      	movs	r1, #1
 8005a50:	438a      	bics	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	08d9      	lsrs	r1, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 f854 	bl	8005b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2288      	movs	r2, #136	; 0x88
 8005a7c:	2120      	movs	r1, #32
 8005a7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2284      	movs	r2, #132	; 0x84
 8005a84:	2100      	movs	r1, #0
 8005a86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2284      	movs	r2, #132	; 0x84
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e02f      	b.n	8005b0c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2284      	movs	r2, #132	; 0x84
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2288      	movs	r2, #136	; 0x88
 8005ab8:	2124      	movs	r1, #36	; 0x24
 8005aba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2101      	movs	r1, #1
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4a0e      	ldr	r2, [pc, #56]	; (8005b14 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 f813 	bl	8005b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2288      	movs	r2, #136	; 0x88
 8005afe:	2120      	movs	r1, #32
 8005b00:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2284      	movs	r2, #132	; 0x84
 8005b06:	2100      	movs	r1, #0
 8005b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b004      	add	sp, #16
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	f1ffffff 	.word	0xf1ffffff

08005b18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d108      	bne.n	8005b3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	226a      	movs	r2, #106	; 0x6a
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2268      	movs	r2, #104	; 0x68
 8005b34:	2101      	movs	r1, #1
 8005b36:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b38:	e043      	b.n	8005bc2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b3a:	260f      	movs	r6, #15
 8005b3c:	19bb      	adds	r3, r7, r6
 8005b3e:	2208      	movs	r2, #8
 8005b40:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b42:	200e      	movs	r0, #14
 8005b44:	183b      	adds	r3, r7, r0
 8005b46:	2208      	movs	r2, #8
 8005b48:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	0e5b      	lsrs	r3, r3, #25
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	240d      	movs	r4, #13
 8005b56:	193b      	adds	r3, r7, r4
 8005b58:	2107      	movs	r1, #7
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	0f5b      	lsrs	r3, r3, #29
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	250c      	movs	r5, #12
 8005b6a:	197b      	adds	r3, r7, r5
 8005b6c:	2107      	movs	r1, #7
 8005b6e:	400a      	ands	r2, r1
 8005b70:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b72:	183b      	adds	r3, r7, r0
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	197a      	adds	r2, r7, r5
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	4914      	ldr	r1, [pc, #80]	; (8005bcc <UARTEx_SetNbDataToProcess+0xb4>)
 8005b7c:	5c8a      	ldrb	r2, [r1, r2]
 8005b7e:	435a      	muls	r2, r3
 8005b80:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b82:	197b      	adds	r3, r7, r5
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005b88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	f7fa fb60 	bl	8000250 <__divsi3>
 8005b90:	0003      	movs	r3, r0
 8005b92:	b299      	uxth	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	226a      	movs	r2, #106	; 0x6a
 8005b98:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b9a:	19bb      	adds	r3, r7, r6
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	193a      	adds	r2, r7, r4
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	490a      	ldr	r1, [pc, #40]	; (8005bcc <UARTEx_SetNbDataToProcess+0xb4>)
 8005ba4:	5c8a      	ldrb	r2, [r1, r2]
 8005ba6:	435a      	muls	r2, r3
 8005ba8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005baa:	193b      	adds	r3, r7, r4
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005bb0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	f7fa fb4c 	bl	8000250 <__divsi3>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	b299      	uxth	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2268      	movs	r2, #104	; 0x68
 8005bc0:	5299      	strh	r1, [r3, r2]
}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b005      	add	sp, #20
 8005bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	0800afa8 	.word	0x0800afa8
 8005bd0:	0800afb0 	.word	0x0800afb0

08005bd4 <my_gnss_get_pair>:
 */

#include "my_gnss.h"

bool my_gnss_get_pair ( char pair_response[2][250] )
{
 8005bd4:	b5b0      	push	{r4, r5, r7, lr}
 8005bd6:	b0c4      	sub	sp, #272	; 0x110
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	bool result = false ;
 8005bdc:	2387      	movs	r3, #135	; 0x87
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
	char* 		nmea_pair_label = "$PAIR" ;
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <my_gnss_get_pair+0x12c>)
 8005be8:	2284      	movs	r2, #132	; 0x84
 8005bea:	0052      	lsls	r2, r2, #1
 8005bec:	18ba      	adds	r2, r7, r2
 8005bee:	6013      	str	r3, [r2, #0]
	uint8_t		i = 0 ;
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	33ff      	adds	r3, #255	; 0xff
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	33ff      	adds	r3, #255	; 0xff
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8005c04:	1dfb      	adds	r3, r7, #7
 8005c06:	33ff      	adds	r3, #255	; 0xff
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8005c0c:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <my_gnss_get_pair+0x130>)
 8005c0e:	2288      	movs	r2, #136	; 0x88
 8005c10:	0052      	lsls	r2, r2, #1
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	19db      	adds	r3, r3, r7
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	22f6      	movs	r2, #246	; 0xf6
 8005c1e:	2100      	movs	r1, #0
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 fd1b 	bl	800665c <memset>

	my_tim_start () ;
 8005c26:	f7fc fe07 	bl	8002838 <my_tim_start>
	while ( tim_seconds < 10 )
 8005c2a:	e055      	b.n	8005cd8 <my_gnss_get_pair+0x104>
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 8005c2c:	2408      	movs	r4, #8
 8005c2e:	34ff      	adds	r4, #255	; 0xff
 8005c30:	193b      	adds	r3, r7, r4
 8005c32:	2100      	movs	r1, #0
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fc ff1d 	bl	8002a74 <my_gnss_receive_byte>
		if ( rx_byte )
 8005c3a:	0020      	movs	r0, r4
 8005c3c:	183b      	adds	r3, r7, r0
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2410      	movs	r4, #16
 8005c42:	34ff      	adds	r4, #255	; 0xff
 8005c44:	193a      	adds	r2, r7, r4
 8005c46:	1939      	adds	r1, r7, r4
 8005c48:	7809      	ldrb	r1, [r1, #0]
 8005c4a:	7011      	strb	r1, [r2, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d043      	beq.n	8005cd8 <my_gnss_get_pair+0x104>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8005c50:	1dfa      	adds	r2, r7, #7
 8005c52:	32ff      	adds	r2, #255	; 0xff
 8005c54:	250c      	movs	r5, #12
 8005c56:	1979      	adds	r1, r7, r5
 8005c58:	183b      	adds	r3, r7, r0
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 f856 	bl	8005d0c <my_nmea_message>
 8005c60:	0001      	movs	r1, r0
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	193a      	adds	r2, r7, r4
 8005c66:	7812      	ldrb	r2, [r2, #0]
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	2902      	cmp	r1, #2
 8005c6c:	d134      	bne.n	8005cd8 <my_gnss_get_pair+0x104>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8005c6e:	197b      	adds	r3, r7, r5
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 f8b7 	bl	8005de4 <is_my_nmea_checksum_ok>
 8005c76:	0003      	movs	r3, r0
 8005c78:	0019      	movs	r1, r3
 8005c7a:	193b      	adds	r3, r7, r4
 8005c7c:	193a      	adds	r2, r7, r4
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	2900      	cmp	r1, #0
 8005c84:	d028      	beq.n	8005cd8 <my_gnss_get_pair+0x104>
				{
					if ( strstr ( (char*) nmea_message , nmea_pair_label ) )
 8005c86:	2384      	movs	r3, #132	; 0x84
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	197b      	adds	r3, r7, r5
 8005c90:	0011      	movs	r1, r2
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 fcfe 	bl	8006694 <strstr>
 8005c98:	0001      	movs	r1, r0
 8005c9a:	193b      	adds	r3, r7, r4
 8005c9c:	193a      	adds	r2, r7, r4
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	2900      	cmp	r1, #0
 8005ca4:	d018      	beq.n	8005cd8 <my_gnss_get_pair+0x104>
					{
						memcpy ( pair_response[i++] , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	193a      	adds	r2, r7, r4
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	7011      	strb	r1, [r2, #0]
 8005cb0:	001a      	movs	r2, r3
 8005cb2:	23fa      	movs	r3, #250	; 0xfa
 8005cb4:	4353      	muls	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	18d2      	adds	r2, r2, r3
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <my_gnss_get_pair+0x130>)
 8005cbc:	2188      	movs	r1, #136	; 0x88
 8005cbe:	0049      	lsls	r1, r1, #1
 8005cc0:	185b      	adds	r3, r3, r1
 8005cc2:	19db      	adds	r3, r3, r7
 8005cc4:	0010      	movs	r0, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	23fa      	movs	r3, #250	; 0xfa
 8005cca:	001a      	movs	r2, r3
 8005ccc:	f000 fd99 	bl	8006802 <memcpy>
						if (i == 2 )
 8005cd0:	193b      	adds	r3, r7, r4
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d004      	beq.n	8005ce2 <my_gnss_get_pair+0x10e>
	while ( tim_seconds < 10 )
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <my_gnss_get_pair+0x134>)
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d9a5      	bls.n	8005c2c <my_gnss_get_pair+0x58>
 8005ce0:	e000      	b.n	8005ce4 <my_gnss_get_pair+0x110>
						{
							break ;
 8005ce2:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8005ce4:	f7fc fdb8 	bl	8002858 <my_tim_stop>
	return i > 0 ? true : false ;
 8005ce8:	2310      	movs	r3, #16
 8005cea:	33ff      	adds	r3, #255	; 0xff
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	1e5a      	subs	r2, r3, #1
 8005cf2:	4193      	sbcs	r3, r2
 8005cf4:	b2db      	uxtb	r3, r3
}
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b044      	add	sp, #272	; 0x110
 8005cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	0800ae88 	.word	0x0800ae88
 8005d04:	fffffefc 	.word	0xfffffefc
 8005d08:	20000a80 	.word	0x20000a80

08005d0c <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b24      	cmp	r3, #36	; 0x24
 8005d1e:	d117      	bne.n	8005d50 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	b2d1      	uxtb	r1, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	7011      	strb	r1, [r2, #0]
 8005d32:	001a      	movs	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	001a      	movs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e045      	b.n	8005ddc <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b1f      	cmp	r3, #31
 8005d56:	d907      	bls.n	8005d68 <my_nmea_message+0x5c>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b7e      	cmp	r3, #126	; 0x7e
 8005d5e:	d803      	bhi.n	8005d68 <my_nmea_message+0x5c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <my_nmea_message+0x64>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b0d      	cmp	r3, #13
 8005d6e:	d114      	bne.n	8005d9a <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	b2d1      	uxtb	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	7011      	strb	r1, [r2, #0]
 8005d7c:	001a      	movs	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	189b      	adds	r3, r3, r2
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e020      	b.n	8005ddc <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b0a      	cmp	r3, #10
 8005da0:	d11a      	bne.n	8005dd8 <my_nmea_message+0xcc>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d916      	bls.n	8005dd8 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	001a      	movs	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	189b      	adds	r3, r3, r2
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b0d      	cmp	r3, #13
 8005dc4:	d108      	bne.n	8005dd8 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	001a      	movs	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	189b      	adds	r3, r3, r2
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e001      	b.n	8005ddc <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	425b      	negs	r3, r3
}
 8005ddc:	0018      	movs	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b004      	add	sp, #16
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <is_my_nmea_checksum_ok>:
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
}


bool is_my_nmea_checksum_ok ( const char* s )
{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8005dec:	230f      	movs	r3, #15
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8005df4:	230e      	movs	r3, #14
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8005dfc:	e00f      	b.n	8005e1e <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8005dfe:	220e      	movs	r2, #14
 8005e00:	18bb      	adds	r3, r7, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	18ba      	adds	r2, r7, r2
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	7011      	strb	r1, [r2, #0]
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	7819      	ldrb	r1, [r3, #0]
 8005e12:	220f      	movs	r2, #15
 8005e14:	18bb      	adds	r3, r7, r2
 8005e16:	18ba      	adds	r2, r7, r2
 8005e18:	7812      	ldrb	r2, [r2, #0]
 8005e1a:	404a      	eors	r2, r1
 8005e1c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8005e1e:	210e      	movs	r1, #14
 8005e20:	187b      	adds	r3, r7, r1
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e2c:	d00a      	beq.n	8005e44 <is_my_nmea_checksum_ok+0x60>
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	18d3      	adds	r3, r2, r3
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <is_my_nmea_checksum_ok+0x60>
 8005e3c:	187b      	adds	r3, r7, r1
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1dc      	bne.n	8005dfe <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8005e44:	230f      	movs	r3, #15
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	781c      	ldrb	r4, [r3, #0]
 8005e4a:	210e      	movs	r1, #14
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	187a      	adds	r2, r7, r1
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	3201      	adds	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	187b      	adds	r3, r7, r1
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	18d3      	adds	r3, r2, r3
 8005e5e:	2210      	movs	r2, #16
 8005e60:	2100      	movs	r1, #0
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 fabe 	bl	80063e4 <strtol>
 8005e68:	0003      	movs	r3, r0
 8005e6a:	1ae3      	subs	r3, r4, r3
 8005e6c:	425a      	negs	r2, r3
 8005e6e:	4153      	adcs	r3, r2
 8005e70:	b2db      	uxtb	r3, r3
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b005      	add	sp, #20
 8005e78:	bd90      	pop	{r4, r7, pc}
	...

08005e7c <malloc>:
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <malloc+0x10>)
 8005e80:	0001      	movs	r1, r0
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	f000 f804 	bl	8005e90 <_malloc_r>
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	200006e8 	.word	0x200006e8

08005e90 <_malloc_r>:
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e92:	000d      	movs	r5, r1
 8005e94:	b087      	sub	sp, #28
 8005e96:	350b      	adds	r5, #11
 8005e98:	9001      	str	r0, [sp, #4]
 8005e9a:	2d16      	cmp	r5, #22
 8005e9c:	d908      	bls.n	8005eb0 <_malloc_r+0x20>
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	4395      	bics	r5, r2
 8005ea2:	d506      	bpl.n	8005eb2 <_malloc_r+0x22>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	9a01      	ldr	r2, [sp, #4]
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	2000      	movs	r0, #0
 8005eac:	b007      	add	sp, #28
 8005eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb0:	2510      	movs	r5, #16
 8005eb2:	42a9      	cmp	r1, r5
 8005eb4:	d8f6      	bhi.n	8005ea4 <_malloc_r+0x14>
 8005eb6:	9801      	ldr	r0, [sp, #4]
 8005eb8:	f000 f9fe 	bl	80062b8 <__malloc_lock>
 8005ebc:	23fc      	movs	r3, #252	; 0xfc
 8005ebe:	4ebe      	ldr	r6, [pc, #760]	; (80061b8 <_malloc_r+0x328>)
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	d219      	bcs.n	8005efa <_malloc_r+0x6a>
 8005ec6:	002a      	movs	r2, r5
 8005ec8:	3208      	adds	r2, #8
 8005eca:	18b2      	adds	r2, r6, r2
 8005ecc:	0011      	movs	r1, r2
 8005ece:	6854      	ldr	r4, [r2, #4]
 8005ed0:	3908      	subs	r1, #8
 8005ed2:	08eb      	lsrs	r3, r5, #3
 8005ed4:	428c      	cmp	r4, r1
 8005ed6:	d103      	bne.n	8005ee0 <_malloc_r+0x50>
 8005ed8:	68d4      	ldr	r4, [r2, #12]
 8005eda:	3302      	adds	r3, #2
 8005edc:	42a2      	cmp	r2, r4
 8005ede:	d022      	beq.n	8005f26 <_malloc_r+0x96>
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	68a1      	ldr	r1, [r4, #8]
 8005ee6:	4393      	bics	r3, r2
 8005ee8:	68e2      	ldr	r2, [r4, #12]
 8005eea:	18e3      	adds	r3, r4, r3
 8005eec:	60ca      	str	r2, [r1, #12]
 8005eee:	6091      	str	r1, [r2, #8]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	e02a      	b.n	8005f50 <_malloc_r+0xc0>
 8005efa:	233f      	movs	r3, #63	; 0x3f
 8005efc:	0a6a      	lsrs	r2, r5, #9
 8005efe:	d003      	beq.n	8005f08 <_malloc_r+0x78>
 8005f00:	2a04      	cmp	r2, #4
 8005f02:	d82b      	bhi.n	8005f5c <_malloc_r+0xcc>
 8005f04:	09ab      	lsrs	r3, r5, #6
 8005f06:	3338      	adds	r3, #56	; 0x38
 8005f08:	2203      	movs	r2, #3
 8005f0a:	4694      	mov	ip, r2
 8005f0c:	00d9      	lsls	r1, r3, #3
 8005f0e:	1989      	adds	r1, r1, r6
 8005f10:	68cc      	ldr	r4, [r1, #12]
 8005f12:	428c      	cmp	r4, r1
 8005f14:	d006      	beq.n	8005f24 <_malloc_r+0x94>
 8005f16:	4660      	mov	r0, ip
 8005f18:	6862      	ldr	r2, [r4, #4]
 8005f1a:	4382      	bics	r2, r0
 8005f1c:	1b57      	subs	r7, r2, r5
 8005f1e:	2f0f      	cmp	r7, #15
 8005f20:	dd34      	ble.n	8005f8c <_malloc_r+0xfc>
 8005f22:	3b01      	subs	r3, #1
 8005f24:	3301      	adds	r3, #1
 8005f26:	6934      	ldr	r4, [r6, #16]
 8005f28:	49a4      	ldr	r1, [pc, #656]	; (80061bc <_malloc_r+0x32c>)
 8005f2a:	428c      	cmp	r4, r1
 8005f2c:	d055      	beq.n	8005fda <_malloc_r+0x14a>
 8005f2e:	2003      	movs	r0, #3
 8005f30:	6862      	ldr	r2, [r4, #4]
 8005f32:	4382      	bics	r2, r0
 8005f34:	1b50      	subs	r0, r2, r5
 8005f36:	280f      	cmp	r0, #15
 8005f38:	dd36      	ble.n	8005fa8 <_malloc_r+0x118>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	1967      	adds	r7, r4, r5
 8005f3e:	431d      	orrs	r5, r3
 8005f40:	4303      	orrs	r3, r0
 8005f42:	6065      	str	r5, [r4, #4]
 8005f44:	6177      	str	r7, [r6, #20]
 8005f46:	6137      	str	r7, [r6, #16]
 8005f48:	60f9      	str	r1, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	50a0      	str	r0, [r4, r2]
 8005f50:	9801      	ldr	r0, [sp, #4]
 8005f52:	f000 f9b9 	bl	80062c8 <__malloc_unlock>
 8005f56:	0020      	movs	r0, r4
 8005f58:	3008      	adds	r0, #8
 8005f5a:	e7a7      	b.n	8005eac <_malloc_r+0x1c>
 8005f5c:	2a14      	cmp	r2, #20
 8005f5e:	d802      	bhi.n	8005f66 <_malloc_r+0xd6>
 8005f60:	0013      	movs	r3, r2
 8005f62:	335b      	adds	r3, #91	; 0x5b
 8005f64:	e7d0      	b.n	8005f08 <_malloc_r+0x78>
 8005f66:	2a54      	cmp	r2, #84	; 0x54
 8005f68:	d802      	bhi.n	8005f70 <_malloc_r+0xe0>
 8005f6a:	0b2b      	lsrs	r3, r5, #12
 8005f6c:	336e      	adds	r3, #110	; 0x6e
 8005f6e:	e7cb      	b.n	8005f08 <_malloc_r+0x78>
 8005f70:	23aa      	movs	r3, #170	; 0xaa
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d802      	bhi.n	8005f7e <_malloc_r+0xee>
 8005f78:	0beb      	lsrs	r3, r5, #15
 8005f7a:	3377      	adds	r3, #119	; 0x77
 8005f7c:	e7c4      	b.n	8005f08 <_malloc_r+0x78>
 8005f7e:	4990      	ldr	r1, [pc, #576]	; (80061c0 <_malloc_r+0x330>)
 8005f80:	237e      	movs	r3, #126	; 0x7e
 8005f82:	428a      	cmp	r2, r1
 8005f84:	d8c0      	bhi.n	8005f08 <_malloc_r+0x78>
 8005f86:	0cab      	lsrs	r3, r5, #18
 8005f88:	337c      	adds	r3, #124	; 0x7c
 8005f8a:	e7bd      	b.n	8005f08 <_malloc_r+0x78>
 8005f8c:	68e0      	ldr	r0, [r4, #12]
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	db08      	blt.n	8005fa4 <_malloc_r+0x114>
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	60d8      	str	r0, [r3, #12]
 8005f96:	6083      	str	r3, [r0, #8]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	18a2      	adds	r2, r4, r2
 8005f9c:	6851      	ldr	r1, [r2, #4]
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	6053      	str	r3, [r2, #4]
 8005fa2:	e7d5      	b.n	8005f50 <_malloc_r+0xc0>
 8005fa4:	0004      	movs	r4, r0
 8005fa6:	e7b4      	b.n	8005f12 <_malloc_r+0x82>
 8005fa8:	6171      	str	r1, [r6, #20]
 8005faa:	6131      	str	r1, [r6, #16]
 8005fac:	2800      	cmp	r0, #0
 8005fae:	daf3      	bge.n	8005f98 <_malloc_r+0x108>
 8005fb0:	6871      	ldr	r1, [r6, #4]
 8005fb2:	468c      	mov	ip, r1
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	0089      	lsls	r1, r1, #2
 8005fb8:	428a      	cmp	r2, r1
 8005fba:	d300      	bcc.n	8005fbe <_malloc_r+0x12e>
 8005fbc:	e08c      	b.n	80060d8 <_malloc_r+0x248>
 8005fbe:	08d1      	lsrs	r1, r2, #3
 8005fc0:	0950      	lsrs	r0, r2, #5
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4082      	lsls	r2, r0
 8005fc6:	4660      	mov	r0, ip
 8005fc8:	4302      	orrs	r2, r0
 8005fca:	6072      	str	r2, [r6, #4]
 8005fcc:	00ca      	lsls	r2, r1, #3
 8005fce:	1992      	adds	r2, r2, r6
 8005fd0:	6891      	ldr	r1, [r2, #8]
 8005fd2:	60e2      	str	r2, [r4, #12]
 8005fd4:	60a1      	str	r1, [r4, #8]
 8005fd6:	6094      	str	r4, [r2, #8]
 8005fd8:	60cc      	str	r4, [r1, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	4876      	ldr	r0, [pc, #472]	; (80061b8 <_malloc_r+0x328>)
 8005fde:	1099      	asrs	r1, r3, #2
 8005fe0:	408a      	lsls	r2, r1
 8005fe2:	6841      	ldr	r1, [r0, #4]
 8005fe4:	4291      	cmp	r1, r2
 8005fe6:	d328      	bcc.n	800603a <_malloc_r+0x1aa>
 8005fe8:	420a      	tst	r2, r1
 8005fea:	d105      	bne.n	8005ff8 <_malloc_r+0x168>
 8005fec:	2403      	movs	r4, #3
 8005fee:	43a3      	bics	r3, r4
 8005ff0:	0052      	lsls	r2, r2, #1
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	420a      	tst	r2, r1
 8005ff6:	d0fb      	beq.n	8005ff0 <_malloc_r+0x160>
 8005ff8:	496f      	ldr	r1, [pc, #444]	; (80061b8 <_malloc_r+0x328>)
 8005ffa:	9104      	str	r1, [sp, #16]
 8005ffc:	00d9      	lsls	r1, r3, #3
 8005ffe:	1841      	adds	r1, r0, r1
 8006000:	468c      	mov	ip, r1
 8006002:	000f      	movs	r7, r1
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	68fc      	ldr	r4, [r7, #12]
 8006008:	42bc      	cmp	r4, r7
 800600a:	d000      	beq.n	800600e <_malloc_r+0x17e>
 800600c:	e09b      	b.n	8006146 <_malloc_r+0x2b6>
 800600e:	2403      	movs	r4, #3
 8006010:	9902      	ldr	r1, [sp, #8]
 8006012:	3708      	adds	r7, #8
 8006014:	3101      	adds	r1, #1
 8006016:	9102      	str	r1, [sp, #8]
 8006018:	4221      	tst	r1, r4
 800601a:	d1f4      	bne.n	8006006 <_malloc_r+0x176>
 800601c:	2103      	movs	r1, #3
 800601e:	420b      	tst	r3, r1
 8006020:	d000      	beq.n	8006024 <_malloc_r+0x194>
 8006022:	e0b7      	b.n	8006194 <_malloc_r+0x304>
 8006024:	6843      	ldr	r3, [r0, #4]
 8006026:	4393      	bics	r3, r2
 8006028:	6043      	str	r3, [r0, #4]
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	0052      	lsls	r2, r2, #1
 800602e:	6859      	ldr	r1, [r3, #4]
 8006030:	4291      	cmp	r1, r2
 8006032:	d302      	bcc.n	800603a <_malloc_r+0x1aa>
 8006034:	2a00      	cmp	r2, #0
 8006036:	d000      	beq.n	800603a <_malloc_r+0x1aa>
 8006038:	e0bb      	b.n	80061b2 <_malloc_r+0x322>
 800603a:	2203      	movs	r2, #3
 800603c:	6883      	ldr	r3, [r0, #8]
 800603e:	9302      	str	r3, [sp, #8]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4393      	bics	r3, r2
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	42ab      	cmp	r3, r5
 8006048:	d303      	bcc.n	8006052 <_malloc_r+0x1c2>
 800604a:	1b59      	subs	r1, r3, r5
 800604c:	290f      	cmp	r1, #15
 800604e:	dd00      	ble.n	8006052 <_malloc_r+0x1c2>
 8006050:	e123      	b.n	800629a <_malloc_r+0x40a>
 8006052:	9b02      	ldr	r3, [sp, #8]
 8006054:	9a03      	ldr	r2, [sp, #12]
 8006056:	2008      	movs	r0, #8
 8006058:	189e      	adds	r6, r3, r2
 800605a:	4b5a      	ldr	r3, [pc, #360]	; (80061c4 <_malloc_r+0x334>)
 800605c:	681f      	ldr	r7, [r3, #0]
 800605e:	f000 fbc5 	bl	80067ec <sysconf>
 8006062:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <_malloc_r+0x338>)
 8006064:	3710      	adds	r7, #16
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	197f      	adds	r7, r7, r5
 800606a:	9004      	str	r0, [sp, #16]
 800606c:	3301      	adds	r3, #1
 800606e:	d003      	beq.n	8006078 <_malloc_r+0x1e8>
 8006070:	1e7b      	subs	r3, r7, #1
 8006072:	181b      	adds	r3, r3, r0
 8006074:	4247      	negs	r7, r0
 8006076:	401f      	ands	r7, r3
 8006078:	0039      	movs	r1, r7
 800607a:	9801      	ldr	r0, [sp, #4]
 800607c:	f000 fb62 	bl	8006744 <_sbrk_r>
 8006080:	0004      	movs	r4, r0
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d100      	bne.n	8006088 <_malloc_r+0x1f8>
 8006086:	e0de      	b.n	8006246 <_malloc_r+0x3b6>
 8006088:	4286      	cmp	r6, r0
 800608a:	d904      	bls.n	8006096 <_malloc_r+0x206>
 800608c:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <_malloc_r+0x328>)
 800608e:	9a02      	ldr	r2, [sp, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d000      	beq.n	8006096 <_malloc_r+0x206>
 8006094:	e0d7      	b.n	8006246 <_malloc_r+0x3b6>
 8006096:	4a4d      	ldr	r2, [pc, #308]	; (80061cc <_malloc_r+0x33c>)
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	9a04      	ldr	r2, [sp, #16]
 80060a0:	3a01      	subs	r2, #1
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d000      	beq.n	80060a8 <_malloc_r+0x218>
 80060a6:	e097      	b.n	80061d8 <_malloc_r+0x348>
 80060a8:	4216      	tst	r6, r2
 80060aa:	d000      	beq.n	80060ae <_malloc_r+0x21e>
 80060ac:	e094      	b.n	80061d8 <_malloc_r+0x348>
 80060ae:	4b42      	ldr	r3, [pc, #264]	; (80061b8 <_malloc_r+0x328>)
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	9b03      	ldr	r3, [sp, #12]
 80060b4:	19df      	adds	r7, r3, r7
 80060b6:	2301      	movs	r3, #1
 80060b8:	433b      	orrs	r3, r7
 80060ba:	6053      	str	r3, [r2, #4]
 80060bc:	4b43      	ldr	r3, [pc, #268]	; (80061cc <_malloc_r+0x33c>)
 80060be:	4a44      	ldr	r2, [pc, #272]	; (80061d0 <_malloc_r+0x340>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6811      	ldr	r1, [r2, #0]
 80060c4:	428b      	cmp	r3, r1
 80060c6:	d900      	bls.n	80060ca <_malloc_r+0x23a>
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4a42      	ldr	r2, [pc, #264]	; (80061d4 <_malloc_r+0x344>)
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	428b      	cmp	r3, r1
 80060d0:	d800      	bhi.n	80060d4 <_malloc_r+0x244>
 80060d2:	e0b8      	b.n	8006246 <_malloc_r+0x3b6>
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e0b6      	b.n	8006246 <_malloc_r+0x3b6>
 80060d8:	0a50      	lsrs	r0, r2, #9
 80060da:	2804      	cmp	r0, #4
 80060dc:	d811      	bhi.n	8006102 <_malloc_r+0x272>
 80060de:	0991      	lsrs	r1, r2, #6
 80060e0:	3138      	adds	r1, #56	; 0x38
 80060e2:	00cf      	lsls	r7, r1, #3
 80060e4:	19bf      	adds	r7, r7, r6
 80060e6:	68b8      	ldr	r0, [r7, #8]
 80060e8:	4287      	cmp	r7, r0
 80060ea:	d125      	bne.n	8006138 <_malloc_r+0x2a8>
 80060ec:	2201      	movs	r2, #1
 80060ee:	1089      	asrs	r1, r1, #2
 80060f0:	408a      	lsls	r2, r1
 80060f2:	4661      	mov	r1, ip
 80060f4:	430a      	orrs	r2, r1
 80060f6:	6072      	str	r2, [r6, #4]
 80060f8:	60e7      	str	r7, [r4, #12]
 80060fa:	60a0      	str	r0, [r4, #8]
 80060fc:	60bc      	str	r4, [r7, #8]
 80060fe:	60c4      	str	r4, [r0, #12]
 8006100:	e76b      	b.n	8005fda <_malloc_r+0x14a>
 8006102:	2814      	cmp	r0, #20
 8006104:	d802      	bhi.n	800610c <_malloc_r+0x27c>
 8006106:	0001      	movs	r1, r0
 8006108:	315b      	adds	r1, #91	; 0x5b
 800610a:	e7ea      	b.n	80060e2 <_malloc_r+0x252>
 800610c:	2854      	cmp	r0, #84	; 0x54
 800610e:	d802      	bhi.n	8006116 <_malloc_r+0x286>
 8006110:	0b11      	lsrs	r1, r2, #12
 8006112:	316e      	adds	r1, #110	; 0x6e
 8006114:	e7e5      	b.n	80060e2 <_malloc_r+0x252>
 8006116:	21aa      	movs	r1, #170	; 0xaa
 8006118:	0049      	lsls	r1, r1, #1
 800611a:	4288      	cmp	r0, r1
 800611c:	d802      	bhi.n	8006124 <_malloc_r+0x294>
 800611e:	0bd1      	lsrs	r1, r2, #15
 8006120:	3177      	adds	r1, #119	; 0x77
 8006122:	e7de      	b.n	80060e2 <_malloc_r+0x252>
 8006124:	4f26      	ldr	r7, [pc, #152]	; (80061c0 <_malloc_r+0x330>)
 8006126:	217e      	movs	r1, #126	; 0x7e
 8006128:	42b8      	cmp	r0, r7
 800612a:	d8da      	bhi.n	80060e2 <_malloc_r+0x252>
 800612c:	0c91      	lsrs	r1, r2, #18
 800612e:	317c      	adds	r1, #124	; 0x7c
 8006130:	e7d7      	b.n	80060e2 <_malloc_r+0x252>
 8006132:	6880      	ldr	r0, [r0, #8]
 8006134:	4287      	cmp	r7, r0
 8006136:	d004      	beq.n	8006142 <_malloc_r+0x2b2>
 8006138:	2603      	movs	r6, #3
 800613a:	6841      	ldr	r1, [r0, #4]
 800613c:	43b1      	bics	r1, r6
 800613e:	4291      	cmp	r1, r2
 8006140:	d8f7      	bhi.n	8006132 <_malloc_r+0x2a2>
 8006142:	68c7      	ldr	r7, [r0, #12]
 8006144:	e7d8      	b.n	80060f8 <_malloc_r+0x268>
 8006146:	2603      	movs	r6, #3
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	43b1      	bics	r1, r6
 800614c:	9103      	str	r1, [sp, #12]
 800614e:	68e6      	ldr	r6, [r4, #12]
 8006150:	1b49      	subs	r1, r1, r5
 8006152:	290f      	cmp	r1, #15
 8006154:	dd10      	ble.n	8006178 <_malloc_r+0x2e8>
 8006156:	2201      	movs	r2, #1
 8006158:	1963      	adds	r3, r4, r5
 800615a:	4315      	orrs	r5, r2
 800615c:	6065      	str	r5, [r4, #4]
 800615e:	68a5      	ldr	r5, [r4, #8]
 8006160:	430a      	orrs	r2, r1
 8006162:	60ee      	str	r6, [r5, #12]
 8006164:	60b5      	str	r5, [r6, #8]
 8006166:	6143      	str	r3, [r0, #20]
 8006168:	6103      	str	r3, [r0, #16]
 800616a:	4814      	ldr	r0, [pc, #80]	; (80061bc <_malloc_r+0x32c>)
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	60d8      	str	r0, [r3, #12]
 8006170:	6098      	str	r0, [r3, #8]
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	50e1      	str	r1, [r4, r3]
 8006176:	e6eb      	b.n	8005f50 <_malloc_r+0xc0>
 8006178:	2900      	cmp	r1, #0
 800617a:	db09      	blt.n	8006190 <_malloc_r+0x300>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	18e1      	adds	r1, r4, r3
 8006180:	2301      	movs	r3, #1
 8006182:	684a      	ldr	r2, [r1, #4]
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	60de      	str	r6, [r3, #12]
 800618c:	60b3      	str	r3, [r6, #8]
 800618e:	e6df      	b.n	8005f50 <_malloc_r+0xc0>
 8006190:	0034      	movs	r4, r6
 8006192:	e739      	b.n	8006008 <_malloc_r+0x178>
 8006194:	2108      	movs	r1, #8
 8006196:	4249      	negs	r1, r1
 8006198:	448c      	add	ip, r1
 800619a:	4661      	mov	r1, ip
 800619c:	6889      	ldr	r1, [r1, #8]
 800619e:	3b01      	subs	r3, #1
 80061a0:	4561      	cmp	r1, ip
 80061a2:	d100      	bne.n	80061a6 <_malloc_r+0x316>
 80061a4:	e73a      	b.n	800601c <_malloc_r+0x18c>
 80061a6:	e740      	b.n	800602a <_malloc_r+0x19a>
 80061a8:	3304      	adds	r3, #4
 80061aa:	0052      	lsls	r2, r2, #1
 80061ac:	420a      	tst	r2, r1
 80061ae:	d0fb      	beq.n	80061a8 <_malloc_r+0x318>
 80061b0:	e724      	b.n	8005ffc <_malloc_r+0x16c>
 80061b2:	9b02      	ldr	r3, [sp, #8]
 80061b4:	e7fa      	b.n	80061ac <_malloc_r+0x31c>
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	2000003c 	.word	0x2000003c
 80061bc:	20000044 	.word	0x20000044
 80061c0:	00000554 	.word	0x00000554
 80061c4:	20000ab4 	.word	0x20000ab4
 80061c8:	20000444 	.word	0x20000444
 80061cc:	20000a84 	.word	0x20000a84
 80061d0:	20000aac 	.word	0x20000aac
 80061d4:	20000ab0 	.word	0x20000ab0
 80061d8:	4934      	ldr	r1, [pc, #208]	; (80062ac <_malloc_r+0x41c>)
 80061da:	6808      	ldr	r0, [r1, #0]
 80061dc:	3001      	adds	r0, #1
 80061de:	d140      	bne.n	8006262 <_malloc_r+0x3d2>
 80061e0:	600c      	str	r4, [r1, #0]
 80061e2:	2107      	movs	r1, #7
 80061e4:	0026      	movs	r6, r4
 80061e6:	2300      	movs	r3, #0
 80061e8:	400e      	ands	r6, r1
 80061ea:	420c      	tst	r4, r1
 80061ec:	d002      	beq.n	80061f4 <_malloc_r+0x364>
 80061ee:	3308      	adds	r3, #8
 80061f0:	1b9b      	subs	r3, r3, r6
 80061f2:	18e4      	adds	r4, r4, r3
 80061f4:	19e1      	adds	r1, r4, r7
 80061f6:	9105      	str	r1, [sp, #20]
 80061f8:	9f05      	ldr	r7, [sp, #20]
 80061fa:	9904      	ldr	r1, [sp, #16]
 80061fc:	4017      	ands	r7, r2
 80061fe:	18cb      	adds	r3, r1, r3
 8006200:	1bdf      	subs	r7, r3, r7
 8006202:	4017      	ands	r7, r2
 8006204:	0039      	movs	r1, r7
 8006206:	9801      	ldr	r0, [sp, #4]
 8006208:	f000 fa9c 	bl	8006744 <_sbrk_r>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d107      	bne.n	8006220 <_malloc_r+0x390>
 8006210:	1e37      	subs	r7, r6, #0
 8006212:	9805      	ldr	r0, [sp, #20]
 8006214:	d004      	beq.n	8006220 <_malloc_r+0x390>
 8006216:	0030      	movs	r0, r6
 8006218:	2700      	movs	r7, #0
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	3808      	subs	r0, #8
 800621e:	1818      	adds	r0, r3, r0
 8006220:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <_malloc_r+0x420>)
 8006222:	1b00      	subs	r0, r0, r4
 8006224:	6813      	ldr	r3, [r2, #0]
 8006226:	19c0      	adds	r0, r0, r7
 8006228:	19db      	adds	r3, r3, r7
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	4b21      	ldr	r3, [pc, #132]	; (80062b4 <_malloc_r+0x424>)
 8006230:	9902      	ldr	r1, [sp, #8]
 8006232:	4310      	orrs	r0, r2
 8006234:	609c      	str	r4, [r3, #8]
 8006236:	6060      	str	r0, [r4, #4]
 8006238:	4299      	cmp	r1, r3
 800623a:	d100      	bne.n	800623e <_malloc_r+0x3ae>
 800623c:	e73e      	b.n	80060bc <_malloc_r+0x22c>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d813      	bhi.n	800626c <_malloc_r+0x3dc>
 8006244:	6062      	str	r2, [r4, #4]
 8006246:	2203      	movs	r2, #3
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <_malloc_r+0x424>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4393      	bics	r3, r2
 8006250:	1b59      	subs	r1, r3, r5
 8006252:	42ab      	cmp	r3, r5
 8006254:	d301      	bcc.n	800625a <_malloc_r+0x3ca>
 8006256:	290f      	cmp	r1, #15
 8006258:	dc1f      	bgt.n	800629a <_malloc_r+0x40a>
 800625a:	9801      	ldr	r0, [sp, #4]
 800625c:	f000 f834 	bl	80062c8 <__malloc_unlock>
 8006260:	e623      	b.n	8005eaa <_malloc_r+0x1a>
 8006262:	4913      	ldr	r1, [pc, #76]	; (80062b0 <_malloc_r+0x420>)
 8006264:	1ba6      	subs	r6, r4, r6
 8006266:	18f6      	adds	r6, r6, r3
 8006268:	600e      	str	r6, [r1, #0]
 800626a:	e7ba      	b.n	80061e2 <_malloc_r+0x352>
 800626c:	2107      	movs	r1, #7
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	3b0c      	subs	r3, #12
 8006272:	438b      	bics	r3, r1
 8006274:	9902      	ldr	r1, [sp, #8]
 8006276:	6849      	ldr	r1, [r1, #4]
 8006278:	400a      	ands	r2, r1
 800627a:	9902      	ldr	r1, [sp, #8]
 800627c:	431a      	orrs	r2, r3
 800627e:	604a      	str	r2, [r1, #4]
 8006280:	18ca      	adds	r2, r1, r3
 8006282:	2105      	movs	r1, #5
 8006284:	6051      	str	r1, [r2, #4]
 8006286:	6091      	str	r1, [r2, #8]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d800      	bhi.n	800628e <_malloc_r+0x3fe>
 800628c:	e716      	b.n	80060bc <_malloc_r+0x22c>
 800628e:	9902      	ldr	r1, [sp, #8]
 8006290:	9801      	ldr	r0, [sp, #4]
 8006292:	3108      	adds	r1, #8
 8006294:	f000 fb26 	bl	80068e4 <_free_r>
 8006298:	e710      	b.n	80060bc <_malloc_r+0x22c>
 800629a:	2201      	movs	r2, #1
 800629c:	0013      	movs	r3, r2
 800629e:	4805      	ldr	r0, [pc, #20]	; (80062b4 <_malloc_r+0x424>)
 80062a0:	432b      	orrs	r3, r5
 80062a2:	6884      	ldr	r4, [r0, #8]
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	1963      	adds	r3, r4, r5
 80062a8:	6083      	str	r3, [r0, #8]
 80062aa:	e623      	b.n	8005ef4 <_malloc_r+0x64>
 80062ac:	20000444 	.word	0x20000444
 80062b0:	20000a84 	.word	0x20000a84
 80062b4:	2000003c 	.word	0x2000003c

080062b8 <__malloc_lock>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4802      	ldr	r0, [pc, #8]	; (80062c4 <__malloc_lock+0xc>)
 80062bc:	f000 fa94 	bl	80067e8 <__retarget_lock_acquire_recursive>
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	20000bf9 	.word	0x20000bf9

080062c8 <__malloc_unlock>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	4802      	ldr	r0, [pc, #8]	; (80062d4 <__malloc_unlock+0xc>)
 80062cc:	f000 fa8d 	bl	80067ea <__retarget_lock_release_recursive>
 80062d0:	bd10      	pop	{r4, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	20000bf9 	.word	0x20000bf9

080062d8 <_strtol_l.constprop.0>:
 80062d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062da:	b087      	sub	sp, #28
 80062dc:	001e      	movs	r6, r3
 80062de:	9005      	str	r0, [sp, #20]
 80062e0:	9101      	str	r1, [sp, #4]
 80062e2:	9202      	str	r2, [sp, #8]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d048      	beq.n	800637a <_strtol_l.constprop.0+0xa2>
 80062e8:	000b      	movs	r3, r1
 80062ea:	2e24      	cmp	r6, #36	; 0x24
 80062ec:	d845      	bhi.n	800637a <_strtol_l.constprop.0+0xa2>
 80062ee:	4a3b      	ldr	r2, [pc, #236]	; (80063dc <_strtol_l.constprop.0+0x104>)
 80062f0:	2108      	movs	r1, #8
 80062f2:	4694      	mov	ip, r2
 80062f4:	001a      	movs	r2, r3
 80062f6:	4660      	mov	r0, ip
 80062f8:	7814      	ldrb	r4, [r2, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	5d00      	ldrb	r0, [r0, r4]
 80062fe:	001d      	movs	r5, r3
 8006300:	0007      	movs	r7, r0
 8006302:	400f      	ands	r7, r1
 8006304:	4208      	tst	r0, r1
 8006306:	d1f5      	bne.n	80062f4 <_strtol_l.constprop.0+0x1c>
 8006308:	2c2d      	cmp	r4, #45	; 0x2d
 800630a:	d13d      	bne.n	8006388 <_strtol_l.constprop.0+0xb0>
 800630c:	2701      	movs	r7, #1
 800630e:	781c      	ldrb	r4, [r3, #0]
 8006310:	1c95      	adds	r5, r2, #2
 8006312:	2e00      	cmp	r6, #0
 8006314:	d05e      	beq.n	80063d4 <_strtol_l.constprop.0+0xfc>
 8006316:	2e10      	cmp	r6, #16
 8006318:	d109      	bne.n	800632e <_strtol_l.constprop.0+0x56>
 800631a:	2c30      	cmp	r4, #48	; 0x30
 800631c:	d107      	bne.n	800632e <_strtol_l.constprop.0+0x56>
 800631e:	2220      	movs	r2, #32
 8006320:	782b      	ldrb	r3, [r5, #0]
 8006322:	4393      	bics	r3, r2
 8006324:	2b58      	cmp	r3, #88	; 0x58
 8006326:	d150      	bne.n	80063ca <_strtol_l.constprop.0+0xf2>
 8006328:	2610      	movs	r6, #16
 800632a:	786c      	ldrb	r4, [r5, #1]
 800632c:	3502      	adds	r5, #2
 800632e:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <_strtol_l.constprop.0+0x108>)
 8006330:	0031      	movs	r1, r6
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	0018      	movs	r0, r3
 8006336:	9303      	str	r3, [sp, #12]
 8006338:	f7f9 ff86 	bl	8000248 <__aeabi_uidivmod>
 800633c:	2200      	movs	r2, #0
 800633e:	9104      	str	r1, [sp, #16]
 8006340:	2101      	movs	r1, #1
 8006342:	4684      	mov	ip, r0
 8006344:	0010      	movs	r0, r2
 8006346:	4249      	negs	r1, r1
 8006348:	0023      	movs	r3, r4
 800634a:	3b30      	subs	r3, #48	; 0x30
 800634c:	2b09      	cmp	r3, #9
 800634e:	d903      	bls.n	8006358 <_strtol_l.constprop.0+0x80>
 8006350:	3b11      	subs	r3, #17
 8006352:	2b19      	cmp	r3, #25
 8006354:	d81d      	bhi.n	8006392 <_strtol_l.constprop.0+0xba>
 8006356:	330a      	adds	r3, #10
 8006358:	429e      	cmp	r6, r3
 800635a:	dd1e      	ble.n	800639a <_strtol_l.constprop.0+0xc2>
 800635c:	1c54      	adds	r4, r2, #1
 800635e:	d009      	beq.n	8006374 <_strtol_l.constprop.0+0x9c>
 8006360:	000a      	movs	r2, r1
 8006362:	4584      	cmp	ip, r0
 8006364:	d306      	bcc.n	8006374 <_strtol_l.constprop.0+0x9c>
 8006366:	d102      	bne.n	800636e <_strtol_l.constprop.0+0x96>
 8006368:	9c04      	ldr	r4, [sp, #16]
 800636a:	429c      	cmp	r4, r3
 800636c:	db02      	blt.n	8006374 <_strtol_l.constprop.0+0x9c>
 800636e:	2201      	movs	r2, #1
 8006370:	4370      	muls	r0, r6
 8006372:	1818      	adds	r0, r3, r0
 8006374:	782c      	ldrb	r4, [r5, #0]
 8006376:	3501      	adds	r5, #1
 8006378:	e7e6      	b.n	8006348 <_strtol_l.constprop.0+0x70>
 800637a:	f000 fa09 	bl	8006790 <__errno>
 800637e:	2316      	movs	r3, #22
 8006380:	6003      	str	r3, [r0, #0]
 8006382:	2000      	movs	r0, #0
 8006384:	b007      	add	sp, #28
 8006386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006388:	2c2b      	cmp	r4, #43	; 0x2b
 800638a:	d1c2      	bne.n	8006312 <_strtol_l.constprop.0+0x3a>
 800638c:	781c      	ldrb	r4, [r3, #0]
 800638e:	1c95      	adds	r5, r2, #2
 8006390:	e7bf      	b.n	8006312 <_strtol_l.constprop.0+0x3a>
 8006392:	0023      	movs	r3, r4
 8006394:	3b61      	subs	r3, #97	; 0x61
 8006396:	2b19      	cmp	r3, #25
 8006398:	d9dd      	bls.n	8006356 <_strtol_l.constprop.0+0x7e>
 800639a:	1c53      	adds	r3, r2, #1
 800639c:	d109      	bne.n	80063b2 <_strtol_l.constprop.0+0xda>
 800639e:	2322      	movs	r3, #34	; 0x22
 80063a0:	9a05      	ldr	r2, [sp, #20]
 80063a2:	9803      	ldr	r0, [sp, #12]
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0eb      	beq.n	8006384 <_strtol_l.constprop.0+0xac>
 80063ac:	1e6b      	subs	r3, r5, #1
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	e007      	b.n	80063c2 <_strtol_l.constprop.0+0xea>
 80063b2:	2f00      	cmp	r7, #0
 80063b4:	d000      	beq.n	80063b8 <_strtol_l.constprop.0+0xe0>
 80063b6:	4240      	negs	r0, r0
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0e2      	beq.n	8006384 <_strtol_l.constprop.0+0xac>
 80063be:	2a00      	cmp	r2, #0
 80063c0:	d1f4      	bne.n	80063ac <_strtol_l.constprop.0+0xd4>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	9a01      	ldr	r2, [sp, #4]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e7dc      	b.n	8006384 <_strtol_l.constprop.0+0xac>
 80063ca:	2430      	movs	r4, #48	; 0x30
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	d1ae      	bne.n	800632e <_strtol_l.constprop.0+0x56>
 80063d0:	3608      	adds	r6, #8
 80063d2:	e7ac      	b.n	800632e <_strtol_l.constprop.0+0x56>
 80063d4:	2c30      	cmp	r4, #48	; 0x30
 80063d6:	d0a2      	beq.n	800631e <_strtol_l.constprop.0+0x46>
 80063d8:	260a      	movs	r6, #10
 80063da:	e7a8      	b.n	800632e <_strtol_l.constprop.0+0x56>
 80063dc:	0800afb9 	.word	0x0800afb9
 80063e0:	7fffffff 	.word	0x7fffffff

080063e4 <strtol>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4c04      	ldr	r4, [pc, #16]	; (80063f8 <strtol+0x14>)
 80063e8:	0013      	movs	r3, r2
 80063ea:	000a      	movs	r2, r1
 80063ec:	0001      	movs	r1, r0
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	f7ff ff72 	bl	80062d8 <_strtol_l.constprop.0>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	200006e8 	.word	0x200006e8

080063fc <std>:
 80063fc:	2300      	movs	r3, #0
 80063fe:	b510      	push	{r4, lr}
 8006400:	0004      	movs	r4, r0
 8006402:	6003      	str	r3, [r0, #0]
 8006404:	6043      	str	r3, [r0, #4]
 8006406:	6083      	str	r3, [r0, #8]
 8006408:	8181      	strh	r1, [r0, #12]
 800640a:	6643      	str	r3, [r0, #100]	; 0x64
 800640c:	81c2      	strh	r2, [r0, #14]
 800640e:	6103      	str	r3, [r0, #16]
 8006410:	6143      	str	r3, [r0, #20]
 8006412:	6183      	str	r3, [r0, #24]
 8006414:	0019      	movs	r1, r3
 8006416:	2208      	movs	r2, #8
 8006418:	305c      	adds	r0, #92	; 0x5c
 800641a:	f000 f91f 	bl	800665c <memset>
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <std+0x50>)
 8006420:	61e4      	str	r4, [r4, #28]
 8006422:	6223      	str	r3, [r4, #32]
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <std+0x54>)
 8006426:	6263      	str	r3, [r4, #36]	; 0x24
 8006428:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <std+0x58>)
 800642a:	62a3      	str	r3, [r4, #40]	; 0x28
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <std+0x5c>)
 800642e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <std+0x60>)
 8006432:	429c      	cmp	r4, r3
 8006434:	d005      	beq.n	8006442 <std+0x46>
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <std+0x64>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d002      	beq.n	8006442 <std+0x46>
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <std+0x68>)
 800643e:	429c      	cmp	r4, r3
 8006440:	d103      	bne.n	800644a <std+0x4e>
 8006442:	0020      	movs	r0, r4
 8006444:	3058      	adds	r0, #88	; 0x58
 8006446:	f000 f9cd 	bl	80067e4 <__retarget_lock_init_recursive>
 800644a:	bd10      	pop	{r4, pc}
 800644c:	080065c5 	.word	0x080065c5
 8006450:	080065ed 	.word	0x080065ed
 8006454:	08006625 	.word	0x08006625
 8006458:	08006651 	.word	0x08006651
 800645c:	20000ab8 	.word	0x20000ab8
 8006460:	20000b20 	.word	0x20000b20
 8006464:	20000b88 	.word	0x20000b88

08006468 <stdio_exit_handler>:
 8006468:	b510      	push	{r4, lr}
 800646a:	4a03      	ldr	r2, [pc, #12]	; (8006478 <stdio_exit_handler+0x10>)
 800646c:	4903      	ldr	r1, [pc, #12]	; (800647c <stdio_exit_handler+0x14>)
 800646e:	4804      	ldr	r0, [pc, #16]	; (8006480 <stdio_exit_handler+0x18>)
 8006470:	f000 f86c 	bl	800654c <_fwalk_sglue>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	2000044c 	.word	0x2000044c
 800647c:	080085a1 	.word	0x080085a1
 8006480:	200005c8 	.word	0x200005c8

08006484 <cleanup_stdio>:
 8006484:	6841      	ldr	r1, [r0, #4]
 8006486:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <cleanup_stdio+0x30>)
 8006488:	b510      	push	{r4, lr}
 800648a:	0004      	movs	r4, r0
 800648c:	4299      	cmp	r1, r3
 800648e:	d001      	beq.n	8006494 <cleanup_stdio+0x10>
 8006490:	f002 f886 	bl	80085a0 <_fclose_r>
 8006494:	68a1      	ldr	r1, [r4, #8]
 8006496:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <cleanup_stdio+0x34>)
 8006498:	4299      	cmp	r1, r3
 800649a:	d002      	beq.n	80064a2 <cleanup_stdio+0x1e>
 800649c:	0020      	movs	r0, r4
 800649e:	f002 f87f 	bl	80085a0 <_fclose_r>
 80064a2:	68e1      	ldr	r1, [r4, #12]
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <cleanup_stdio+0x38>)
 80064a6:	4299      	cmp	r1, r3
 80064a8:	d002      	beq.n	80064b0 <cleanup_stdio+0x2c>
 80064aa:	0020      	movs	r0, r4
 80064ac:	f002 f878 	bl	80085a0 <_fclose_r>
 80064b0:	bd10      	pop	{r4, pc}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	20000ab8 	.word	0x20000ab8
 80064b8:	20000b20 	.word	0x20000b20
 80064bc:	20000b88 	.word	0x20000b88

080064c0 <global_stdio_init.part.0>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <global_stdio_init.part.0+0x28>)
 80064c4:	4a09      	ldr	r2, [pc, #36]	; (80064ec <global_stdio_init.part.0+0x2c>)
 80064c6:	2104      	movs	r1, #4
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	4809      	ldr	r0, [pc, #36]	; (80064f0 <global_stdio_init.part.0+0x30>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	f7ff ff95 	bl	80063fc <std>
 80064d2:	2201      	movs	r2, #1
 80064d4:	2109      	movs	r1, #9
 80064d6:	4807      	ldr	r0, [pc, #28]	; (80064f4 <global_stdio_init.part.0+0x34>)
 80064d8:	f7ff ff90 	bl	80063fc <std>
 80064dc:	2202      	movs	r2, #2
 80064de:	2112      	movs	r1, #18
 80064e0:	4805      	ldr	r0, [pc, #20]	; (80064f8 <global_stdio_init.part.0+0x38>)
 80064e2:	f7ff ff8b 	bl	80063fc <std>
 80064e6:	bd10      	pop	{r4, pc}
 80064e8:	20000bf0 	.word	0x20000bf0
 80064ec:	08006469 	.word	0x08006469
 80064f0:	20000ab8 	.word	0x20000ab8
 80064f4:	20000b20 	.word	0x20000b20
 80064f8:	20000b88 	.word	0x20000b88

080064fc <__sfp_lock_acquire>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4802      	ldr	r0, [pc, #8]	; (8006508 <__sfp_lock_acquire+0xc>)
 8006500:	f000 f972 	bl	80067e8 <__retarget_lock_acquire_recursive>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	20000bfa 	.word	0x20000bfa

0800650c <__sfp_lock_release>:
 800650c:	b510      	push	{r4, lr}
 800650e:	4802      	ldr	r0, [pc, #8]	; (8006518 <__sfp_lock_release+0xc>)
 8006510:	f000 f96b 	bl	80067ea <__retarget_lock_release_recursive>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	20000bfa 	.word	0x20000bfa

0800651c <__sinit>:
 800651c:	b510      	push	{r4, lr}
 800651e:	0004      	movs	r4, r0
 8006520:	f7ff ffec 	bl	80064fc <__sfp_lock_acquire>
 8006524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <__sinit+0x14>
 800652a:	f7ff ffef 	bl	800650c <__sfp_lock_release>
 800652e:	bd10      	pop	{r4, pc}
 8006530:	4b04      	ldr	r3, [pc, #16]	; (8006544 <__sinit+0x28>)
 8006532:	6363      	str	r3, [r4, #52]	; 0x34
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <__sinit+0x2c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f6      	bne.n	800652a <__sinit+0xe>
 800653c:	f7ff ffc0 	bl	80064c0 <global_stdio_init.part.0>
 8006540:	e7f3      	b.n	800652a <__sinit+0xe>
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	08006485 	.word	0x08006485
 8006548:	20000bf0 	.word	0x20000bf0

0800654c <_fwalk_sglue>:
 800654c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800654e:	0014      	movs	r4, r2
 8006550:	2600      	movs	r6, #0
 8006552:	9000      	str	r0, [sp, #0]
 8006554:	9101      	str	r1, [sp, #4]
 8006556:	68a5      	ldr	r5, [r4, #8]
 8006558:	6867      	ldr	r7, [r4, #4]
 800655a:	3f01      	subs	r7, #1
 800655c:	d504      	bpl.n	8006568 <_fwalk_sglue+0x1c>
 800655e:	6824      	ldr	r4, [r4, #0]
 8006560:	2c00      	cmp	r4, #0
 8006562:	d1f8      	bne.n	8006556 <_fwalk_sglue+0xa>
 8006564:	0030      	movs	r0, r6
 8006566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006568:	89ab      	ldrh	r3, [r5, #12]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d908      	bls.n	8006580 <_fwalk_sglue+0x34>
 800656e:	220e      	movs	r2, #14
 8006570:	5eab      	ldrsh	r3, [r5, r2]
 8006572:	3301      	adds	r3, #1
 8006574:	d004      	beq.n	8006580 <_fwalk_sglue+0x34>
 8006576:	0029      	movs	r1, r5
 8006578:	9800      	ldr	r0, [sp, #0]
 800657a:	9b01      	ldr	r3, [sp, #4]
 800657c:	4798      	blx	r3
 800657e:	4306      	orrs	r6, r0
 8006580:	3568      	adds	r5, #104	; 0x68
 8006582:	e7ea      	b.n	800655a <_fwalk_sglue+0xe>

08006584 <sprintf>:
 8006584:	b40e      	push	{r1, r2, r3}
 8006586:	b500      	push	{lr}
 8006588:	490b      	ldr	r1, [pc, #44]	; (80065b8 <sprintf+0x34>)
 800658a:	b09c      	sub	sp, #112	; 0x70
 800658c:	ab1d      	add	r3, sp, #116	; 0x74
 800658e:	9002      	str	r0, [sp, #8]
 8006590:	9006      	str	r0, [sp, #24]
 8006592:	9107      	str	r1, [sp, #28]
 8006594:	9104      	str	r1, [sp, #16]
 8006596:	4809      	ldr	r0, [pc, #36]	; (80065bc <sprintf+0x38>)
 8006598:	4909      	ldr	r1, [pc, #36]	; (80065c0 <sprintf+0x3c>)
 800659a:	cb04      	ldmia	r3!, {r2}
 800659c:	9105      	str	r1, [sp, #20]
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	a902      	add	r1, sp, #8
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	f000 fdba 	bl	800711c <_svfprintf_r>
 80065a8:	2200      	movs	r2, #0
 80065aa:	9b02      	ldr	r3, [sp, #8]
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	b01c      	add	sp, #112	; 0x70
 80065b0:	bc08      	pop	{r3}
 80065b2:	b003      	add	sp, #12
 80065b4:	4718      	bx	r3
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	7fffffff 	.word	0x7fffffff
 80065bc:	200006e8 	.word	0x200006e8
 80065c0:	ffff0208 	.word	0xffff0208

080065c4 <__sread>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	000c      	movs	r4, r1
 80065c8:	250e      	movs	r5, #14
 80065ca:	5f49      	ldrsh	r1, [r1, r5]
 80065cc:	f000 f8a6 	bl	800671c <_read_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	db03      	blt.n	80065dc <__sread+0x18>
 80065d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065d6:	181b      	adds	r3, r3, r0
 80065d8:	6523      	str	r3, [r4, #80]	; 0x50
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	4a02      	ldr	r2, [pc, #8]	; (80065e8 <__sread+0x24>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	e7f9      	b.n	80065da <__sread+0x16>
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	ffffefff 	.word	0xffffefff

080065ec <__swrite>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	001f      	movs	r7, r3
 80065f0:	898b      	ldrh	r3, [r1, #12]
 80065f2:	0005      	movs	r5, r0
 80065f4:	000c      	movs	r4, r1
 80065f6:	0016      	movs	r6, r2
 80065f8:	05db      	lsls	r3, r3, #23
 80065fa:	d505      	bpl.n	8006608 <__swrite+0x1c>
 80065fc:	230e      	movs	r3, #14
 80065fe:	5ec9      	ldrsh	r1, [r1, r3]
 8006600:	2200      	movs	r2, #0
 8006602:	2302      	movs	r3, #2
 8006604:	f000 f876 	bl	80066f4 <_lseek_r>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <__swrite+0x34>)
 800660c:	0028      	movs	r0, r5
 800660e:	4013      	ands	r3, r2
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	0032      	movs	r2, r6
 8006614:	230e      	movs	r3, #14
 8006616:	5ee1      	ldrsh	r1, [r4, r3]
 8006618:	003b      	movs	r3, r7
 800661a:	f000 f8a5 	bl	8006768 <_write_r>
 800661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006620:	ffffefff 	.word	0xffffefff

08006624 <__sseek>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	000c      	movs	r4, r1
 8006628:	250e      	movs	r5, #14
 800662a:	5f49      	ldrsh	r1, [r1, r5]
 800662c:	f000 f862 	bl	80066f4 <_lseek_r>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	1c42      	adds	r2, r0, #1
 8006634:	d103      	bne.n	800663e <__sseek+0x1a>
 8006636:	4a05      	ldr	r2, [pc, #20]	; (800664c <__sseek+0x28>)
 8006638:	4013      	ands	r3, r2
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	bd70      	pop	{r4, r5, r6, pc}
 800663e:	2280      	movs	r2, #128	; 0x80
 8006640:	0152      	lsls	r2, r2, #5
 8006642:	4313      	orrs	r3, r2
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6520      	str	r0, [r4, #80]	; 0x50
 8006648:	e7f8      	b.n	800663c <__sseek+0x18>
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	ffffefff 	.word	0xffffefff

08006650 <__sclose>:
 8006650:	b510      	push	{r4, lr}
 8006652:	230e      	movs	r3, #14
 8006654:	5ec9      	ldrsh	r1, [r1, r3]
 8006656:	f000 f83b 	bl	80066d0 <_close_r>
 800665a:	bd10      	pop	{r4, pc}

0800665c <memset>:
 800665c:	0003      	movs	r3, r0
 800665e:	1882      	adds	r2, r0, r2
 8006660:	4293      	cmp	r3, r2
 8006662:	d100      	bne.n	8006666 <memset+0xa>
 8006664:	4770      	bx	lr
 8006666:	7019      	strb	r1, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	e7f9      	b.n	8006660 <memset+0x4>

0800666c <strncpy>:
 800666c:	0003      	movs	r3, r0
 800666e:	b530      	push	{r4, r5, lr}
 8006670:	001d      	movs	r5, r3
 8006672:	2a00      	cmp	r2, #0
 8006674:	d006      	beq.n	8006684 <strncpy+0x18>
 8006676:	780c      	ldrb	r4, [r1, #0]
 8006678:	3a01      	subs	r2, #1
 800667a:	3301      	adds	r3, #1
 800667c:	702c      	strb	r4, [r5, #0]
 800667e:	3101      	adds	r1, #1
 8006680:	2c00      	cmp	r4, #0
 8006682:	d1f5      	bne.n	8006670 <strncpy+0x4>
 8006684:	2100      	movs	r1, #0
 8006686:	189a      	adds	r2, r3, r2
 8006688:	4293      	cmp	r3, r2
 800668a:	d100      	bne.n	800668e <strncpy+0x22>
 800668c:	bd30      	pop	{r4, r5, pc}
 800668e:	7019      	strb	r1, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	e7f9      	b.n	8006688 <strncpy+0x1c>

08006694 <strstr>:
 8006694:	780a      	ldrb	r2, [r1, #0]
 8006696:	b530      	push	{r4, r5, lr}
 8006698:	2a00      	cmp	r2, #0
 800669a:	d10c      	bne.n	80066b6 <strstr+0x22>
 800669c:	bd30      	pop	{r4, r5, pc}
 800669e:	429a      	cmp	r2, r3
 80066a0:	d108      	bne.n	80066b4 <strstr+0x20>
 80066a2:	2301      	movs	r3, #1
 80066a4:	5ccc      	ldrb	r4, [r1, r3]
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	d0f8      	beq.n	800669c <strstr+0x8>
 80066aa:	5cc5      	ldrb	r5, [r0, r3]
 80066ac:	42a5      	cmp	r5, r4
 80066ae:	d101      	bne.n	80066b4 <strstr+0x20>
 80066b0:	3301      	adds	r3, #1
 80066b2:	e7f7      	b.n	80066a4 <strstr+0x10>
 80066b4:	3001      	adds	r0, #1
 80066b6:	7803      	ldrb	r3, [r0, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f0      	bne.n	800669e <strstr+0xa>
 80066bc:	0018      	movs	r0, r3
 80066be:	e7ed      	b.n	800669c <strstr+0x8>

080066c0 <__locale_mb_cur_max>:
 80066c0:	2294      	movs	r2, #148	; 0x94
 80066c2:	4b02      	ldr	r3, [pc, #8]	; (80066cc <__locale_mb_cur_max+0xc>)
 80066c4:	0052      	lsls	r2, r2, #1
 80066c6:	5c98      	ldrb	r0, [r3, r2]
 80066c8:	4770      	bx	lr
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	20000458 	.word	0x20000458

080066d0 <_close_r>:
 80066d0:	2300      	movs	r3, #0
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	4d06      	ldr	r5, [pc, #24]	; (80066f0 <_close_r+0x20>)
 80066d6:	0004      	movs	r4, r0
 80066d8:	0008      	movs	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fc fb59 	bl	8002d92 <_close>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d103      	bne.n	80066ec <_close_r+0x1c>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d000      	beq.n	80066ec <_close_r+0x1c>
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	20000bf4 	.word	0x20000bf4

080066f4 <_lseek_r>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	0004      	movs	r4, r0
 80066f8:	0008      	movs	r0, r1
 80066fa:	0011      	movs	r1, r2
 80066fc:	001a      	movs	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	4d05      	ldr	r5, [pc, #20]	; (8006718 <_lseek_r+0x24>)
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fc fb66 	bl	8002dd4 <_lseek>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d103      	bne.n	8006714 <_lseek_r+0x20>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d000      	beq.n	8006714 <_lseek_r+0x20>
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	20000bf4 	.word	0x20000bf4

0800671c <_read_r>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	0004      	movs	r4, r0
 8006720:	0008      	movs	r0, r1
 8006722:	0011      	movs	r1, r2
 8006724:	001a      	movs	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	4d05      	ldr	r5, [pc, #20]	; (8006740 <_read_r+0x24>)
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7fc faf8 	bl	8002d20 <_read>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d103      	bne.n	800673c <_read_r+0x20>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d000      	beq.n	800673c <_read_r+0x20>
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	20000bf4 	.word	0x20000bf4

08006744 <_sbrk_r>:
 8006744:	2300      	movs	r3, #0
 8006746:	b570      	push	{r4, r5, r6, lr}
 8006748:	4d06      	ldr	r5, [pc, #24]	; (8006764 <_sbrk_r+0x20>)
 800674a:	0004      	movs	r4, r0
 800674c:	0008      	movs	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fc fb4c 	bl	8002dec <_sbrk>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d103      	bne.n	8006760 <_sbrk_r+0x1c>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d000      	beq.n	8006760 <_sbrk_r+0x1c>
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000bf4 	.word	0x20000bf4

08006768 <_write_r>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	0004      	movs	r4, r0
 800676c:	0008      	movs	r0, r1
 800676e:	0011      	movs	r1, r2
 8006770:	001a      	movs	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	4d05      	ldr	r5, [pc, #20]	; (800678c <_write_r+0x24>)
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	f7fc faef 	bl	8002d5a <_write>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d103      	bne.n	8006788 <_write_r+0x20>
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d000      	beq.n	8006788 <_write_r+0x20>
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	20000bf4 	.word	0x20000bf4

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	200006e8 	.word	0x200006e8

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	2600      	movs	r6, #0
 80067a0:	4c0c      	ldr	r4, [pc, #48]	; (80067d4 <__libc_init_array+0x38>)
 80067a2:	4d0d      	ldr	r5, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a4:	1b64      	subs	r4, r4, r5
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	2600      	movs	r6, #0
 80067ae:	f004 faa3 	bl	800acf8 <_init>
 80067b2:	4c0a      	ldr	r4, [pc, #40]	; (80067dc <__libc_init_array+0x40>)
 80067b4:	4d0a      	ldr	r5, [pc, #40]	; (80067e0 <__libc_init_array+0x44>)
 80067b6:	1b64      	subs	r4, r4, r5
 80067b8:	10a4      	asrs	r4, r4, #2
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	00b3      	lsls	r3, r6, #2
 80067c2:	58eb      	ldr	r3, [r5, r3]
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	00b3      	lsls	r3, r6, #2
 80067cc:	58eb      	ldr	r3, [r5, r3]
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	0800b34c 	.word	0x0800b34c
 80067d8:	0800b34c 	.word	0x0800b34c
 80067dc:	0800b354 	.word	0x0800b354
 80067e0:	0800b34c 	.word	0x0800b34c

080067e4 <__retarget_lock_init_recursive>:
 80067e4:	4770      	bx	lr

080067e6 <__retarget_lock_close_recursive>:
 80067e6:	4770      	bx	lr

080067e8 <__retarget_lock_acquire_recursive>:
 80067e8:	4770      	bx	lr

080067ea <__retarget_lock_release_recursive>:
 80067ea:	4770      	bx	lr

080067ec <sysconf>:
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	b510      	push	{r4, lr}
 80067f0:	2808      	cmp	r0, #8
 80067f2:	d004      	beq.n	80067fe <sysconf+0x12>
 80067f4:	f7ff ffcc 	bl	8006790 <__errno>
 80067f8:	2316      	movs	r3, #22
 80067fa:	6003      	str	r3, [r0, #0]
 80067fc:	3b17      	subs	r3, #23
 80067fe:	0018      	movs	r0, r3
 8006800:	bd10      	pop	{r4, pc}

08006802 <memcpy>:
 8006802:	2300      	movs	r3, #0
 8006804:	b510      	push	{r4, lr}
 8006806:	429a      	cmp	r2, r3
 8006808:	d100      	bne.n	800680c <memcpy+0xa>
 800680a:	bd10      	pop	{r4, pc}
 800680c:	5ccc      	ldrb	r4, [r1, r3]
 800680e:	54c4      	strb	r4, [r0, r3]
 8006810:	3301      	adds	r3, #1
 8006812:	e7f8      	b.n	8006806 <memcpy+0x4>

08006814 <register_fini>:
 8006814:	4b03      	ldr	r3, [pc, #12]	; (8006824 <register_fini+0x10>)
 8006816:	b510      	push	{r4, lr}
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <register_fini+0xe>
 800681c:	4802      	ldr	r0, [pc, #8]	; (8006828 <register_fini+0x14>)
 800681e:	f000 f805 	bl	800682c <atexit>
 8006822:	bd10      	pop	{r4, pc}
 8006824:	00000000 	.word	0x00000000
 8006828:	080087e1 	.word	0x080087e1

0800682c <atexit>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	0001      	movs	r1, r0
 8006832:	001a      	movs	r2, r3
 8006834:	0018      	movs	r0, r3
 8006836:	f002 f825 	bl	8008884 <__register_exitproc>
 800683a:	bd10      	pop	{r4, pc}

0800683c <_malloc_trim_r>:
 800683c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800683e:	0004      	movs	r4, r0
 8006840:	2008      	movs	r0, #8
 8006842:	000d      	movs	r5, r1
 8006844:	f7ff ffd2 	bl	80067ec <sysconf>
 8006848:	0006      	movs	r6, r0
 800684a:	0020      	movs	r0, r4
 800684c:	f7ff fd34 	bl	80062b8 <__malloc_lock>
 8006850:	2203      	movs	r2, #3
 8006852:	4f21      	ldr	r7, [pc, #132]	; (80068d8 <_malloc_trim_r+0x9c>)
 8006854:	0031      	movs	r1, r6
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	4393      	bics	r3, r2
 800685c:	1b58      	subs	r0, r3, r5
 800685e:	3811      	subs	r0, #17
 8006860:	1980      	adds	r0, r0, r6
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	f7f9 fc6a 	bl	800013c <__udivsi3>
 8006868:	1e45      	subs	r5, r0, #1
 800686a:	4375      	muls	r5, r6
 800686c:	42ae      	cmp	r6, r5
 800686e:	dd04      	ble.n	800687a <_malloc_trim_r+0x3e>
 8006870:	0020      	movs	r0, r4
 8006872:	f7ff fd29 	bl	80062c8 <__malloc_unlock>
 8006876:	2000      	movs	r0, #0
 8006878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800687a:	2100      	movs	r1, #0
 800687c:	0020      	movs	r0, r4
 800687e:	f7ff ff61 	bl	8006744 <_sbrk_r>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	9a01      	ldr	r2, [sp, #4]
 8006886:	189b      	adds	r3, r3, r2
 8006888:	4298      	cmp	r0, r3
 800688a:	d1f1      	bne.n	8006870 <_malloc_trim_r+0x34>
 800688c:	0020      	movs	r0, r4
 800688e:	4269      	negs	r1, r5
 8006890:	f7ff ff58 	bl	8006744 <_sbrk_r>
 8006894:	3001      	adds	r0, #1
 8006896:	d110      	bne.n	80068ba <_malloc_trim_r+0x7e>
 8006898:	2100      	movs	r1, #0
 800689a:	0020      	movs	r0, r4
 800689c:	f7ff ff52 	bl	8006744 <_sbrk_r>
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	1a81      	subs	r1, r0, r2
 80068a4:	290f      	cmp	r1, #15
 80068a6:	dde3      	ble.n	8006870 <_malloc_trim_r+0x34>
 80068a8:	4d0c      	ldr	r5, [pc, #48]	; (80068dc <_malloc_trim_r+0xa0>)
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <_malloc_trim_r+0xa4>)
 80068ac:	682d      	ldr	r5, [r5, #0]
 80068ae:	1b40      	subs	r0, r0, r5
 80068b0:	6018      	str	r0, [r3, #0]
 80068b2:	2301      	movs	r3, #1
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6053      	str	r3, [r2, #4]
 80068b8:	e7da      	b.n	8006870 <_malloc_trim_r+0x34>
 80068ba:	2601      	movs	r6, #1
 80068bc:	9b01      	ldr	r3, [sp, #4]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	1b5b      	subs	r3, r3, r5
 80068c2:	4333      	orrs	r3, r6
 80068c4:	6053      	str	r3, [r2, #4]
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <_malloc_trim_r+0xa4>)
 80068c8:	0020      	movs	r0, r4
 80068ca:	6813      	ldr	r3, [r2, #0]
 80068cc:	1b5b      	subs	r3, r3, r5
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	f7ff fcfa 	bl	80062c8 <__malloc_unlock>
 80068d4:	0030      	movs	r0, r6
 80068d6:	e7cf      	b.n	8006878 <_malloc_trim_r+0x3c>
 80068d8:	2000003c 	.word	0x2000003c
 80068dc:	20000444 	.word	0x20000444
 80068e0:	20000a84 	.word	0x20000a84

080068e4 <_free_r>:
 80068e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068e6:	1e0d      	subs	r5, r1, #0
 80068e8:	9001      	str	r0, [sp, #4]
 80068ea:	d02d      	beq.n	8006948 <_free_r+0x64>
 80068ec:	f7ff fce4 	bl	80062b8 <__malloc_lock>
 80068f0:	2301      	movs	r3, #1
 80068f2:	0029      	movs	r1, r5
 80068f4:	469c      	mov	ip, r3
 80068f6:	3908      	subs	r1, #8
 80068f8:	684f      	ldr	r7, [r1, #4]
 80068fa:	4662      	mov	r2, ip
 80068fc:	003b      	movs	r3, r7
 80068fe:	4664      	mov	r4, ip
 8006900:	4393      	bics	r3, r2
 8006902:	18c8      	adds	r0, r1, r3
 8006904:	6845      	ldr	r5, [r0, #4]
 8006906:	3202      	adds	r2, #2
 8006908:	4395      	bics	r5, r2
 800690a:	4a4a      	ldr	r2, [pc, #296]	; (8006a34 <_free_r+0x150>)
 800690c:	4027      	ands	r7, r4
 800690e:	6896      	ldr	r6, [r2, #8]
 8006910:	4286      	cmp	r6, r0
 8006912:	d11a      	bne.n	800694a <_free_r+0x66>
 8006914:	195b      	adds	r3, r3, r5
 8006916:	2f00      	cmp	r7, #0
 8006918:	d106      	bne.n	8006928 <_free_r+0x44>
 800691a:	6808      	ldr	r0, [r1, #0]
 800691c:	1a09      	subs	r1, r1, r0
 800691e:	688d      	ldr	r5, [r1, #8]
 8006920:	181b      	adds	r3, r3, r0
 8006922:	68c8      	ldr	r0, [r1, #12]
 8006924:	60e8      	str	r0, [r5, #12]
 8006926:	6085      	str	r5, [r0, #8]
 8006928:	2001      	movs	r0, #1
 800692a:	4318      	orrs	r0, r3
 800692c:	6048      	str	r0, [r1, #4]
 800692e:	6091      	str	r1, [r2, #8]
 8006930:	4a41      	ldr	r2, [pc, #260]	; (8006a38 <_free_r+0x154>)
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d804      	bhi.n	8006942 <_free_r+0x5e>
 8006938:	4b40      	ldr	r3, [pc, #256]	; (8006a3c <_free_r+0x158>)
 800693a:	9801      	ldr	r0, [sp, #4]
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	f7ff ff7d 	bl	800683c <_malloc_trim_r>
 8006942:	9801      	ldr	r0, [sp, #4]
 8006944:	f7ff fcc0 	bl	80062c8 <__malloc_unlock>
 8006948:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800694a:	2600      	movs	r6, #0
 800694c:	6045      	str	r5, [r0, #4]
 800694e:	42b7      	cmp	r7, r6
 8006950:	d109      	bne.n	8006966 <_free_r+0x82>
 8006952:	680f      	ldr	r7, [r1, #0]
 8006954:	4c3a      	ldr	r4, [pc, #232]	; (8006a40 <_free_r+0x15c>)
 8006956:	1bc9      	subs	r1, r1, r7
 8006958:	19db      	adds	r3, r3, r7
 800695a:	688f      	ldr	r7, [r1, #8]
 800695c:	42a7      	cmp	r7, r4
 800695e:	d02c      	beq.n	80069ba <_free_r+0xd6>
 8006960:	68cc      	ldr	r4, [r1, #12]
 8006962:	60fc      	str	r4, [r7, #12]
 8006964:	60a7      	str	r7, [r4, #8]
 8006966:	1947      	adds	r7, r0, r5
 8006968:	687c      	ldr	r4, [r7, #4]
 800696a:	2701      	movs	r7, #1
 800696c:	423c      	tst	r4, r7
 800696e:	d10b      	bne.n	8006988 <_free_r+0xa4>
 8006970:	195b      	adds	r3, r3, r5
 8006972:	6885      	ldr	r5, [r0, #8]
 8006974:	2e00      	cmp	r6, #0
 8006976:	d122      	bne.n	80069be <_free_r+0xda>
 8006978:	4c31      	ldr	r4, [pc, #196]	; (8006a40 <_free_r+0x15c>)
 800697a:	42a5      	cmp	r5, r4
 800697c:	d11f      	bne.n	80069be <_free_r+0xda>
 800697e:	003e      	movs	r6, r7
 8006980:	6151      	str	r1, [r2, #20]
 8006982:	6111      	str	r1, [r2, #16]
 8006984:	60cd      	str	r5, [r1, #12]
 8006986:	608d      	str	r5, [r1, #8]
 8006988:	2501      	movs	r5, #1
 800698a:	0028      	movs	r0, r5
 800698c:	4318      	orrs	r0, r3
 800698e:	6048      	str	r0, [r1, #4]
 8006990:	50cb      	str	r3, [r1, r3]
 8006992:	2e00      	cmp	r6, #0
 8006994:	d1d5      	bne.n	8006942 <_free_r+0x5e>
 8006996:	2080      	movs	r0, #128	; 0x80
 8006998:	0080      	lsls	r0, r0, #2
 800699a:	4283      	cmp	r3, r0
 800699c:	d213      	bcs.n	80069c6 <_free_r+0xe2>
 800699e:	08d8      	lsrs	r0, r3, #3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	409d      	lsls	r5, r3
 80069a4:	6853      	ldr	r3, [r2, #4]
 80069a6:	431d      	orrs	r5, r3
 80069a8:	00c3      	lsls	r3, r0, #3
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	6055      	str	r5, [r2, #4]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	60cb      	str	r3, [r1, #12]
 80069b2:	608a      	str	r2, [r1, #8]
 80069b4:	6099      	str	r1, [r3, #8]
 80069b6:	60d1      	str	r1, [r2, #12]
 80069b8:	e7c3      	b.n	8006942 <_free_r+0x5e>
 80069ba:	4666      	mov	r6, ip
 80069bc:	e7d3      	b.n	8006966 <_free_r+0x82>
 80069be:	68c0      	ldr	r0, [r0, #12]
 80069c0:	60e8      	str	r0, [r5, #12]
 80069c2:	6085      	str	r5, [r0, #8]
 80069c4:	e7e0      	b.n	8006988 <_free_r+0xa4>
 80069c6:	0a5d      	lsrs	r5, r3, #9
 80069c8:	2d04      	cmp	r5, #4
 80069ca:	d812      	bhi.n	80069f2 <_free_r+0x10e>
 80069cc:	0998      	lsrs	r0, r3, #6
 80069ce:	3038      	adds	r0, #56	; 0x38
 80069d0:	00c6      	lsls	r6, r0, #3
 80069d2:	18b6      	adds	r6, r6, r2
 80069d4:	68b5      	ldr	r5, [r6, #8]
 80069d6:	2703      	movs	r7, #3
 80069d8:	42ae      	cmp	r6, r5
 80069da:	d125      	bne.n	8006a28 <_free_r+0x144>
 80069dc:	2301      	movs	r3, #1
 80069de:	1080      	asrs	r0, r0, #2
 80069e0:	4083      	lsls	r3, r0
 80069e2:	6850      	ldr	r0, [r2, #4]
 80069e4:	4303      	orrs	r3, r0
 80069e6:	6053      	str	r3, [r2, #4]
 80069e8:	60ce      	str	r6, [r1, #12]
 80069ea:	608d      	str	r5, [r1, #8]
 80069ec:	60b1      	str	r1, [r6, #8]
 80069ee:	60e9      	str	r1, [r5, #12]
 80069f0:	e7a7      	b.n	8006942 <_free_r+0x5e>
 80069f2:	2d14      	cmp	r5, #20
 80069f4:	d802      	bhi.n	80069fc <_free_r+0x118>
 80069f6:	0028      	movs	r0, r5
 80069f8:	305b      	adds	r0, #91	; 0x5b
 80069fa:	e7e9      	b.n	80069d0 <_free_r+0xec>
 80069fc:	2d54      	cmp	r5, #84	; 0x54
 80069fe:	d802      	bhi.n	8006a06 <_free_r+0x122>
 8006a00:	0b18      	lsrs	r0, r3, #12
 8006a02:	306e      	adds	r0, #110	; 0x6e
 8006a04:	e7e4      	b.n	80069d0 <_free_r+0xec>
 8006a06:	20aa      	movs	r0, #170	; 0xaa
 8006a08:	0040      	lsls	r0, r0, #1
 8006a0a:	4285      	cmp	r5, r0
 8006a0c:	d802      	bhi.n	8006a14 <_free_r+0x130>
 8006a0e:	0bd8      	lsrs	r0, r3, #15
 8006a10:	3077      	adds	r0, #119	; 0x77
 8006a12:	e7dd      	b.n	80069d0 <_free_r+0xec>
 8006a14:	4e0b      	ldr	r6, [pc, #44]	; (8006a44 <_free_r+0x160>)
 8006a16:	207e      	movs	r0, #126	; 0x7e
 8006a18:	42b5      	cmp	r5, r6
 8006a1a:	d8d9      	bhi.n	80069d0 <_free_r+0xec>
 8006a1c:	0c98      	lsrs	r0, r3, #18
 8006a1e:	307c      	adds	r0, #124	; 0x7c
 8006a20:	e7d6      	b.n	80069d0 <_free_r+0xec>
 8006a22:	68ad      	ldr	r5, [r5, #8]
 8006a24:	42ae      	cmp	r6, r5
 8006a26:	d003      	beq.n	8006a30 <_free_r+0x14c>
 8006a28:	686a      	ldr	r2, [r5, #4]
 8006a2a:	43ba      	bics	r2, r7
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d8f8      	bhi.n	8006a22 <_free_r+0x13e>
 8006a30:	68ee      	ldr	r6, [r5, #12]
 8006a32:	e7d9      	b.n	80069e8 <_free_r+0x104>
 8006a34:	2000003c 	.word	0x2000003c
 8006a38:	20000448 	.word	0x20000448
 8006a3c:	20000ab4 	.word	0x20000ab4
 8006a40:	20000044 	.word	0x20000044
 8006a44:	00000554 	.word	0x00000554

08006a48 <__ascii_mbtowc>:
 8006a48:	b082      	sub	sp, #8
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	d100      	bne.n	8006a50 <__ascii_mbtowc+0x8>
 8006a4e:	a901      	add	r1, sp, #4
 8006a50:	1e10      	subs	r0, r2, #0
 8006a52:	d006      	beq.n	8006a62 <__ascii_mbtowc+0x1a>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <__ascii_mbtowc+0x1e>
 8006a58:	7813      	ldrb	r3, [r2, #0]
 8006a5a:	600b      	str	r3, [r1, #0]
 8006a5c:	7810      	ldrb	r0, [r2, #0]
 8006a5e:	1e43      	subs	r3, r0, #1
 8006a60:	4198      	sbcs	r0, r3
 8006a62:	b002      	add	sp, #8
 8006a64:	4770      	bx	lr
 8006a66:	2002      	movs	r0, #2
 8006a68:	4240      	negs	r0, r0
 8006a6a:	e7fa      	b.n	8006a62 <__ascii_mbtowc+0x1a>

08006a6c <_Balloc>:
 8006a6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a6e:	b570      	push	{r4, r5, r6, lr}
 8006a70:	0006      	movs	r6, r0
 8006a72:	000c      	movs	r4, r1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <_Balloc+0x32>
 8006a78:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006a7a:	00a2      	lsls	r2, r4, #2
 8006a7c:	189b      	adds	r3, r3, r2
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d115      	bne.n	8006ab0 <_Balloc+0x44>
 8006a84:	2101      	movs	r1, #1
 8006a86:	000d      	movs	r5, r1
 8006a88:	40a5      	lsls	r5, r4
 8006a8a:	1d6a      	adds	r2, r5, #5
 8006a8c:	0030      	movs	r0, r6
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	f001 ff56 	bl	8008940 <_calloc_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d009      	beq.n	8006aac <_Balloc+0x40>
 8006a98:	6044      	str	r4, [r0, #4]
 8006a9a:	6085      	str	r5, [r0, #8]
 8006a9c:	e00a      	b.n	8006ab4 <_Balloc+0x48>
 8006a9e:	2221      	movs	r2, #33	; 0x21
 8006aa0:	2104      	movs	r1, #4
 8006aa2:	f001 ff4d 	bl	8008940 <_calloc_r>
 8006aa6:	6470      	str	r0, [r6, #68]	; 0x44
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d1e5      	bne.n	8006a78 <_Balloc+0xc>
 8006aac:	2000      	movs	r0, #0
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	6802      	ldr	r2, [r0, #0]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	6103      	str	r3, [r0, #16]
 8006ab8:	60c3      	str	r3, [r0, #12]
 8006aba:	e7f8      	b.n	8006aae <_Balloc+0x42>

08006abc <_Bfree>:
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d006      	beq.n	8006ace <_Bfree+0x12>
 8006ac0:	684a      	ldr	r2, [r1, #4]
 8006ac2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006ac4:	0092      	lsls	r2, r2, #2
 8006ac6:	189b      	adds	r3, r3, r2
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	600a      	str	r2, [r1, #0]
 8006acc:	6019      	str	r1, [r3, #0]
 8006ace:	4770      	bx	lr

08006ad0 <__multadd>:
 8006ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ad2:	000e      	movs	r6, r1
 8006ad4:	9001      	str	r0, [sp, #4]
 8006ad6:	000c      	movs	r4, r1
 8006ad8:	001d      	movs	r5, r3
 8006ada:	2000      	movs	r0, #0
 8006adc:	690f      	ldr	r7, [r1, #16]
 8006ade:	3614      	adds	r6, #20
 8006ae0:	6833      	ldr	r3, [r6, #0]
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	b299      	uxth	r1, r3
 8006ae6:	4351      	muls	r1, r2
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	4353      	muls	r3, r2
 8006aec:	1949      	adds	r1, r1, r5
 8006aee:	0c0d      	lsrs	r5, r1, #16
 8006af0:	195b      	adds	r3, r3, r5
 8006af2:	0c1d      	lsrs	r5, r3, #16
 8006af4:	b289      	uxth	r1, r1
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	185b      	adds	r3, r3, r1
 8006afa:	c608      	stmia	r6!, {r3}
 8006afc:	4287      	cmp	r7, r0
 8006afe:	dcef      	bgt.n	8006ae0 <__multadd+0x10>
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	d022      	beq.n	8006b4a <__multadd+0x7a>
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	42bb      	cmp	r3, r7
 8006b08:	dc19      	bgt.n	8006b3e <__multadd+0x6e>
 8006b0a:	6861      	ldr	r1, [r4, #4]
 8006b0c:	9801      	ldr	r0, [sp, #4]
 8006b0e:	3101      	adds	r1, #1
 8006b10:	f7ff ffac 	bl	8006a6c <_Balloc>
 8006b14:	1e06      	subs	r6, r0, #0
 8006b16:	d105      	bne.n	8006b24 <__multadd+0x54>
 8006b18:	0032      	movs	r2, r6
 8006b1a:	21ba      	movs	r1, #186	; 0xba
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <__multadd+0x80>)
 8006b1e:	480d      	ldr	r0, [pc, #52]	; (8006b54 <__multadd+0x84>)
 8006b20:	f001 fef0 	bl	8008904 <__assert_func>
 8006b24:	0021      	movs	r1, r4
 8006b26:	6922      	ldr	r2, [r4, #16]
 8006b28:	310c      	adds	r1, #12
 8006b2a:	3202      	adds	r2, #2
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	300c      	adds	r0, #12
 8006b30:	f7ff fe67 	bl	8006802 <memcpy>
 8006b34:	0021      	movs	r1, r4
 8006b36:	9801      	ldr	r0, [sp, #4]
 8006b38:	f7ff ffc0 	bl	8006abc <_Bfree>
 8006b3c:	0034      	movs	r4, r6
 8006b3e:	1d3b      	adds	r3, r7, #4
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	18e3      	adds	r3, r4, r3
 8006b44:	605d      	str	r5, [r3, #4]
 8006b46:	1c7b      	adds	r3, r7, #1
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	0020      	movs	r0, r4
 8006b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	0800b0c3 	.word	0x0800b0c3
 8006b54:	0800b0d4 	.word	0x0800b0d4

08006b58 <__hi0bits>:
 8006b58:	0003      	movs	r3, r0
 8006b5a:	0c02      	lsrs	r2, r0, #16
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	4282      	cmp	r2, r0
 8006b60:	d101      	bne.n	8006b66 <__hi0bits+0xe>
 8006b62:	041b      	lsls	r3, r3, #16
 8006b64:	3010      	adds	r0, #16
 8006b66:	0e1a      	lsrs	r2, r3, #24
 8006b68:	d101      	bne.n	8006b6e <__hi0bits+0x16>
 8006b6a:	3008      	adds	r0, #8
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	0f1a      	lsrs	r2, r3, #28
 8006b70:	d101      	bne.n	8006b76 <__hi0bits+0x1e>
 8006b72:	3004      	adds	r0, #4
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	0f9a      	lsrs	r2, r3, #30
 8006b78:	d101      	bne.n	8006b7e <__hi0bits+0x26>
 8006b7a:	3002      	adds	r0, #2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db03      	blt.n	8006b8a <__hi0bits+0x32>
 8006b82:	3001      	adds	r0, #1
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	d400      	bmi.n	8006b8a <__hi0bits+0x32>
 8006b88:	2020      	movs	r0, #32
 8006b8a:	4770      	bx	lr

08006b8c <__lo0bits>:
 8006b8c:	6803      	ldr	r3, [r0, #0]
 8006b8e:	0001      	movs	r1, r0
 8006b90:	2207      	movs	r2, #7
 8006b92:	0018      	movs	r0, r3
 8006b94:	4010      	ands	r0, r2
 8006b96:	4213      	tst	r3, r2
 8006b98:	d00d      	beq.n	8006bb6 <__lo0bits+0x2a>
 8006b9a:	3a06      	subs	r2, #6
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	4213      	tst	r3, r2
 8006ba0:	d105      	bne.n	8006bae <__lo0bits+0x22>
 8006ba2:	3002      	adds	r0, #2
 8006ba4:	4203      	tst	r3, r0
 8006ba6:	d003      	beq.n	8006bb0 <__lo0bits+0x24>
 8006ba8:	40d3      	lsrs	r3, r2
 8006baa:	0010      	movs	r0, r2
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	4770      	bx	lr
 8006bb0:	089b      	lsrs	r3, r3, #2
 8006bb2:	600b      	str	r3, [r1, #0]
 8006bb4:	e7fb      	b.n	8006bae <__lo0bits+0x22>
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d101      	bne.n	8006bc0 <__lo0bits+0x34>
 8006bbc:	2010      	movs	r0, #16
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	d101      	bne.n	8006bca <__lo0bits+0x3e>
 8006bc6:	3008      	adds	r0, #8
 8006bc8:	0a1b      	lsrs	r3, r3, #8
 8006bca:	071a      	lsls	r2, r3, #28
 8006bcc:	d101      	bne.n	8006bd2 <__lo0bits+0x46>
 8006bce:	3004      	adds	r0, #4
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	079a      	lsls	r2, r3, #30
 8006bd4:	d101      	bne.n	8006bda <__lo0bits+0x4e>
 8006bd6:	3002      	adds	r0, #2
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	07da      	lsls	r2, r3, #31
 8006bdc:	d4e9      	bmi.n	8006bb2 <__lo0bits+0x26>
 8006bde:	3001      	adds	r0, #1
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	d1e6      	bne.n	8006bb2 <__lo0bits+0x26>
 8006be4:	2020      	movs	r0, #32
 8006be6:	e7e2      	b.n	8006bae <__lo0bits+0x22>

08006be8 <__i2b>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	000c      	movs	r4, r1
 8006bec:	2101      	movs	r1, #1
 8006bee:	f7ff ff3d 	bl	8006a6c <_Balloc>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d107      	bne.n	8006c06 <__i2b+0x1e>
 8006bf6:	2146      	movs	r1, #70	; 0x46
 8006bf8:	4c05      	ldr	r4, [pc, #20]	; (8006c10 <__i2b+0x28>)
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <__i2b+0x2c>)
 8006bfe:	0020      	movs	r0, r4
 8006c00:	31ff      	adds	r1, #255	; 0xff
 8006c02:	f001 fe7f 	bl	8008904 <__assert_func>
 8006c06:	2301      	movs	r3, #1
 8006c08:	6144      	str	r4, [r0, #20]
 8006c0a:	6103      	str	r3, [r0, #16]
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	0800b0d4 	.word	0x0800b0d4
 8006c14:	0800b0c3 	.word	0x0800b0c3

08006c18 <__multiply>:
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	0015      	movs	r5, r2
 8006c1c:	690a      	ldr	r2, [r1, #16]
 8006c1e:	692b      	ldr	r3, [r5, #16]
 8006c20:	000c      	movs	r4, r1
 8006c22:	b08b      	sub	sp, #44	; 0x2c
 8006c24:	429a      	cmp	r2, r3
 8006c26:	da01      	bge.n	8006c2c <__multiply+0x14>
 8006c28:	002c      	movs	r4, r5
 8006c2a:	000d      	movs	r5, r1
 8006c2c:	6927      	ldr	r7, [r4, #16]
 8006c2e:	692e      	ldr	r6, [r5, #16]
 8006c30:	6861      	ldr	r1, [r4, #4]
 8006c32:	19bb      	adds	r3, r7, r6
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	19ba      	adds	r2, r7, r6
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	da00      	bge.n	8006c40 <__multiply+0x28>
 8006c3e:	3101      	adds	r1, #1
 8006c40:	f7ff ff14 	bl	8006a6c <_Balloc>
 8006c44:	9002      	str	r0, [sp, #8]
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d106      	bne.n	8006c58 <__multiply+0x40>
 8006c4a:	21b1      	movs	r1, #177	; 0xb1
 8006c4c:	4b48      	ldr	r3, [pc, #288]	; (8006d70 <__multiply+0x158>)
 8006c4e:	4849      	ldr	r0, [pc, #292]	; (8006d74 <__multiply+0x15c>)
 8006c50:	9a02      	ldr	r2, [sp, #8]
 8006c52:	0049      	lsls	r1, r1, #1
 8006c54:	f001 fe56 	bl	8008904 <__assert_func>
 8006c58:	9b02      	ldr	r3, [sp, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	469c      	mov	ip, r3
 8006c60:	19bb      	adds	r3, r7, r6
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4463      	add	r3, ip
 8006c66:	9304      	str	r3, [sp, #16]
 8006c68:	4663      	mov	r3, ip
 8006c6a:	9904      	ldr	r1, [sp, #16]
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	d32a      	bcc.n	8006cc6 <__multiply+0xae>
 8006c70:	0023      	movs	r3, r4
 8006c72:	00bf      	lsls	r7, r7, #2
 8006c74:	3314      	adds	r3, #20
 8006c76:	3514      	adds	r5, #20
 8006c78:	9308      	str	r3, [sp, #32]
 8006c7a:	00b6      	lsls	r6, r6, #2
 8006c7c:	19db      	adds	r3, r3, r7
 8006c7e:	9305      	str	r3, [sp, #20]
 8006c80:	19ab      	adds	r3, r5, r6
 8006c82:	9309      	str	r3, [sp, #36]	; 0x24
 8006c84:	2304      	movs	r3, #4
 8006c86:	9306      	str	r3, [sp, #24]
 8006c88:	0023      	movs	r3, r4
 8006c8a:	9a05      	ldr	r2, [sp, #20]
 8006c8c:	3315      	adds	r3, #21
 8006c8e:	9501      	str	r5, [sp, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d305      	bcc.n	8006ca0 <__multiply+0x88>
 8006c94:	1b13      	subs	r3, r2, r4
 8006c96:	3b15      	subs	r3, #21
 8006c98:	089b      	lsrs	r3, r3, #2
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	9306      	str	r3, [sp, #24]
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d310      	bcc.n	8006cca <__multiply+0xb2>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dd05      	ble.n	8006cba <__multiply+0xa2>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d056      	beq.n	8006d68 <__multiply+0x150>
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	9a03      	ldr	r2, [sp, #12]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	611a      	str	r2, [r3, #16]
 8006cc2:	b00b      	add	sp, #44	; 0x2c
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	c304      	stmia	r3!, {r2}
 8006cc8:	e7cf      	b.n	8006c6a <__multiply+0x52>
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	b280      	uxth	r0, r0
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d01e      	beq.n	8006d12 <__multiply+0xfa>
 8006cd4:	4667      	mov	r7, ip
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	9e08      	ldr	r6, [sp, #32]
 8006cda:	ce02      	ldmia	r6!, {r1}
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	b28b      	uxth	r3, r1
 8006ce2:	4343      	muls	r3, r0
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	466b      	mov	r3, sp
 8006ce8:	8b9b      	ldrh	r3, [r3, #28]
 8006cea:	18d3      	adds	r3, r2, r3
 8006cec:	195b      	adds	r3, r3, r5
 8006cee:	0c0d      	lsrs	r5, r1, #16
 8006cf0:	4345      	muls	r5, r0
 8006cf2:	9a07      	ldr	r2, [sp, #28]
 8006cf4:	0c11      	lsrs	r1, r2, #16
 8006cf6:	1869      	adds	r1, r5, r1
 8006cf8:	0c1a      	lsrs	r2, r3, #16
 8006cfa:	188a      	adds	r2, r1, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	0c15      	lsrs	r5, r2, #16
 8006d00:	0412      	lsls	r2, r2, #16
 8006d02:	431a      	orrs	r2, r3
 8006d04:	9b05      	ldr	r3, [sp, #20]
 8006d06:	c704      	stmia	r7!, {r2}
 8006d08:	42b3      	cmp	r3, r6
 8006d0a:	d8e6      	bhi.n	8006cda <__multiply+0xc2>
 8006d0c:	4663      	mov	r3, ip
 8006d0e:	9a06      	ldr	r2, [sp, #24]
 8006d10:	509d      	str	r5, [r3, r2]
 8006d12:	9b01      	ldr	r3, [sp, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	0c00      	lsrs	r0, r0, #16
 8006d18:	d020      	beq.n	8006d5c <__multiply+0x144>
 8006d1a:	4663      	mov	r3, ip
 8006d1c:	0025      	movs	r5, r4
 8006d1e:	4661      	mov	r1, ip
 8006d20:	2700      	movs	r7, #0
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3514      	adds	r5, #20
 8006d26:	682a      	ldr	r2, [r5, #0]
 8006d28:	680e      	ldr	r6, [r1, #0]
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	4342      	muls	r2, r0
 8006d2e:	0c36      	lsrs	r6, r6, #16
 8006d30:	1992      	adds	r2, r2, r6
 8006d32:	19d2      	adds	r2, r2, r7
 8006d34:	0416      	lsls	r6, r2, #16
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	431e      	orrs	r6, r3
 8006d3a:	600e      	str	r6, [r1, #0]
 8006d3c:	cd40      	ldmia	r5!, {r6}
 8006d3e:	684b      	ldr	r3, [r1, #4]
 8006d40:	0c36      	lsrs	r6, r6, #16
 8006d42:	4346      	muls	r6, r0
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	0c12      	lsrs	r2, r2, #16
 8006d48:	18f3      	adds	r3, r6, r3
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	9a05      	ldr	r2, [sp, #20]
 8006d4e:	0c1f      	lsrs	r7, r3, #16
 8006d50:	3104      	adds	r1, #4
 8006d52:	42aa      	cmp	r2, r5
 8006d54:	d8e7      	bhi.n	8006d26 <__multiply+0x10e>
 8006d56:	4662      	mov	r2, ip
 8006d58:	9906      	ldr	r1, [sp, #24]
 8006d5a:	5053      	str	r3, [r2, r1]
 8006d5c:	9b01      	ldr	r3, [sp, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	2304      	movs	r3, #4
 8006d64:	449c      	add	ip, r3
 8006d66:	e79b      	b.n	8006ca0 <__multiply+0x88>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	9303      	str	r3, [sp, #12]
 8006d6e:	e79b      	b.n	8006ca8 <__multiply+0x90>
 8006d70:	0800b0c3 	.word	0x0800b0c3
 8006d74:	0800b0d4 	.word	0x0800b0d4

08006d78 <__pow5mult>:
 8006d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	0015      	movs	r5, r2
 8006d7e:	0007      	movs	r7, r0
 8006d80:	000e      	movs	r6, r1
 8006d82:	401a      	ands	r2, r3
 8006d84:	421d      	tst	r5, r3
 8006d86:	d008      	beq.n	8006d9a <__pow5mult+0x22>
 8006d88:	491a      	ldr	r1, [pc, #104]	; (8006df4 <__pow5mult+0x7c>)
 8006d8a:	3a01      	subs	r2, #1
 8006d8c:	0092      	lsls	r2, r2, #2
 8006d8e:	5852      	ldr	r2, [r2, r1]
 8006d90:	2300      	movs	r3, #0
 8006d92:	0031      	movs	r1, r6
 8006d94:	f7ff fe9c 	bl	8006ad0 <__multadd>
 8006d98:	0006      	movs	r6, r0
 8006d9a:	10ad      	asrs	r5, r5, #2
 8006d9c:	d027      	beq.n	8006dee <__pow5mult+0x76>
 8006d9e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d107      	bne.n	8006db4 <__pow5mult+0x3c>
 8006da4:	0038      	movs	r0, r7
 8006da6:	4914      	ldr	r1, [pc, #80]	; (8006df8 <__pow5mult+0x80>)
 8006da8:	f7ff ff1e 	bl	8006be8 <__i2b>
 8006dac:	2300      	movs	r3, #0
 8006dae:	0004      	movs	r4, r0
 8006db0:	6438      	str	r0, [r7, #64]	; 0x40
 8006db2:	6003      	str	r3, [r0, #0]
 8006db4:	2301      	movs	r3, #1
 8006db6:	421d      	tst	r5, r3
 8006db8:	d00a      	beq.n	8006dd0 <__pow5mult+0x58>
 8006dba:	0031      	movs	r1, r6
 8006dbc:	0022      	movs	r2, r4
 8006dbe:	0038      	movs	r0, r7
 8006dc0:	f7ff ff2a 	bl	8006c18 <__multiply>
 8006dc4:	0031      	movs	r1, r6
 8006dc6:	9001      	str	r0, [sp, #4]
 8006dc8:	0038      	movs	r0, r7
 8006dca:	f7ff fe77 	bl	8006abc <_Bfree>
 8006dce:	9e01      	ldr	r6, [sp, #4]
 8006dd0:	106d      	asrs	r5, r5, #1
 8006dd2:	d00c      	beq.n	8006dee <__pow5mult+0x76>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d107      	bne.n	8006dea <__pow5mult+0x72>
 8006dda:	0022      	movs	r2, r4
 8006ddc:	0021      	movs	r1, r4
 8006dde:	0038      	movs	r0, r7
 8006de0:	f7ff ff1a 	bl	8006c18 <__multiply>
 8006de4:	2300      	movs	r3, #0
 8006de6:	6020      	str	r0, [r4, #0]
 8006de8:	6003      	str	r3, [r0, #0]
 8006dea:	0004      	movs	r4, r0
 8006dec:	e7e2      	b.n	8006db4 <__pow5mult+0x3c>
 8006dee:	0030      	movs	r0, r6
 8006df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	0800b220 	.word	0x0800b220
 8006df8:	00000271 	.word	0x00000271

08006dfc <__lshift>:
 8006dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfe:	000c      	movs	r4, r1
 8006e00:	0017      	movs	r7, r2
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	1155      	asrs	r5, r2, #5
 8006e06:	b087      	sub	sp, #28
 8006e08:	18eb      	adds	r3, r5, r3
 8006e0a:	9302      	str	r3, [sp, #8]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	6849      	ldr	r1, [r1, #4]
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	9004      	str	r0, [sp, #16]
 8006e16:	9a01      	ldr	r2, [sp, #4]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	db10      	blt.n	8006e3e <__lshift+0x42>
 8006e1c:	9804      	ldr	r0, [sp, #16]
 8006e1e:	f7ff fe25 	bl	8006a6c <_Balloc>
 8006e22:	2300      	movs	r3, #0
 8006e24:	0002      	movs	r2, r0
 8006e26:	0006      	movs	r6, r0
 8006e28:	0019      	movs	r1, r3
 8006e2a:	3214      	adds	r2, #20
 8006e2c:	4298      	cmp	r0, r3
 8006e2e:	d10c      	bne.n	8006e4a <__lshift+0x4e>
 8006e30:	31df      	adds	r1, #223	; 0xdf
 8006e32:	0032      	movs	r2, r6
 8006e34:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <__lshift+0xd4>)
 8006e36:	4827      	ldr	r0, [pc, #156]	; (8006ed4 <__lshift+0xd8>)
 8006e38:	31ff      	adds	r1, #255	; 0xff
 8006e3a:	f001 fd63 	bl	8008904 <__assert_func>
 8006e3e:	3101      	adds	r1, #1
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	e7e8      	b.n	8006e16 <__lshift+0x1a>
 8006e44:	0098      	lsls	r0, r3, #2
 8006e46:	5011      	str	r1, [r2, r0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	42ab      	cmp	r3, r5
 8006e4c:	dbfa      	blt.n	8006e44 <__lshift+0x48>
 8006e4e:	43eb      	mvns	r3, r5
 8006e50:	17db      	asrs	r3, r3, #31
 8006e52:	401d      	ands	r5, r3
 8006e54:	211f      	movs	r1, #31
 8006e56:	0023      	movs	r3, r4
 8006e58:	0038      	movs	r0, r7
 8006e5a:	00ad      	lsls	r5, r5, #2
 8006e5c:	1955      	adds	r5, r2, r5
 8006e5e:	6922      	ldr	r2, [r4, #16]
 8006e60:	3314      	adds	r3, #20
 8006e62:	0092      	lsls	r2, r2, #2
 8006e64:	4008      	ands	r0, r1
 8006e66:	4684      	mov	ip, r0
 8006e68:	189a      	adds	r2, r3, r2
 8006e6a:	420f      	tst	r7, r1
 8006e6c:	d02a      	beq.n	8006ec4 <__lshift+0xc8>
 8006e6e:	3101      	adds	r1, #1
 8006e70:	1a09      	subs	r1, r1, r0
 8006e72:	9105      	str	r1, [sp, #20]
 8006e74:	2100      	movs	r1, #0
 8006e76:	9503      	str	r5, [sp, #12]
 8006e78:	4667      	mov	r7, ip
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	40b8      	lsls	r0, r7
 8006e7e:	4308      	orrs	r0, r1
 8006e80:	9903      	ldr	r1, [sp, #12]
 8006e82:	c101      	stmia	r1!, {r0}
 8006e84:	9103      	str	r1, [sp, #12]
 8006e86:	9805      	ldr	r0, [sp, #20]
 8006e88:	cb02      	ldmia	r3!, {r1}
 8006e8a:	40c1      	lsrs	r1, r0
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d8f3      	bhi.n	8006e78 <__lshift+0x7c>
 8006e90:	0020      	movs	r0, r4
 8006e92:	3015      	adds	r0, #21
 8006e94:	2304      	movs	r3, #4
 8006e96:	4282      	cmp	r2, r0
 8006e98:	d304      	bcc.n	8006ea4 <__lshift+0xa8>
 8006e9a:	1b13      	subs	r3, r2, r4
 8006e9c:	3b15      	subs	r3, #21
 8006e9e:	089b      	lsrs	r3, r3, #2
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	50e9      	str	r1, [r5, r3]
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	d002      	beq.n	8006eb0 <__lshift+0xb4>
 8006eaa:	9b02      	ldr	r3, [sp, #8]
 8006eac:	3302      	adds	r3, #2
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	9b01      	ldr	r3, [sp, #4]
 8006eb2:	9804      	ldr	r0, [sp, #16]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	6133      	str	r3, [r6, #16]
 8006eba:	f7ff fdff 	bl	8006abc <_Bfree>
 8006ebe:	0030      	movs	r0, r6
 8006ec0:	b007      	add	sp, #28
 8006ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec4:	cb02      	ldmia	r3!, {r1}
 8006ec6:	c502      	stmia	r5!, {r1}
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d8fb      	bhi.n	8006ec4 <__lshift+0xc8>
 8006ecc:	e7f0      	b.n	8006eb0 <__lshift+0xb4>
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	0800b0c3 	.word	0x0800b0c3
 8006ed4:	0800b0d4 	.word	0x0800b0d4

08006ed8 <__mcmp>:
 8006ed8:	b530      	push	{r4, r5, lr}
 8006eda:	690b      	ldr	r3, [r1, #16]
 8006edc:	6904      	ldr	r4, [r0, #16]
 8006ede:	0002      	movs	r2, r0
 8006ee0:	1ae0      	subs	r0, r4, r3
 8006ee2:	429c      	cmp	r4, r3
 8006ee4:	d10e      	bne.n	8006f04 <__mcmp+0x2c>
 8006ee6:	3214      	adds	r2, #20
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	3114      	adds	r1, #20
 8006eec:	0014      	movs	r4, r2
 8006eee:	18c9      	adds	r1, r1, r3
 8006ef0:	18d2      	adds	r2, r2, r3
 8006ef2:	3a04      	subs	r2, #4
 8006ef4:	3904      	subs	r1, #4
 8006ef6:	6815      	ldr	r5, [r2, #0]
 8006ef8:	680b      	ldr	r3, [r1, #0]
 8006efa:	429d      	cmp	r5, r3
 8006efc:	d003      	beq.n	8006f06 <__mcmp+0x2e>
 8006efe:	2001      	movs	r0, #1
 8006f00:	429d      	cmp	r5, r3
 8006f02:	d303      	bcc.n	8006f0c <__mcmp+0x34>
 8006f04:	bd30      	pop	{r4, r5, pc}
 8006f06:	4294      	cmp	r4, r2
 8006f08:	d3f3      	bcc.n	8006ef2 <__mcmp+0x1a>
 8006f0a:	e7fb      	b.n	8006f04 <__mcmp+0x2c>
 8006f0c:	4240      	negs	r0, r0
 8006f0e:	e7f9      	b.n	8006f04 <__mcmp+0x2c>

08006f10 <__mdiff>:
 8006f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f12:	000e      	movs	r6, r1
 8006f14:	0007      	movs	r7, r0
 8006f16:	0011      	movs	r1, r2
 8006f18:	0030      	movs	r0, r6
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	0014      	movs	r4, r2
 8006f1e:	f7ff ffdb 	bl	8006ed8 <__mcmp>
 8006f22:	1e05      	subs	r5, r0, #0
 8006f24:	d110      	bne.n	8006f48 <__mdiff+0x38>
 8006f26:	0001      	movs	r1, r0
 8006f28:	0038      	movs	r0, r7
 8006f2a:	f7ff fd9f 	bl	8006a6c <_Balloc>
 8006f2e:	1e02      	subs	r2, r0, #0
 8006f30:	d104      	bne.n	8006f3c <__mdiff+0x2c>
 8006f32:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <__mdiff+0x120>)
 8006f34:	483f      	ldr	r0, [pc, #252]	; (8007034 <__mdiff+0x124>)
 8006f36:	4940      	ldr	r1, [pc, #256]	; (8007038 <__mdiff+0x128>)
 8006f38:	f001 fce4 	bl	8008904 <__assert_func>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6145      	str	r5, [r0, #20]
 8006f40:	6103      	str	r3, [r0, #16]
 8006f42:	0010      	movs	r0, r2
 8006f44:	b007      	add	sp, #28
 8006f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f48:	2301      	movs	r3, #1
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	db04      	blt.n	8006f5a <__mdiff+0x4a>
 8006f50:	0023      	movs	r3, r4
 8006f52:	0034      	movs	r4, r6
 8006f54:	001e      	movs	r6, r3
 8006f56:	2300      	movs	r3, #0
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	0038      	movs	r0, r7
 8006f5c:	6861      	ldr	r1, [r4, #4]
 8006f5e:	f7ff fd85 	bl	8006a6c <_Balloc>
 8006f62:	1e02      	subs	r2, r0, #0
 8006f64:	d103      	bne.n	8006f6e <__mdiff+0x5e>
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <__mdiff+0x120>)
 8006f68:	4832      	ldr	r0, [pc, #200]	; (8007034 <__mdiff+0x124>)
 8006f6a:	4934      	ldr	r1, [pc, #208]	; (800703c <__mdiff+0x12c>)
 8006f6c:	e7e4      	b.n	8006f38 <__mdiff+0x28>
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	2700      	movs	r7, #0
 8006f72:	60c3      	str	r3, [r0, #12]
 8006f74:	6920      	ldr	r0, [r4, #16]
 8006f76:	3414      	adds	r4, #20
 8006f78:	0083      	lsls	r3, r0, #2
 8006f7a:	18e3      	adds	r3, r4, r3
 8006f7c:	0021      	movs	r1, r4
 8006f7e:	9401      	str	r4, [sp, #4]
 8006f80:	0034      	movs	r4, r6
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	6933      	ldr	r3, [r6, #16]
 8006f86:	3414      	adds	r4, #20
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	18e3      	adds	r3, r4, r3
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	0013      	movs	r3, r2
 8006f90:	3314      	adds	r3, #20
 8006f92:	469c      	mov	ip, r3
 8006f94:	9305      	str	r3, [sp, #20]
 8006f96:	9104      	str	r1, [sp, #16]
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	cc02      	ldmia	r4!, {r1}
 8006f9c:	cb20      	ldmia	r3!, {r5}
 8006f9e:	9304      	str	r3, [sp, #16]
 8006fa0:	b2ab      	uxth	r3, r5
 8006fa2:	19df      	adds	r7, r3, r7
 8006fa4:	b28b      	uxth	r3, r1
 8006fa6:	1afb      	subs	r3, r7, r3
 8006fa8:	0c09      	lsrs	r1, r1, #16
 8006faa:	0c2d      	lsrs	r5, r5, #16
 8006fac:	1a6d      	subs	r5, r5, r1
 8006fae:	1419      	asrs	r1, r3, #16
 8006fb0:	1869      	adds	r1, r5, r1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	140f      	asrs	r7, r1, #16
 8006fb6:	0409      	lsls	r1, r1, #16
 8006fb8:	4319      	orrs	r1, r3
 8006fba:	4663      	mov	r3, ip
 8006fbc:	c302      	stmia	r3!, {r1}
 8006fbe:	469c      	mov	ip, r3
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	d8e8      	bhi.n	8006f98 <__mdiff+0x88>
 8006fc6:	0031      	movs	r1, r6
 8006fc8:	9c03      	ldr	r4, [sp, #12]
 8006fca:	3115      	adds	r1, #21
 8006fcc:	2304      	movs	r3, #4
 8006fce:	428c      	cmp	r4, r1
 8006fd0:	d304      	bcc.n	8006fdc <__mdiff+0xcc>
 8006fd2:	1ba3      	subs	r3, r4, r6
 8006fd4:	3b15      	subs	r3, #21
 8006fd6:	089b      	lsrs	r3, r3, #2
 8006fd8:	3301      	adds	r3, #1
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	9901      	ldr	r1, [sp, #4]
 8006fde:	18cd      	adds	r5, r1, r3
 8006fe0:	9905      	ldr	r1, [sp, #20]
 8006fe2:	002e      	movs	r6, r5
 8006fe4:	18cb      	adds	r3, r1, r3
 8006fe6:	469c      	mov	ip, r3
 8006fe8:	9902      	ldr	r1, [sp, #8]
 8006fea:	428e      	cmp	r6, r1
 8006fec:	d310      	bcc.n	8007010 <__mdiff+0x100>
 8006fee:	9e02      	ldr	r6, [sp, #8]
 8006ff0:	1ee9      	subs	r1, r5, #3
 8006ff2:	2400      	movs	r4, #0
 8006ff4:	428e      	cmp	r6, r1
 8006ff6:	d304      	bcc.n	8007002 <__mdiff+0xf2>
 8006ff8:	0031      	movs	r1, r6
 8006ffa:	3103      	adds	r1, #3
 8006ffc:	1b49      	subs	r1, r1, r5
 8006ffe:	0889      	lsrs	r1, r1, #2
 8007000:	008c      	lsls	r4, r1, #2
 8007002:	191b      	adds	r3, r3, r4
 8007004:	3b04      	subs	r3, #4
 8007006:	6819      	ldr	r1, [r3, #0]
 8007008:	2900      	cmp	r1, #0
 800700a:	d00f      	beq.n	800702c <__mdiff+0x11c>
 800700c:	6110      	str	r0, [r2, #16]
 800700e:	e798      	b.n	8006f42 <__mdiff+0x32>
 8007010:	ce02      	ldmia	r6!, {r1}
 8007012:	b28c      	uxth	r4, r1
 8007014:	19e4      	adds	r4, r4, r7
 8007016:	0c0f      	lsrs	r7, r1, #16
 8007018:	1421      	asrs	r1, r4, #16
 800701a:	1879      	adds	r1, r7, r1
 800701c:	b2a4      	uxth	r4, r4
 800701e:	140f      	asrs	r7, r1, #16
 8007020:	0409      	lsls	r1, r1, #16
 8007022:	4321      	orrs	r1, r4
 8007024:	4664      	mov	r4, ip
 8007026:	c402      	stmia	r4!, {r1}
 8007028:	46a4      	mov	ip, r4
 800702a:	e7dd      	b.n	8006fe8 <__mdiff+0xd8>
 800702c:	3801      	subs	r0, #1
 800702e:	e7e9      	b.n	8007004 <__mdiff+0xf4>
 8007030:	0800b0c3 	.word	0x0800b0c3
 8007034:	0800b0d4 	.word	0x0800b0d4
 8007038:	00000237 	.word	0x00000237
 800703c:	00000245 	.word	0x00000245

08007040 <__d2b>:
 8007040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007042:	2101      	movs	r1, #1
 8007044:	0014      	movs	r4, r2
 8007046:	001d      	movs	r5, r3
 8007048:	9f08      	ldr	r7, [sp, #32]
 800704a:	f7ff fd0f 	bl	8006a6c <_Balloc>
 800704e:	1e06      	subs	r6, r0, #0
 8007050:	d105      	bne.n	800705e <__d2b+0x1e>
 8007052:	0032      	movs	r2, r6
 8007054:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <__d2b+0xa8>)
 8007056:	4825      	ldr	r0, [pc, #148]	; (80070ec <__d2b+0xac>)
 8007058:	4925      	ldr	r1, [pc, #148]	; (80070f0 <__d2b+0xb0>)
 800705a:	f001 fc53 	bl	8008904 <__assert_func>
 800705e:	032b      	lsls	r3, r5, #12
 8007060:	006d      	lsls	r5, r5, #1
 8007062:	0b1b      	lsrs	r3, r3, #12
 8007064:	0d6d      	lsrs	r5, r5, #21
 8007066:	d125      	bne.n	80070b4 <__d2b+0x74>
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	2c00      	cmp	r4, #0
 800706c:	d028      	beq.n	80070c0 <__d2b+0x80>
 800706e:	4668      	mov	r0, sp
 8007070:	9400      	str	r4, [sp, #0]
 8007072:	f7ff fd8b 	bl	8006b8c <__lo0bits>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	9900      	ldr	r1, [sp, #0]
 800707a:	2800      	cmp	r0, #0
 800707c:	d01e      	beq.n	80070bc <__d2b+0x7c>
 800707e:	2220      	movs	r2, #32
 8007080:	001c      	movs	r4, r3
 8007082:	1a12      	subs	r2, r2, r0
 8007084:	4094      	lsls	r4, r2
 8007086:	0022      	movs	r2, r4
 8007088:	40c3      	lsrs	r3, r0
 800708a:	430a      	orrs	r2, r1
 800708c:	6172      	str	r2, [r6, #20]
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	9c01      	ldr	r4, [sp, #4]
 8007092:	61b4      	str	r4, [r6, #24]
 8007094:	1e63      	subs	r3, r4, #1
 8007096:	419c      	sbcs	r4, r3
 8007098:	3401      	adds	r4, #1
 800709a:	6134      	str	r4, [r6, #16]
 800709c:	2d00      	cmp	r5, #0
 800709e:	d017      	beq.n	80070d0 <__d2b+0x90>
 80070a0:	2435      	movs	r4, #53	; 0x35
 80070a2:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <__d2b+0xb4>)
 80070a4:	18ed      	adds	r5, r5, r3
 80070a6:	182d      	adds	r5, r5, r0
 80070a8:	603d      	str	r5, [r7, #0]
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	1a24      	subs	r4, r4, r0
 80070ae:	601c      	str	r4, [r3, #0]
 80070b0:	0030      	movs	r0, r6
 80070b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070b4:	2280      	movs	r2, #128	; 0x80
 80070b6:	0352      	lsls	r2, r2, #13
 80070b8:	4313      	orrs	r3, r2
 80070ba:	e7d5      	b.n	8007068 <__d2b+0x28>
 80070bc:	6171      	str	r1, [r6, #20]
 80070be:	e7e7      	b.n	8007090 <__d2b+0x50>
 80070c0:	a801      	add	r0, sp, #4
 80070c2:	f7ff fd63 	bl	8006b8c <__lo0bits>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	2401      	movs	r4, #1
 80070ca:	6173      	str	r3, [r6, #20]
 80070cc:	3020      	adds	r0, #32
 80070ce:	e7e4      	b.n	800709a <__d2b+0x5a>
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <__d2b+0xb8>)
 80070d2:	18c0      	adds	r0, r0, r3
 80070d4:	4b09      	ldr	r3, [pc, #36]	; (80070fc <__d2b+0xbc>)
 80070d6:	6038      	str	r0, [r7, #0]
 80070d8:	18e3      	adds	r3, r4, r3
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	18f3      	adds	r3, r6, r3
 80070de:	6958      	ldr	r0, [r3, #20]
 80070e0:	f7ff fd3a 	bl	8006b58 <__hi0bits>
 80070e4:	0164      	lsls	r4, r4, #5
 80070e6:	e7e0      	b.n	80070aa <__d2b+0x6a>
 80070e8:	0800b0c3 	.word	0x0800b0c3
 80070ec:	0800b0d4 	.word	0x0800b0d4
 80070f0:	0000030f 	.word	0x0000030f
 80070f4:	fffffbcd 	.word	0xfffffbcd
 80070f8:	fffffbce 	.word	0xfffffbce
 80070fc:	3fffffff 	.word	0x3fffffff

08007100 <__ascii_wctomb>:
 8007100:	0003      	movs	r3, r0
 8007102:	1e08      	subs	r0, r1, #0
 8007104:	d005      	beq.n	8007112 <__ascii_wctomb+0x12>
 8007106:	2aff      	cmp	r2, #255	; 0xff
 8007108:	d904      	bls.n	8007114 <__ascii_wctomb+0x14>
 800710a:	228a      	movs	r2, #138	; 0x8a
 800710c:	2001      	movs	r0, #1
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	4240      	negs	r0, r0
 8007112:	4770      	bx	lr
 8007114:	2001      	movs	r0, #1
 8007116:	700a      	strb	r2, [r1, #0]
 8007118:	e7fb      	b.n	8007112 <__ascii_wctomb+0x12>
	...

0800711c <_svfprintf_r>:
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	b0d9      	sub	sp, #356	; 0x164
 8007120:	001c      	movs	r4, r3
 8007122:	910b      	str	r1, [sp, #44]	; 0x2c
 8007124:	9208      	str	r2, [sp, #32]
 8007126:	900a      	str	r0, [sp, #40]	; 0x28
 8007128:	f001 fb56 	bl	80087d8 <_localeconv_r>
 800712c:	6803      	ldr	r3, [r0, #0]
 800712e:	0018      	movs	r0, r3
 8007130:	931c      	str	r3, [sp, #112]	; 0x70
 8007132:	f7f8 ffe7 	bl	8000104 <strlen>
 8007136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007138:	9016      	str	r0, [sp, #88]	; 0x58
 800713a:	899b      	ldrh	r3, [r3, #12]
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	d517      	bpl.n	8007170 <_svfprintf_r+0x54>
 8007140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d113      	bne.n	8007170 <_svfprintf_r+0x54>
 8007148:	2140      	movs	r1, #64	; 0x40
 800714a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800714c:	f7fe fea0 	bl	8005e90 <_malloc_r>
 8007150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007152:	6018      	str	r0, [r3, #0]
 8007154:	6118      	str	r0, [r3, #16]
 8007156:	2800      	cmp	r0, #0
 8007158:	d107      	bne.n	800716a <_svfprintf_r+0x4e>
 800715a:	230c      	movs	r3, #12
 800715c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	3b0d      	subs	r3, #13
 8007162:	9317      	str	r3, [sp, #92]	; 0x5c
 8007164:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007166:	b059      	add	sp, #356	; 0x164
 8007168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800716e:	6153      	str	r3, [r2, #20]
 8007170:	2300      	movs	r3, #0
 8007172:	2200      	movs	r2, #0
 8007174:	932e      	str	r3, [sp, #184]	; 0xb8
 8007176:	932d      	str	r3, [sp, #180]	; 0xb4
 8007178:	930e      	str	r3, [sp, #56]	; 0x38
 800717a:	2300      	movs	r3, #0
 800717c:	9214      	str	r2, [sp, #80]	; 0x50
 800717e:	9315      	str	r3, [sp, #84]	; 0x54
 8007180:	2300      	movs	r3, #0
 8007182:	af2f      	add	r7, sp, #188	; 0xbc
 8007184:	972c      	str	r7, [sp, #176]	; 0xb0
 8007186:	931f      	str	r3, [sp, #124]	; 0x7c
 8007188:	931e      	str	r3, [sp, #120]	; 0x78
 800718a:	9312      	str	r3, [sp, #72]	; 0x48
 800718c:	931b      	str	r3, [sp, #108]	; 0x6c
 800718e:	931d      	str	r3, [sp, #116]	; 0x74
 8007190:	9317      	str	r3, [sp, #92]	; 0x5c
 8007192:	9d08      	ldr	r5, [sp, #32]
 8007194:	782b      	ldrb	r3, [r5, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <_svfprintf_r+0x84>
 800719a:	2b25      	cmp	r3, #37	; 0x25
 800719c:	d000      	beq.n	80071a0 <_svfprintf_r+0x84>
 800719e:	e091      	b.n	80072c4 <_svfprintf_r+0x1a8>
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	1aee      	subs	r6, r5, r3
 80071a4:	429d      	cmp	r5, r3
 80071a6:	d016      	beq.n	80071d6 <_svfprintf_r+0xba>
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80071ac:	607e      	str	r6, [r7, #4]
 80071ae:	199b      	adds	r3, r3, r6
 80071b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80071b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80071b4:	3708      	adds	r7, #8
 80071b6:	3301      	adds	r3, #1
 80071b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	dd08      	ble.n	80071d0 <_svfprintf_r+0xb4>
 80071be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80071c4:	f002 fc44 	bl	8009a50 <__ssprint_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d000      	beq.n	80071ce <_svfprintf_r+0xb2>
 80071cc:	e1cf      	b.n	800756e <_svfprintf_r+0x452>
 80071ce:	af2f      	add	r7, sp, #188	; 0xbc
 80071d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d2:	199b      	adds	r3, r3, r6
 80071d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071d6:	782b      	ldrb	r3, [r5, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <_svfprintf_r+0xc4>
 80071dc:	f001 f99e 	bl	800851c <_svfprintf_r+0x1400>
 80071e0:	221b      	movs	r2, #27
 80071e2:	2300      	movs	r3, #0
 80071e4:	a91e      	add	r1, sp, #120	; 0x78
 80071e6:	1852      	adds	r2, r2, r1
 80071e8:	7013      	strb	r3, [r2, #0]
 80071ea:	2201      	movs	r2, #1
 80071ec:	001e      	movs	r6, r3
 80071ee:	4252      	negs	r2, r2
 80071f0:	3501      	adds	r5, #1
 80071f2:	9209      	str	r2, [sp, #36]	; 0x24
 80071f4:	9318      	str	r3, [sp, #96]	; 0x60
 80071f6:	1c6b      	adds	r3, r5, #1
 80071f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80071fa:	782b      	ldrb	r3, [r5, #0]
 80071fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80071fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007200:	3820      	subs	r0, #32
 8007202:	285a      	cmp	r0, #90	; 0x5a
 8007204:	d901      	bls.n	800720a <_svfprintf_r+0xee>
 8007206:	f000 fe20 	bl	8007e4a <_svfprintf_r+0xd2e>
 800720a:	f7f8 ff8d 	bl	8000128 <__gnu_thumb1_case_uhi>
 800720e:	0078      	.short	0x0078
 8007210:	061e061e 	.word	0x061e061e
 8007214:	061e0082 	.word	0x061e0082
 8007218:	061e061e 	.word	0x061e061e
 800721c:	061e005d 	.word	0x061e005d
 8007220:	0084061e 	.word	0x0084061e
 8007224:	061e008c 	.word	0x061e008c
 8007228:	0091008a 	.word	0x0091008a
 800722c:	00b2061e 	.word	0x00b2061e
 8007230:	00b400b4 	.word	0x00b400b4
 8007234:	00b400b4 	.word	0x00b400b4
 8007238:	00b400b4 	.word	0x00b400b4
 800723c:	00b400b4 	.word	0x00b400b4
 8007240:	061e00b4 	.word	0x061e00b4
 8007244:	061e061e 	.word	0x061e061e
 8007248:	061e061e 	.word	0x061e061e
 800724c:	061e061e 	.word	0x061e061e
 8007250:	061e013b 	.word	0x061e013b
 8007254:	00f400e0 	.word	0x00f400e0
 8007258:	013b013b 	.word	0x013b013b
 800725c:	061e013b 	.word	0x061e013b
 8007260:	061e061e 	.word	0x061e061e
 8007264:	00c7061e 	.word	0x00c7061e
 8007268:	061e061e 	.word	0x061e061e
 800726c:	061e04c7 	.word	0x061e04c7
 8007270:	061e061e 	.word	0x061e061e
 8007274:	061e050a 	.word	0x061e050a
 8007278:	061e052a 	.word	0x061e052a
 800727c:	055c061e 	.word	0x055c061e
 8007280:	061e061e 	.word	0x061e061e
 8007284:	061e061e 	.word	0x061e061e
 8007288:	061e061e 	.word	0x061e061e
 800728c:	061e061e 	.word	0x061e061e
 8007290:	061e013b 	.word	0x061e013b
 8007294:	00f600e0 	.word	0x00f600e0
 8007298:	013b013b 	.word	0x013b013b
 800729c:	00c9013b 	.word	0x00c9013b
 80072a0:	00dc00f6 	.word	0x00dc00f6
 80072a4:	00d5061e 	.word	0x00d5061e
 80072a8:	04a7061e 	.word	0x04a7061e
 80072ac:	04fa04c9 	.word	0x04fa04c9
 80072b0:	061e00dc 	.word	0x061e00dc
 80072b4:	0080050a 	.word	0x0080050a
 80072b8:	061e052c 	.word	0x061e052c
 80072bc:	057c061e 	.word	0x057c061e
 80072c0:	0080061e 	.word	0x0080061e
 80072c4:	3501      	adds	r5, #1
 80072c6:	e765      	b.n	8007194 <_svfprintf_r+0x78>
 80072c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072ca:	f001 fa85 	bl	80087d8 <_localeconv_r>
 80072ce:	6843      	ldr	r3, [r0, #4]
 80072d0:	0018      	movs	r0, r3
 80072d2:	931d      	str	r3, [sp, #116]	; 0x74
 80072d4:	f7f8 ff16 	bl	8000104 <strlen>
 80072d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80072da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072dc:	f001 fa7c 	bl	80087d8 <_localeconv_r>
 80072e0:	6883      	ldr	r3, [r0, #8]
 80072e2:	9312      	str	r3, [sp, #72]	; 0x48
 80072e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d011      	beq.n	800730e <_svfprintf_r+0x1f2>
 80072ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <_svfprintf_r+0x1f2>
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <_svfprintf_r+0x1f2>
 80072f6:	2380      	movs	r3, #128	; 0x80
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	431e      	orrs	r6, r3
 80072fc:	e007      	b.n	800730e <_svfprintf_r+0x1f2>
 80072fe:	231b      	movs	r3, #27
 8007300:	aa1e      	add	r2, sp, #120	; 0x78
 8007302:	189b      	adds	r3, r3, r2
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	2a00      	cmp	r2, #0
 8007308:	d101      	bne.n	800730e <_svfprintf_r+0x1f2>
 800730a:	3220      	adds	r2, #32
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007310:	e771      	b.n	80071f6 <_svfprintf_r+0xda>
 8007312:	2301      	movs	r3, #1
 8007314:	e7f1      	b.n	80072fa <_svfprintf_r+0x1de>
 8007316:	cc08      	ldmia	r4!, {r3}
 8007318:	9318      	str	r3, [sp, #96]	; 0x60
 800731a:	2b00      	cmp	r3, #0
 800731c:	daf7      	bge.n	800730e <_svfprintf_r+0x1f2>
 800731e:	425b      	negs	r3, r3
 8007320:	9318      	str	r3, [sp, #96]	; 0x60
 8007322:	2304      	movs	r3, #4
 8007324:	e7e9      	b.n	80072fa <_svfprintf_r+0x1de>
 8007326:	231b      	movs	r3, #27
 8007328:	aa1e      	add	r2, sp, #120	; 0x78
 800732a:	189b      	adds	r3, r3, r2
 800732c:	222b      	movs	r2, #43	; 0x2b
 800732e:	e7ed      	b.n	800730c <_svfprintf_r+0x1f0>
 8007330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007334:	7812      	ldrb	r2, [r2, #0]
 8007336:	3301      	adds	r3, #1
 8007338:	920f      	str	r2, [sp, #60]	; 0x3c
 800733a:	2a2a      	cmp	r2, #42	; 0x2a
 800733c:	d010      	beq.n	8007360 <_svfprintf_r+0x244>
 800733e:	2200      	movs	r2, #0
 8007340:	9209      	str	r2, [sp, #36]	; 0x24
 8007342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007344:	9313      	str	r3, [sp, #76]	; 0x4c
 8007346:	3a30      	subs	r2, #48	; 0x30
 8007348:	2a09      	cmp	r2, #9
 800734a:	d900      	bls.n	800734e <_svfprintf_r+0x232>
 800734c:	e757      	b.n	80071fe <_svfprintf_r+0xe2>
 800734e:	200a      	movs	r0, #10
 8007350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007352:	4341      	muls	r1, r0
 8007354:	188a      	adds	r2, r1, r2
 8007356:	9209      	str	r2, [sp, #36]	; 0x24
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	920f      	str	r2, [sp, #60]	; 0x3c
 800735e:	e7f0      	b.n	8007342 <_svfprintf_r+0x226>
 8007360:	cc04      	ldmia	r4!, {r2}
 8007362:	9209      	str	r2, [sp, #36]	; 0x24
 8007364:	2a00      	cmp	r2, #0
 8007366:	da02      	bge.n	800736e <_svfprintf_r+0x252>
 8007368:	2201      	movs	r2, #1
 800736a:	4252      	negs	r2, r2
 800736c:	9209      	str	r2, [sp, #36]	; 0x24
 800736e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007370:	e7cd      	b.n	800730e <_svfprintf_r+0x1f2>
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	e7c1      	b.n	80072fa <_svfprintf_r+0x1de>
 8007376:	2200      	movs	r2, #0
 8007378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800737a:	9218      	str	r2, [sp, #96]	; 0x60
 800737c:	210a      	movs	r1, #10
 800737e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007380:	434a      	muls	r2, r1
 8007382:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007384:	3930      	subs	r1, #48	; 0x30
 8007386:	188a      	adds	r2, r1, r2
 8007388:	9218      	str	r2, [sp, #96]	; 0x60
 800738a:	001a      	movs	r2, r3
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	920f      	str	r2, [sp, #60]	; 0x3c
 8007392:	3a30      	subs	r2, #48	; 0x30
 8007394:	9313      	str	r3, [sp, #76]	; 0x4c
 8007396:	2a09      	cmp	r2, #9
 8007398:	d9f0      	bls.n	800737c <_svfprintf_r+0x260>
 800739a:	e730      	b.n	80071fe <_svfprintf_r+0xe2>
 800739c:	2308      	movs	r3, #8
 800739e:	e7ac      	b.n	80072fa <_svfprintf_r+0x1de>
 80073a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b68      	cmp	r3, #104	; 0x68
 80073a6:	d105      	bne.n	80073b4 <_svfprintf_r+0x298>
 80073a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073aa:	3301      	adds	r3, #1
 80073ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80073ae:	2380      	movs	r3, #128	; 0x80
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	e7a2      	b.n	80072fa <_svfprintf_r+0x1de>
 80073b4:	2340      	movs	r3, #64	; 0x40
 80073b6:	e7a0      	b.n	80072fa <_svfprintf_r+0x1de>
 80073b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b6c      	cmp	r3, #108	; 0x6c
 80073be:	d104      	bne.n	80073ca <_svfprintf_r+0x2ae>
 80073c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073c2:	3301      	adds	r3, #1
 80073c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80073c6:	2320      	movs	r3, #32
 80073c8:	e797      	b.n	80072fa <_svfprintf_r+0x1de>
 80073ca:	2310      	movs	r3, #16
 80073cc:	e795      	b.n	80072fa <_svfprintf_r+0x1de>
 80073ce:	0021      	movs	r1, r4
 80073d0:	c904      	ldmia	r1!, {r2}
 80073d2:	ab3f      	add	r3, sp, #252	; 0xfc
 80073d4:	910d      	str	r1, [sp, #52]	; 0x34
 80073d6:	211b      	movs	r1, #27
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	a81e      	add	r0, sp, #120	; 0x78
 80073de:	1809      	adds	r1, r1, r0
 80073e0:	700a      	strb	r2, [r1, #0]
 80073e2:	920c      	str	r2, [sp, #48]	; 0x30
 80073e4:	3201      	adds	r2, #1
 80073e6:	9209      	str	r2, [sp, #36]	; 0x24
 80073e8:	2200      	movs	r2, #0
 80073ea:	9308      	str	r3, [sp, #32]
 80073ec:	0015      	movs	r5, r2
 80073ee:	9219      	str	r2, [sp, #100]	; 0x64
 80073f0:	9210      	str	r2, [sp, #64]	; 0x40
 80073f2:	9211      	str	r2, [sp, #68]	; 0x44
 80073f4:	e1f1      	b.n	80077da <_svfprintf_r+0x6be>
 80073f6:	2310      	movs	r3, #16
 80073f8:	431e      	orrs	r6, r3
 80073fa:	06b3      	lsls	r3, r6, #26
 80073fc:	d531      	bpl.n	8007462 <_svfprintf_r+0x346>
 80073fe:	2307      	movs	r3, #7
 8007400:	3407      	adds	r4, #7
 8007402:	439c      	bics	r4, r3
 8007404:	0022      	movs	r2, r4
 8007406:	ca18      	ldmia	r2!, {r3, r4}
 8007408:	9306      	str	r3, [sp, #24]
 800740a:	9407      	str	r4, [sp, #28]
 800740c:	920d      	str	r2, [sp, #52]	; 0x34
 800740e:	9a07      	ldr	r2, [sp, #28]
 8007410:	2301      	movs	r3, #1
 8007412:	2a00      	cmp	r2, #0
 8007414:	da0b      	bge.n	800742e <_svfprintf_r+0x312>
 8007416:	9c06      	ldr	r4, [sp, #24]
 8007418:	9d07      	ldr	r5, [sp, #28]
 800741a:	2200      	movs	r2, #0
 800741c:	4261      	negs	r1, r4
 800741e:	41aa      	sbcs	r2, r5
 8007420:	9106      	str	r1, [sp, #24]
 8007422:	9207      	str	r2, [sp, #28]
 8007424:	221b      	movs	r2, #27
 8007426:	a91e      	add	r1, sp, #120	; 0x78
 8007428:	1852      	adds	r2, r2, r1
 800742a:	212d      	movs	r1, #45	; 0x2d
 800742c:	7011      	strb	r1, [r2, #0]
 800742e:	9907      	ldr	r1, [sp, #28]
 8007430:	9a06      	ldr	r2, [sp, #24]
 8007432:	430a      	orrs	r2, r1
 8007434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007436:	3101      	adds	r1, #1
 8007438:	d101      	bne.n	800743e <_svfprintf_r+0x322>
 800743a:	f001 f87b 	bl	8008534 <_svfprintf_r+0x1418>
 800743e:	2180      	movs	r1, #128	; 0x80
 8007440:	0034      	movs	r4, r6
 8007442:	438c      	bics	r4, r1
 8007444:	2a00      	cmp	r2, #0
 8007446:	d001      	beq.n	800744c <_svfprintf_r+0x330>
 8007448:	f001 f879 	bl	800853e <_svfprintf_r+0x1422>
 800744c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800744e:	2a00      	cmp	r2, #0
 8007450:	d101      	bne.n	8007456 <_svfprintf_r+0x33a>
 8007452:	f000 fcef 	bl	8007e34 <_svfprintf_r+0xd18>
 8007456:	2b01      	cmp	r3, #1
 8007458:	d001      	beq.n	800745e <_svfprintf_r+0x342>
 800745a:	f001 f874 	bl	8008546 <_svfprintf_r+0x142a>
 800745e:	f000 fc79 	bl	8007d54 <_svfprintf_r+0xc38>
 8007462:	0022      	movs	r2, r4
 8007464:	ca08      	ldmia	r2!, {r3}
 8007466:	920d      	str	r2, [sp, #52]	; 0x34
 8007468:	06f2      	lsls	r2, r6, #27
 800746a:	d503      	bpl.n	8007474 <_svfprintf_r+0x358>
 800746c:	9306      	str	r3, [sp, #24]
 800746e:	17db      	asrs	r3, r3, #31
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	e7cc      	b.n	800740e <_svfprintf_r+0x2f2>
 8007474:	0672      	lsls	r2, r6, #25
 8007476:	d501      	bpl.n	800747c <_svfprintf_r+0x360>
 8007478:	b21b      	sxth	r3, r3
 800747a:	e7f7      	b.n	800746c <_svfprintf_r+0x350>
 800747c:	05b2      	lsls	r2, r6, #22
 800747e:	d5f5      	bpl.n	800746c <_svfprintf_r+0x350>
 8007480:	b25b      	sxtb	r3, r3
 8007482:	e7f3      	b.n	800746c <_svfprintf_r+0x350>
 8007484:	2307      	movs	r3, #7
 8007486:	3407      	adds	r4, #7
 8007488:	439c      	bics	r4, r3
 800748a:	0022      	movs	r2, r4
 800748c:	ca18      	ldmia	r2!, {r3, r4}
 800748e:	920d      	str	r2, [sp, #52]	; 0x34
 8007490:	2201      	movs	r2, #1
 8007492:	9314      	str	r3, [sp, #80]	; 0x50
 8007494:	9415      	str	r4, [sp, #84]	; 0x54
 8007496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007498:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800749a:	005c      	lsls	r4, r3, #1
 800749c:	0864      	lsrs	r4, r4, #1
 800749e:	0028      	movs	r0, r5
 80074a0:	0021      	movs	r1, r4
 80074a2:	4b3e      	ldr	r3, [pc, #248]	; (800759c <_svfprintf_r+0x480>)
 80074a4:	4252      	negs	r2, r2
 80074a6:	f7fa fe87 	bl	80021b8 <__aeabi_dcmpun>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d126      	bne.n	80074fc <_svfprintf_r+0x3e0>
 80074ae:	2201      	movs	r2, #1
 80074b0:	0028      	movs	r0, r5
 80074b2:	0021      	movs	r1, r4
 80074b4:	4b39      	ldr	r3, [pc, #228]	; (800759c <_svfprintf_r+0x480>)
 80074b6:	4252      	negs	r2, r2
 80074b8:	f7f8 ffd6 	bl	8000468 <__aeabi_dcmple>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d11d      	bne.n	80074fc <_svfprintf_r+0x3e0>
 80074c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80074c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80074c4:	2200      	movs	r2, #0
 80074c6:	2300      	movs	r3, #0
 80074c8:	f7f8 ffc4 	bl	8000454 <__aeabi_dcmplt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d004      	beq.n	80074da <_svfprintf_r+0x3be>
 80074d0:	231b      	movs	r3, #27
 80074d2:	aa1e      	add	r2, sp, #120	; 0x78
 80074d4:	189b      	adds	r3, r3, r2
 80074d6:	222d      	movs	r2, #45	; 0x2d
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <_svfprintf_r+0x484>)
 80074dc:	9308      	str	r3, [sp, #32]
 80074de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e0:	2b47      	cmp	r3, #71	; 0x47
 80074e2:	dd01      	ble.n	80074e8 <_svfprintf_r+0x3cc>
 80074e4:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <_svfprintf_r+0x488>)
 80074e6:	9308      	str	r3, [sp, #32]
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	439e      	bics	r6, r3
 80074ec:	2300      	movs	r3, #0
 80074ee:	930c      	str	r3, [sp, #48]	; 0x30
 80074f0:	3303      	adds	r3, #3
 80074f2:	9309      	str	r3, [sp, #36]	; 0x24
 80074f4:	2300      	movs	r3, #0
 80074f6:	9319      	str	r3, [sp, #100]	; 0x64
 80074f8:	f000 fc78 	bl	8007dec <_svfprintf_r+0xcd0>
 80074fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007500:	0010      	movs	r0, r2
 8007502:	0019      	movs	r1, r3
 8007504:	f7fa fe58 	bl	80021b8 <__aeabi_dcmpun>
 8007508:	2800      	cmp	r0, #0
 800750a:	d00e      	beq.n	800752a <_svfprintf_r+0x40e>
 800750c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800750e:	2b00      	cmp	r3, #0
 8007510:	da04      	bge.n	800751c <_svfprintf_r+0x400>
 8007512:	231b      	movs	r3, #27
 8007514:	aa1e      	add	r2, sp, #120	; 0x78
 8007516:	189b      	adds	r3, r3, r2
 8007518:	222d      	movs	r2, #45	; 0x2d
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <_svfprintf_r+0x48c>)
 800751e:	9308      	str	r3, [sp, #32]
 8007520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007522:	2b47      	cmp	r3, #71	; 0x47
 8007524:	dde0      	ble.n	80074e8 <_svfprintf_r+0x3cc>
 8007526:	4b21      	ldr	r3, [pc, #132]	; (80075ac <_svfprintf_r+0x490>)
 8007528:	e7dd      	b.n	80074e6 <_svfprintf_r+0x3ca>
 800752a:	2320      	movs	r3, #32
 800752c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800752e:	439a      	bics	r2, r3
 8007530:	9210      	str	r2, [sp, #64]	; 0x40
 8007532:	2a41      	cmp	r2, #65	; 0x41
 8007534:	d123      	bne.n	800757e <_svfprintf_r+0x462>
 8007536:	2230      	movs	r2, #48	; 0x30
 8007538:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800753a:	ab25      	add	r3, sp, #148	; 0x94
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	3248      	adds	r2, #72	; 0x48
 8007540:	2961      	cmp	r1, #97	; 0x61
 8007542:	d000      	beq.n	8007546 <_svfprintf_r+0x42a>
 8007544:	3a20      	subs	r2, #32
 8007546:	705a      	strb	r2, [r3, #1]
 8007548:	2302      	movs	r3, #2
 800754a:	431e      	orrs	r6, r3
 800754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754e:	2b63      	cmp	r3, #99	; 0x63
 8007550:	dd2e      	ble.n	80075b0 <_svfprintf_r+0x494>
 8007552:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	f7fe fc9b 	bl	8005e90 <_malloc_r>
 800755a:	9008      	str	r0, [sp, #32]
 800755c:	2800      	cmp	r0, #0
 800755e:	d000      	beq.n	8007562 <_svfprintf_r+0x446>
 8007560:	e216      	b.n	8007990 <_svfprintf_r+0x874>
 8007562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007564:	899a      	ldrh	r2, [r3, #12]
 8007566:	2340      	movs	r3, #64	; 0x40
 8007568:	4313      	orrs	r3, r2
 800756a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800756c:	8193      	strh	r3, [r2, #12]
 800756e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007570:	899b      	ldrh	r3, [r3, #12]
 8007572:	065b      	lsls	r3, r3, #25
 8007574:	d400      	bmi.n	8007578 <_svfprintf_r+0x45c>
 8007576:	e5f5      	b.n	8007164 <_svfprintf_r+0x48>
 8007578:	2301      	movs	r3, #1
 800757a:	425b      	negs	r3, r3
 800757c:	e5f1      	b.n	8007162 <_svfprintf_r+0x46>
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	900c      	str	r0, [sp, #48]	; 0x30
 8007582:	3301      	adds	r3, #1
 8007584:	d100      	bne.n	8007588 <_svfprintf_r+0x46c>
 8007586:	e206      	b.n	8007996 <_svfprintf_r+0x87a>
 8007588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800758a:	2b47      	cmp	r3, #71	; 0x47
 800758c:	d114      	bne.n	80075b8 <_svfprintf_r+0x49c>
 800758e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d111      	bne.n	80075b8 <_svfprintf_r+0x49c>
 8007594:	3301      	adds	r3, #1
 8007596:	9309      	str	r3, [sp, #36]	; 0x24
 8007598:	e00e      	b.n	80075b8 <_svfprintf_r+0x49c>
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	7fefffff 	.word	0x7fefffff
 80075a0:	0800b22c 	.word	0x0800b22c
 80075a4:	0800b230 	.word	0x0800b230
 80075a8:	0800b234 	.word	0x0800b234
 80075ac:	0800b238 	.word	0x0800b238
 80075b0:	2300      	movs	r3, #0
 80075b2:	930c      	str	r3, [sp, #48]	; 0x30
 80075b4:	ab3f      	add	r3, sp, #252	; 0xfc
 80075b6:	9308      	str	r3, [sp, #32]
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	4333      	orrs	r3, r6
 80075be:	931a      	str	r3, [sp, #104]	; 0x68
 80075c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	db00      	blt.n	80075ca <_svfprintf_r+0x4ae>
 80075c8:	e1e7      	b.n	800799a <_svfprintf_r+0x87e>
 80075ca:	2280      	movs	r2, #128	; 0x80
 80075cc:	0612      	lsls	r2, r2, #24
 80075ce:	4694      	mov	ip, r2
 80075d0:	4463      	add	r3, ip
 80075d2:	930e      	str	r3, [sp, #56]	; 0x38
 80075d4:	232d      	movs	r3, #45	; 0x2d
 80075d6:	9322      	str	r3, [sp, #136]	; 0x88
 80075d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075da:	2b41      	cmp	r3, #65	; 0x41
 80075dc:	d000      	beq.n	80075e0 <_svfprintf_r+0x4c4>
 80075de:	e1f5      	b.n	80079cc <_svfprintf_r+0x8b0>
 80075e0:	0028      	movs	r0, r5
 80075e2:	aa26      	add	r2, sp, #152	; 0x98
 80075e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075e6:	f001 f91b 	bl	8008820 <frexp>
 80075ea:	23ff      	movs	r3, #255	; 0xff
 80075ec:	2200      	movs	r2, #0
 80075ee:	059b      	lsls	r3, r3, #22
 80075f0:	f7f9 ff9e 	bl	8001530 <__aeabi_dmul>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	0004      	movs	r4, r0
 80075fa:	000d      	movs	r5, r1
 80075fc:	f7f8 ff24 	bl	8000448 <__aeabi_dcmpeq>
 8007600:	2800      	cmp	r0, #0
 8007602:	d001      	beq.n	8007608 <_svfprintf_r+0x4ec>
 8007604:	2301      	movs	r3, #1
 8007606:	9326      	str	r3, [sp, #152]	; 0x98
 8007608:	4bda      	ldr	r3, [pc, #872]	; (8007974 <_svfprintf_r+0x858>)
 800760a:	9319      	str	r3, [sp, #100]	; 0x64
 800760c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800760e:	2b61      	cmp	r3, #97	; 0x61
 8007610:	d001      	beq.n	8007616 <_svfprintf_r+0x4fa>
 8007612:	4bd9      	ldr	r3, [pc, #868]	; (8007978 <_svfprintf_r+0x85c>)
 8007614:	9319      	str	r3, [sp, #100]	; 0x64
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	930e      	str	r3, [sp, #56]	; 0x38
 800761a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761c:	3b01      	subs	r3, #1
 800761e:	9311      	str	r3, [sp, #68]	; 0x44
 8007620:	2200      	movs	r2, #0
 8007622:	4bd6      	ldr	r3, [pc, #856]	; (800797c <_svfprintf_r+0x860>)
 8007624:	0020      	movs	r0, r4
 8007626:	0029      	movs	r1, r5
 8007628:	f7f9 ff82 	bl	8001530 <__aeabi_dmul>
 800762c:	000d      	movs	r5, r1
 800762e:	0004      	movs	r4, r0
 8007630:	f7fa fde0 	bl	80021f4 <__aeabi_d2iz>
 8007634:	9021      	str	r0, [sp, #132]	; 0x84
 8007636:	f7fa fe13 	bl	8002260 <__aeabi_i2d>
 800763a:	0002      	movs	r2, r0
 800763c:	000b      	movs	r3, r1
 800763e:	0020      	movs	r0, r4
 8007640:	0029      	movs	r1, r5
 8007642:	f7fa fa37 	bl	8001ab4 <__aeabi_dsub>
 8007646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007648:	000d      	movs	r5, r1
 800764a:	001a      	movs	r2, r3
 800764c:	3201      	adds	r2, #1
 800764e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007650:	920e      	str	r2, [sp, #56]	; 0x38
 8007652:	9223      	str	r2, [sp, #140]	; 0x8c
 8007654:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007656:	0004      	movs	r4, r0
 8007658:	5c52      	ldrb	r2, [r2, r1]
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800765e:	9320      	str	r3, [sp, #128]	; 0x80
 8007660:	3301      	adds	r3, #1
 8007662:	d00a      	beq.n	800767a <_svfprintf_r+0x55e>
 8007664:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007666:	2200      	movs	r2, #0
 8007668:	3b01      	subs	r3, #1
 800766a:	9311      	str	r3, [sp, #68]	; 0x44
 800766c:	0020      	movs	r0, r4
 800766e:	2300      	movs	r3, #0
 8007670:	0029      	movs	r1, r5
 8007672:	f7f8 fee9 	bl	8000448 <__aeabi_dcmpeq>
 8007676:	2800      	cmp	r0, #0
 8007678:	d0d2      	beq.n	8007620 <_svfprintf_r+0x504>
 800767a:	2200      	movs	r2, #0
 800767c:	0020      	movs	r0, r4
 800767e:	0029      	movs	r1, r5
 8007680:	4bbf      	ldr	r3, [pc, #764]	; (8007980 <_svfprintf_r+0x864>)
 8007682:	f7f8 fefb 	bl	800047c <__aeabi_dcmpgt>
 8007686:	2800      	cmp	r0, #0
 8007688:	d10c      	bne.n	80076a4 <_svfprintf_r+0x588>
 800768a:	2200      	movs	r2, #0
 800768c:	0020      	movs	r0, r4
 800768e:	0029      	movs	r1, r5
 8007690:	4bbb      	ldr	r3, [pc, #748]	; (8007980 <_svfprintf_r+0x864>)
 8007692:	f7f8 fed9 	bl	8000448 <__aeabi_dcmpeq>
 8007696:	2800      	cmp	r0, #0
 8007698:	d100      	bne.n	800769c <_svfprintf_r+0x580>
 800769a:	e191      	b.n	80079c0 <_svfprintf_r+0x8a4>
 800769c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d400      	bmi.n	80076a4 <_svfprintf_r+0x588>
 80076a2:	e18d      	b.n	80079c0 <_svfprintf_r+0x8a4>
 80076a4:	2030      	movs	r0, #48	; 0x30
 80076a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076a8:	932a      	str	r3, [sp, #168]	; 0xa8
 80076aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076ac:	7bdb      	ldrb	r3, [r3, #15]
 80076ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076b0:	3a01      	subs	r2, #1
 80076b2:	922a      	str	r2, [sp, #168]	; 0xa8
 80076b4:	7811      	ldrb	r1, [r2, #0]
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d100      	bne.n	80076bc <_svfprintf_r+0x5a0>
 80076ba:	e171      	b.n	80079a0 <_svfprintf_r+0x884>
 80076bc:	1c4b      	adds	r3, r1, #1
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2939      	cmp	r1, #57	; 0x39
 80076c2:	d101      	bne.n	80076c8 <_svfprintf_r+0x5ac>
 80076c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076c6:	7a9b      	ldrb	r3, [r3, #10]
 80076c8:	7013      	strb	r3, [r2, #0]
 80076ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076cc:	9a08      	ldr	r2, [sp, #32]
 80076ce:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	930e      	str	r3, [sp, #56]	; 0x38
 80076d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076d6:	2b47      	cmp	r3, #71	; 0x47
 80076d8:	d000      	beq.n	80076dc <_svfprintf_r+0x5c0>
 80076da:	e1c4      	b.n	8007a66 <_svfprintf_r+0x94a>
 80076dc:	1ceb      	adds	r3, r5, #3
 80076de:	db03      	blt.n	80076e8 <_svfprintf_r+0x5cc>
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	42ab      	cmp	r3, r5
 80076e4:	db00      	blt.n	80076e8 <_svfprintf_r+0x5cc>
 80076e6:	e1e6      	b.n	8007ab6 <_svfprintf_r+0x99a>
 80076e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ea:	3b02      	subs	r3, #2
 80076ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ee:	223c      	movs	r2, #60	; 0x3c
 80076f0:	466b      	mov	r3, sp
 80076f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076f4:	189b      	adds	r3, r3, r2
 80076f6:	1e6c      	subs	r4, r5, #1
 80076f8:	3a1c      	subs	r2, #28
 80076fa:	2000      	movs	r0, #0
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	9426      	str	r4, [sp, #152]	; 0x98
 8007700:	4391      	bics	r1, r2
 8007702:	2941      	cmp	r1, #65	; 0x41
 8007704:	d102      	bne.n	800770c <_svfprintf_r+0x5f0>
 8007706:	330f      	adds	r3, #15
 8007708:	b2db      	uxtb	r3, r3
 800770a:	3001      	adds	r0, #1
 800770c:	a928      	add	r1, sp, #160	; 0xa0
 800770e:	700b      	strb	r3, [r1, #0]
 8007710:	232b      	movs	r3, #43	; 0x2b
 8007712:	2c00      	cmp	r4, #0
 8007714:	da02      	bge.n	800771c <_svfprintf_r+0x600>
 8007716:	2401      	movs	r4, #1
 8007718:	3302      	adds	r3, #2
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	704b      	strb	r3, [r1, #1]
 800771e:	2c09      	cmp	r4, #9
 8007720:	dc00      	bgt.n	8007724 <_svfprintf_r+0x608>
 8007722:	e1ba      	b.n	8007a9a <_svfprintf_r+0x97e>
 8007724:	2337      	movs	r3, #55	; 0x37
 8007726:	250a      	movs	r5, #10
 8007728:	aa1e      	add	r2, sp, #120	; 0x78
 800772a:	189b      	adds	r3, r3, r2
 800772c:	9310      	str	r3, [sp, #64]	; 0x40
 800772e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007730:	0020      	movs	r0, r4
 8007732:	9309      	str	r3, [sp, #36]	; 0x24
 8007734:	0029      	movs	r1, r5
 8007736:	3b01      	subs	r3, #1
 8007738:	9310      	str	r3, [sp, #64]	; 0x40
 800773a:	f7f8 fe6f 	bl	800041c <__aeabi_idivmod>
 800773e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007740:	3130      	adds	r1, #48	; 0x30
 8007742:	7019      	strb	r1, [r3, #0]
 8007744:	0020      	movs	r0, r4
 8007746:	0029      	movs	r1, r5
 8007748:	9411      	str	r4, [sp, #68]	; 0x44
 800774a:	f7f8 fd81 	bl	8000250 <__divsi3>
 800774e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007750:	0004      	movs	r4, r0
 8007752:	2b63      	cmp	r3, #99	; 0x63
 8007754:	dceb      	bgt.n	800772e <_svfprintf_r+0x612>
 8007756:	222a      	movs	r2, #42	; 0x2a
 8007758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775a:	a81e      	add	r0, sp, #120	; 0x78
 800775c:	1e99      	subs	r1, r3, #2
 800775e:	1812      	adds	r2, r2, r0
 8007760:	2037      	movs	r0, #55	; 0x37
 8007762:	000b      	movs	r3, r1
 8007764:	3430      	adds	r4, #48	; 0x30
 8007766:	700c      	strb	r4, [r1, #0]
 8007768:	ac1e      	add	r4, sp, #120	; 0x78
 800776a:	1900      	adds	r0, r0, r4
 800776c:	4283      	cmp	r3, r0
 800776e:	d200      	bcs.n	8007772 <_svfprintf_r+0x656>
 8007770:	e18e      	b.n	8007a90 <_svfprintf_r+0x974>
 8007772:	2300      	movs	r3, #0
 8007774:	4281      	cmp	r1, r0
 8007776:	d804      	bhi.n	8007782 <_svfprintf_r+0x666>
 8007778:	aa1e      	add	r2, sp, #120	; 0x78
 800777a:	3339      	adds	r3, #57	; 0x39
 800777c:	189b      	adds	r3, r3, r2
 800777e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	222a      	movs	r2, #42	; 0x2a
 8007784:	a91e      	add	r1, sp, #120	; 0x78
 8007786:	1852      	adds	r2, r2, r1
 8007788:	18d3      	adds	r3, r2, r3
 800778a:	aa28      	add	r2, sp, #160	; 0xa0
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	931e      	str	r3, [sp, #120]	; 0x78
 8007790:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007794:	4694      	mov	ip, r2
 8007796:	4463      	add	r3, ip
 8007798:	9309      	str	r3, [sp, #36]	; 0x24
 800779a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800779c:	2b01      	cmp	r3, #1
 800779e:	dc01      	bgt.n	80077a4 <_svfprintf_r+0x688>
 80077a0:	07f3      	lsls	r3, r6, #31
 80077a2:	d504      	bpl.n	80077ae <_svfprintf_r+0x692>
 80077a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	4694      	mov	ip, r2
 80077aa:	4463      	add	r3, ip
 80077ac:	9309      	str	r3, [sp, #36]	; 0x24
 80077ae:	2280      	movs	r2, #128	; 0x80
 80077b0:	4b74      	ldr	r3, [pc, #464]	; (8007984 <_svfprintf_r+0x868>)
 80077b2:	0052      	lsls	r2, r2, #1
 80077b4:	4033      	ands	r3, r6
 80077b6:	431a      	orrs	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	001d      	movs	r5, r3
 80077bc:	921a      	str	r2, [sp, #104]	; 0x68
 80077be:	9310      	str	r3, [sp, #64]	; 0x40
 80077c0:	9311      	str	r3, [sp, #68]	; 0x44
 80077c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80077c6:	9319      	str	r3, [sp, #100]	; 0x64
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d006      	beq.n	80077da <_svfprintf_r+0x6be>
 80077cc:	231b      	movs	r3, #27
 80077ce:	aa1e      	add	r2, sp, #120	; 0x78
 80077d0:	189b      	adds	r3, r3, r2
 80077d2:	222d      	movs	r2, #45	; 0x2d
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	2300      	movs	r3, #0
 80077d8:	9319      	str	r3, [sp, #100]	; 0x64
 80077da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077de:	931a      	str	r3, [sp, #104]	; 0x68
 80077e0:	4293      	cmp	r3, r2
 80077e2:	da00      	bge.n	80077e6 <_svfprintf_r+0x6ca>
 80077e4:	921a      	str	r2, [sp, #104]	; 0x68
 80077e6:	231b      	movs	r3, #27
 80077e8:	aa1e      	add	r2, sp, #120	; 0x78
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	1e5a      	subs	r2, r3, #1
 80077f0:	4193      	sbcs	r3, r2
 80077f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077f4:	18d3      	adds	r3, r2, r3
 80077f6:	931a      	str	r3, [sp, #104]	; 0x68
 80077f8:	0032      	movs	r2, r6
 80077fa:	2302      	movs	r3, #2
 80077fc:	401a      	ands	r2, r3
 80077fe:	9220      	str	r2, [sp, #128]	; 0x80
 8007800:	421e      	tst	r6, r3
 8007802:	d002      	beq.n	800780a <_svfprintf_r+0x6ee>
 8007804:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007806:	3302      	adds	r3, #2
 8007808:	931a      	str	r3, [sp, #104]	; 0x68
 800780a:	2384      	movs	r3, #132	; 0x84
 800780c:	0032      	movs	r2, r6
 800780e:	401a      	ands	r2, r3
 8007810:	9221      	str	r2, [sp, #132]	; 0x84
 8007812:	421e      	tst	r6, r3
 8007814:	d11f      	bne.n	8007856 <_svfprintf_r+0x73a>
 8007816:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007818:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800781a:	1a9c      	subs	r4, r3, r2
 800781c:	2c00      	cmp	r4, #0
 800781e:	dd1a      	ble.n	8007856 <_svfprintf_r+0x73a>
 8007820:	0039      	movs	r1, r7
 8007822:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007824:	4858      	ldr	r0, [pc, #352]	; (8007988 <_svfprintf_r+0x86c>)
 8007826:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007828:	3301      	adds	r3, #1
 800782a:	3108      	adds	r1, #8
 800782c:	6038      	str	r0, [r7, #0]
 800782e:	2c10      	cmp	r4, #16
 8007830:	dd00      	ble.n	8007834 <_svfprintf_r+0x718>
 8007832:	e31c      	b.n	8007e6e <_svfprintf_r+0xd52>
 8007834:	607c      	str	r4, [r7, #4]
 8007836:	18a4      	adds	r4, r4, r2
 8007838:	000f      	movs	r7, r1
 800783a:	942e      	str	r4, [sp, #184]	; 0xb8
 800783c:	932d      	str	r3, [sp, #180]	; 0xb4
 800783e:	2b07      	cmp	r3, #7
 8007840:	dd09      	ble.n	8007856 <_svfprintf_r+0x73a>
 8007842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007844:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007846:	aa2c      	add	r2, sp, #176	; 0xb0
 8007848:	f002 f902 	bl	8009a50 <__ssprint_r>
 800784c:	2800      	cmp	r0, #0
 800784e:	d001      	beq.n	8007854 <_svfprintf_r+0x738>
 8007850:	f000 fe43 	bl	80084da <_svfprintf_r+0x13be>
 8007854:	af2f      	add	r7, sp, #188	; 0xbc
 8007856:	221b      	movs	r2, #27
 8007858:	a91e      	add	r1, sp, #120	; 0x78
 800785a:	1852      	adds	r2, r2, r1
 800785c:	7811      	ldrb	r1, [r2, #0]
 800785e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007860:	2900      	cmp	r1, #0
 8007862:	d014      	beq.n	800788e <_svfprintf_r+0x772>
 8007864:	603a      	str	r2, [r7, #0]
 8007866:	2201      	movs	r2, #1
 8007868:	189b      	adds	r3, r3, r2
 800786a:	932e      	str	r3, [sp, #184]	; 0xb8
 800786c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	189b      	adds	r3, r3, r2
 8007872:	932d      	str	r3, [sp, #180]	; 0xb4
 8007874:	3708      	adds	r7, #8
 8007876:	2b07      	cmp	r3, #7
 8007878:	dd09      	ble.n	800788e <_svfprintf_r+0x772>
 800787a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800787c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800787e:	aa2c      	add	r2, sp, #176	; 0xb0
 8007880:	f002 f8e6 	bl	8009a50 <__ssprint_r>
 8007884:	2800      	cmp	r0, #0
 8007886:	d001      	beq.n	800788c <_svfprintf_r+0x770>
 8007888:	f000 fe27 	bl	80084da <_svfprintf_r+0x13be>
 800788c:	af2f      	add	r7, sp, #188	; 0xbc
 800788e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007890:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007892:	2a00      	cmp	r2, #0
 8007894:	d015      	beq.n	80078c2 <_svfprintf_r+0x7a6>
 8007896:	aa25      	add	r2, sp, #148	; 0x94
 8007898:	603a      	str	r2, [r7, #0]
 800789a:	2202      	movs	r2, #2
 800789c:	189b      	adds	r3, r3, r2
 800789e:	932e      	str	r3, [sp, #184]	; 0xb8
 80078a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	3301      	adds	r3, #1
 80078a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80078a8:	3708      	adds	r7, #8
 80078aa:	2b07      	cmp	r3, #7
 80078ac:	dd09      	ble.n	80078c2 <_svfprintf_r+0x7a6>
 80078ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80078b4:	f002 f8cc 	bl	8009a50 <__ssprint_r>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d001      	beq.n	80078c0 <_svfprintf_r+0x7a4>
 80078bc:	f000 fe0d 	bl	80084da <_svfprintf_r+0x13be>
 80078c0:	af2f      	add	r7, sp, #188	; 0xbc
 80078c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d11f      	bne.n	8007908 <_svfprintf_r+0x7ec>
 80078c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80078ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078cc:	1a9c      	subs	r4, r3, r2
 80078ce:	2c00      	cmp	r4, #0
 80078d0:	dd1a      	ble.n	8007908 <_svfprintf_r+0x7ec>
 80078d2:	0039      	movs	r1, r7
 80078d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80078d6:	482d      	ldr	r0, [pc, #180]	; (800798c <_svfprintf_r+0x870>)
 80078d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80078da:	3301      	adds	r3, #1
 80078dc:	3108      	adds	r1, #8
 80078de:	6038      	str	r0, [r7, #0]
 80078e0:	2c10      	cmp	r4, #16
 80078e2:	dd00      	ble.n	80078e6 <_svfprintf_r+0x7ca>
 80078e4:	e2d6      	b.n	8007e94 <_svfprintf_r+0xd78>
 80078e6:	607c      	str	r4, [r7, #4]
 80078e8:	18a4      	adds	r4, r4, r2
 80078ea:	000f      	movs	r7, r1
 80078ec:	942e      	str	r4, [sp, #184]	; 0xb8
 80078ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80078f0:	2b07      	cmp	r3, #7
 80078f2:	dd09      	ble.n	8007908 <_svfprintf_r+0x7ec>
 80078f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80078fa:	f002 f8a9 	bl	8009a50 <__ssprint_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d001      	beq.n	8007906 <_svfprintf_r+0x7ea>
 8007902:	f000 fdea 	bl	80084da <_svfprintf_r+0x13be>
 8007906:	af2f      	add	r7, sp, #188	; 0xbc
 8007908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800790a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800790c:	1a9c      	subs	r4, r3, r2
 800790e:	2c00      	cmp	r4, #0
 8007910:	dd1a      	ble.n	8007948 <_svfprintf_r+0x82c>
 8007912:	0039      	movs	r1, r7
 8007914:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007916:	481d      	ldr	r0, [pc, #116]	; (800798c <_svfprintf_r+0x870>)
 8007918:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800791a:	3301      	adds	r3, #1
 800791c:	3108      	adds	r1, #8
 800791e:	6038      	str	r0, [r7, #0]
 8007920:	2c10      	cmp	r4, #16
 8007922:	dd00      	ble.n	8007926 <_svfprintf_r+0x80a>
 8007924:	e2c9      	b.n	8007eba <_svfprintf_r+0xd9e>
 8007926:	18a2      	adds	r2, r4, r2
 8007928:	607c      	str	r4, [r7, #4]
 800792a:	922e      	str	r2, [sp, #184]	; 0xb8
 800792c:	000f      	movs	r7, r1
 800792e:	932d      	str	r3, [sp, #180]	; 0xb4
 8007930:	2b07      	cmp	r3, #7
 8007932:	dd09      	ble.n	8007948 <_svfprintf_r+0x82c>
 8007934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007936:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007938:	aa2c      	add	r2, sp, #176	; 0xb0
 800793a:	f002 f889 	bl	8009a50 <__ssprint_r>
 800793e:	2800      	cmp	r0, #0
 8007940:	d001      	beq.n	8007946 <_svfprintf_r+0x82a>
 8007942:	f000 fdca 	bl	80084da <_svfprintf_r+0x13be>
 8007946:	af2f      	add	r7, sp, #188	; 0xbc
 8007948:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800794a:	9319      	str	r3, [sp, #100]	; 0x64
 800794c:	05f3      	lsls	r3, r6, #23
 800794e:	d500      	bpl.n	8007952 <_svfprintf_r+0x836>
 8007950:	e2ce      	b.n	8007ef0 <_svfprintf_r+0xdd4>
 8007952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007954:	9b08      	ldr	r3, [sp, #32]
 8007956:	4694      	mov	ip, r2
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007960:	4463      	add	r3, ip
 8007962:	932e      	str	r3, [sp, #184]	; 0xb8
 8007964:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007966:	3301      	adds	r3, #1
 8007968:	932d      	str	r3, [sp, #180]	; 0xb4
 800796a:	2b07      	cmp	r3, #7
 800796c:	dd00      	ble.n	8007970 <_svfprintf_r+0x854>
 800796e:	e3a3      	b.n	80080b8 <_svfprintf_r+0xf9c>
 8007970:	3708      	adds	r7, #8
 8007972:	e301      	b.n	8007f78 <_svfprintf_r+0xe5c>
 8007974:	0800b23c 	.word	0x0800b23c
 8007978:	0800b24d 	.word	0x0800b24d
 800797c:	40300000 	.word	0x40300000
 8007980:	3fe00000 	.word	0x3fe00000
 8007984:	fffffbff 	.word	0xfffffbff
 8007988:	0800b260 	.word	0x0800b260
 800798c:	0800b270 	.word	0x0800b270
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	930c      	str	r3, [sp, #48]	; 0x30
 8007994:	e610      	b.n	80075b8 <_svfprintf_r+0x49c>
 8007996:	2306      	movs	r3, #6
 8007998:	e5fd      	b.n	8007596 <_svfprintf_r+0x47a>
 800799a:	930e      	str	r3, [sp, #56]	; 0x38
 800799c:	2300      	movs	r3, #0
 800799e:	e61a      	b.n	80075d6 <_svfprintf_r+0x4ba>
 80079a0:	7010      	strb	r0, [r2, #0]
 80079a2:	e684      	b.n	80076ae <_svfprintf_r+0x592>
 80079a4:	7018      	strb	r0, [r3, #0]
 80079a6:	3301      	adds	r3, #1
 80079a8:	1aca      	subs	r2, r1, r3
 80079aa:	d5fb      	bpl.n	80079a4 <_svfprintf_r+0x888>
 80079ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079ae:	2300      	movs	r3, #0
 80079b0:	3201      	adds	r2, #1
 80079b2:	db01      	blt.n	80079b8 <_svfprintf_r+0x89c>
 80079b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079b6:	3301      	adds	r3, #1
 80079b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ba:	18d3      	adds	r3, r2, r3
 80079bc:	9323      	str	r3, [sp, #140]	; 0x8c
 80079be:	e684      	b.n	80076ca <_svfprintf_r+0x5ae>
 80079c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80079c4:	2030      	movs	r0, #48	; 0x30
 80079c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c8:	1851      	adds	r1, r2, r1
 80079ca:	e7ed      	b.n	80079a8 <_svfprintf_r+0x88c>
 80079cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079ce:	2303      	movs	r3, #3
 80079d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80079d2:	2a46      	cmp	r2, #70	; 0x46
 80079d4:	d006      	beq.n	80079e4 <_svfprintf_r+0x8c8>
 80079d6:	0014      	movs	r4, r2
 80079d8:	3c45      	subs	r4, #69	; 0x45
 80079da:	4262      	negs	r2, r4
 80079dc:	4154      	adcs	r4, r2
 80079de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e0:	3b01      	subs	r3, #1
 80079e2:	1914      	adds	r4, r2, r4
 80079e4:	aa2a      	add	r2, sp, #168	; 0xa8
 80079e6:	9204      	str	r2, [sp, #16]
 80079e8:	aa27      	add	r2, sp, #156	; 0x9c
 80079ea:	9203      	str	r2, [sp, #12]
 80079ec:	aa26      	add	r2, sp, #152	; 0x98
 80079ee:	9202      	str	r2, [sp, #8]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	002a      	movs	r2, r5
 80079f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079f8:	9401      	str	r4, [sp, #4]
 80079fa:	f001 f87f 	bl	8008afc <_dtoa_r>
 80079fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a00:	9008      	str	r0, [sp, #32]
 8007a02:	2b47      	cmp	r3, #71	; 0x47
 8007a04:	d103      	bne.n	8007a0e <_svfprintf_r+0x8f2>
 8007a06:	07f3      	lsls	r3, r6, #31
 8007a08:	d401      	bmi.n	8007a0e <_svfprintf_r+0x8f2>
 8007a0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007a0c:	e65e      	b.n	80076cc <_svfprintf_r+0x5b0>
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	191b      	adds	r3, r3, r4
 8007a12:	9311      	str	r3, [sp, #68]	; 0x44
 8007a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a16:	2b46      	cmp	r3, #70	; 0x46
 8007a18:	d112      	bne.n	8007a40 <_svfprintf_r+0x924>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b30      	cmp	r3, #48	; 0x30
 8007a20:	d10a      	bne.n	8007a38 <_svfprintf_r+0x91c>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	0028      	movs	r0, r5
 8007a28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a2a:	f7f8 fd0d 	bl	8000448 <__aeabi_dcmpeq>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d102      	bne.n	8007a38 <_svfprintf_r+0x91c>
 8007a32:	2301      	movs	r3, #1
 8007a34:	1b1b      	subs	r3, r3, r4
 8007a36:	9326      	str	r3, [sp, #152]	; 0x98
 8007a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	9311      	str	r3, [sp, #68]	; 0x44
 8007a40:	2200      	movs	r2, #0
 8007a42:	2300      	movs	r3, #0
 8007a44:	0028      	movs	r0, r5
 8007a46:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a48:	f7f8 fcfe 	bl	8000448 <__aeabi_dcmpeq>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d001      	beq.n	8007a54 <_svfprintf_r+0x938>
 8007a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a52:	932a      	str	r3, [sp, #168]	; 0xa8
 8007a54:	2230      	movs	r2, #48	; 0x30
 8007a56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007a58:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	d9d5      	bls.n	8007a0a <_svfprintf_r+0x8ee>
 8007a5e:	1c59      	adds	r1, r3, #1
 8007a60:	912a      	str	r1, [sp, #168]	; 0xa8
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e7f7      	b.n	8007a56 <_svfprintf_r+0x93a>
 8007a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a68:	2b46      	cmp	r3, #70	; 0x46
 8007a6a:	d000      	beq.n	8007a6e <_svfprintf_r+0x952>
 8007a6c:	e63f      	b.n	80076ee <_svfprintf_r+0x5d2>
 8007a6e:	2201      	movs	r2, #1
 8007a70:	0033      	movs	r3, r6
 8007a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a74:	4013      	ands	r3, r2
 8007a76:	430b      	orrs	r3, r1
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	dd2c      	ble.n	8007ad6 <_svfprintf_r+0x9ba>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d046      	beq.n	8007b0e <_svfprintf_r+0x9f2>
 8007a80:	000a      	movs	r2, r1
 8007a82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a84:	18eb      	adds	r3, r5, r3
 8007a86:	18d3      	adds	r3, r2, r3
 8007a88:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8a:	2366      	movs	r3, #102	; 0x66
 8007a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a8e:	e030      	b.n	8007af2 <_svfprintf_r+0x9d6>
 8007a90:	781c      	ldrb	r4, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	7014      	strb	r4, [r2, #0]
 8007a96:	3201      	adds	r2, #1
 8007a98:	e668      	b.n	800776c <_svfprintf_r+0x650>
 8007a9a:	222a      	movs	r2, #42	; 0x2a
 8007a9c:	ab1e      	add	r3, sp, #120	; 0x78
 8007a9e:	18d2      	adds	r2, r2, r3
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d104      	bne.n	8007aae <_svfprintf_r+0x992>
 8007aa4:	2330      	movs	r3, #48	; 0x30
 8007aa6:	222b      	movs	r2, #43	; 0x2b
 8007aa8:	708b      	strb	r3, [r1, #2]
 8007aaa:	ab1e      	add	r3, sp, #120	; 0x78
 8007aac:	18d2      	adds	r2, r2, r3
 8007aae:	3430      	adds	r4, #48	; 0x30
 8007ab0:	1c53      	adds	r3, r2, #1
 8007ab2:	7014      	strb	r4, [r2, #0]
 8007ab4:	e669      	b.n	800778a <_svfprintf_r+0x66e>
 8007ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab8:	42ab      	cmp	r3, r5
 8007aba:	dd12      	ble.n	8007ae2 <_svfprintf_r+0x9c6>
 8007abc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ac0:	4694      	mov	ip, r2
 8007ac2:	4463      	add	r3, ip
 8007ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac6:	2367      	movs	r3, #103	; 0x67
 8007ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	dc11      	bgt.n	8007af2 <_svfprintf_r+0x9d6>
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	1b5b      	subs	r3, r3, r5
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	e00c      	b.n	8007af0 <_svfprintf_r+0x9d4>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01b      	beq.n	8007b12 <_svfprintf_r+0x9f6>
 8007ada:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ade:	3301      	adds	r3, #1
 8007ae0:	e7d1      	b.n	8007a86 <_svfprintf_r+0x96a>
 8007ae2:	2367      	movs	r3, #103	; 0x67
 8007ae4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ae8:	07f3      	lsls	r3, r6, #31
 8007aea:	d502      	bpl.n	8007af2 <_svfprintf_r+0x9d6>
 8007aec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007aee:	18eb      	adds	r3, r5, r3
 8007af0:	9309      	str	r3, [sp, #36]	; 0x24
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	0032      	movs	r2, r6
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	401a      	ands	r2, r3
 8007afa:	9211      	str	r2, [sp, #68]	; 0x44
 8007afc:	2200      	movs	r2, #0
 8007afe:	9210      	str	r2, [sp, #64]	; 0x40
 8007b00:	421e      	tst	r6, r3
 8007b02:	d100      	bne.n	8007b06 <_svfprintf_r+0x9ea>
 8007b04:	e65d      	b.n	80077c2 <_svfprintf_r+0x6a6>
 8007b06:	4295      	cmp	r5, r2
 8007b08:	dc25      	bgt.n	8007b56 <_svfprintf_r+0xa3a>
 8007b0a:	9211      	str	r2, [sp, #68]	; 0x44
 8007b0c:	e659      	b.n	80077c2 <_svfprintf_r+0x6a6>
 8007b0e:	9509      	str	r5, [sp, #36]	; 0x24
 8007b10:	e7bb      	b.n	8007a8a <_svfprintf_r+0x96e>
 8007b12:	2366      	movs	r3, #102	; 0x66
 8007b14:	9209      	str	r2, [sp, #36]	; 0x24
 8007b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b18:	e7eb      	b.n	8007af2 <_svfprintf_r+0x9d6>
 8007b1a:	42ab      	cmp	r3, r5
 8007b1c:	da0e      	bge.n	8007b3c <_svfprintf_r+0xa20>
 8007b1e:	1aed      	subs	r5, r5, r3
 8007b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d012      	beq.n	8007b4e <_svfprintf_r+0xa32>
 8007b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9311      	str	r3, [sp, #68]	; 0x44
 8007b2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b30:	3301      	adds	r3, #1
 8007b32:	9312      	str	r3, [sp, #72]	; 0x48
 8007b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2bff      	cmp	r3, #255	; 0xff
 8007b3a:	d1ee      	bne.n	8007b1a <_svfprintf_r+0x9fe>
 8007b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b40:	189b      	adds	r3, r3, r2
 8007b42:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b44:	4353      	muls	r3, r2
 8007b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b48:	189b      	adds	r3, r3, r2
 8007b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4c:	e639      	b.n	80077c2 <_svfprintf_r+0x6a6>
 8007b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b50:	3301      	adds	r3, #1
 8007b52:	9310      	str	r3, [sp, #64]	; 0x40
 8007b54:	e7ee      	b.n	8007b34 <_svfprintf_r+0xa18>
 8007b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b58:	9311      	str	r3, [sp, #68]	; 0x44
 8007b5a:	e7eb      	b.n	8007b34 <_svfprintf_r+0xa18>
 8007b5c:	1d23      	adds	r3, r4, #4
 8007b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b60:	06b3      	lsls	r3, r6, #26
 8007b62:	d509      	bpl.n	8007b78 <_svfprintf_r+0xa5c>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	17d2      	asrs	r2, r2, #31
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007b72:	9308      	str	r3, [sp, #32]
 8007b74:	f7ff fb0d 	bl	8007192 <_svfprintf_r+0x76>
 8007b78:	06f3      	lsls	r3, r6, #27
 8007b7a:	d503      	bpl.n	8007b84 <_svfprintf_r+0xa68>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e7f4      	b.n	8007b6e <_svfprintf_r+0xa52>
 8007b84:	0673      	lsls	r3, r6, #25
 8007b86:	d503      	bpl.n	8007b90 <_svfprintf_r+0xa74>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	e7ee      	b.n	8007b6e <_svfprintf_r+0xa52>
 8007b90:	05b6      	lsls	r6, r6, #22
 8007b92:	d5f3      	bpl.n	8007b7c <_svfprintf_r+0xa60>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	e7e8      	b.n	8007b6e <_svfprintf_r+0xa52>
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	431e      	orrs	r6, r3
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	0030      	movs	r0, r6
 8007ba4:	4018      	ands	r0, r3
 8007ba6:	421e      	tst	r6, r3
 8007ba8:	d00f      	beq.n	8007bca <_svfprintf_r+0xaae>
 8007baa:	3b19      	subs	r3, #25
 8007bac:	3407      	adds	r4, #7
 8007bae:	439c      	bics	r4, r3
 8007bb0:	0022      	movs	r2, r4
 8007bb2:	ca18      	ldmia	r2!, {r3, r4}
 8007bb4:	9306      	str	r3, [sp, #24]
 8007bb6:	9407      	str	r4, [sp, #28]
 8007bb8:	920d      	str	r2, [sp, #52]	; 0x34
 8007bba:	4bc9      	ldr	r3, [pc, #804]	; (8007ee0 <_svfprintf_r+0xdc4>)
 8007bbc:	401e      	ands	r6, r3
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	221b      	movs	r2, #27
 8007bc2:	a91e      	add	r1, sp, #120	; 0x78
 8007bc4:	1852      	adds	r2, r2, r1
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e430      	b.n	800742c <_svfprintf_r+0x310>
 8007bca:	0022      	movs	r2, r4
 8007bcc:	ca08      	ldmia	r2!, {r3}
 8007bce:	0031      	movs	r1, r6
 8007bd0:	920d      	str	r2, [sp, #52]	; 0x34
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	4011      	ands	r1, r2
 8007bd6:	4216      	tst	r6, r2
 8007bd8:	d002      	beq.n	8007be0 <_svfprintf_r+0xac4>
 8007bda:	9306      	str	r3, [sp, #24]
 8007bdc:	9007      	str	r0, [sp, #28]
 8007bde:	e7ec      	b.n	8007bba <_svfprintf_r+0xa9e>
 8007be0:	2240      	movs	r2, #64	; 0x40
 8007be2:	0030      	movs	r0, r6
 8007be4:	4010      	ands	r0, r2
 8007be6:	4216      	tst	r6, r2
 8007be8:	d003      	beq.n	8007bf2 <_svfprintf_r+0xad6>
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	9306      	str	r3, [sp, #24]
 8007bee:	9107      	str	r1, [sp, #28]
 8007bf0:	e7e3      	b.n	8007bba <_svfprintf_r+0xa9e>
 8007bf2:	2280      	movs	r2, #128	; 0x80
 8007bf4:	0031      	movs	r1, r6
 8007bf6:	0092      	lsls	r2, r2, #2
 8007bf8:	4011      	ands	r1, r2
 8007bfa:	4216      	tst	r6, r2
 8007bfc:	d0f6      	beq.n	8007bec <_svfprintf_r+0xad0>
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	e7eb      	b.n	8007bda <_svfprintf_r+0xabe>
 8007c02:	0023      	movs	r3, r4
 8007c04:	cb04      	ldmia	r3!, {r2}
 8007c06:	49b7      	ldr	r1, [pc, #732]	; (8007ee4 <_svfprintf_r+0xdc8>)
 8007c08:	9206      	str	r2, [sp, #24]
 8007c0a:	aa25      	add	r2, sp, #148	; 0x94
 8007c0c:	8011      	strh	r1, [r2, #0]
 8007c0e:	4ab6      	ldr	r2, [pc, #728]	; (8007ee8 <_svfprintf_r+0xdcc>)
 8007c10:	930d      	str	r3, [sp, #52]	; 0x34
 8007c12:	2300      	movs	r3, #0
 8007c14:	921f      	str	r2, [sp, #124]	; 0x7c
 8007c16:	2278      	movs	r2, #120	; 0x78
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	431e      	orrs	r6, r3
 8007c1e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007c20:	e7ce      	b.n	8007bc0 <_svfprintf_r+0xaa4>
 8007c22:	0023      	movs	r3, r4
 8007c24:	cb04      	ldmia	r3!, {r2}
 8007c26:	2400      	movs	r4, #0
 8007c28:	930d      	str	r3, [sp, #52]	; 0x34
 8007c2a:	231b      	movs	r3, #27
 8007c2c:	9208      	str	r2, [sp, #32]
 8007c2e:	aa1e      	add	r2, sp, #120	; 0x78
 8007c30:	189b      	adds	r3, r3, r2
 8007c32:	701c      	strb	r4, [r3, #0]
 8007c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c36:	3301      	adds	r3, #1
 8007c38:	d00e      	beq.n	8007c58 <_svfprintf_r+0xb3c>
 8007c3a:	0021      	movs	r1, r4
 8007c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c3e:	9808      	ldr	r0, [sp, #32]
 8007c40:	f000 fde2 	bl	8008808 <memchr>
 8007c44:	900c      	str	r0, [sp, #48]	; 0x30
 8007c46:	42a0      	cmp	r0, r4
 8007c48:	d100      	bne.n	8007c4c <_svfprintf_r+0xb30>
 8007c4a:	e10d      	b.n	8007e68 <_svfprintf_r+0xd4c>
 8007c4c:	9a08      	ldr	r2, [sp, #32]
 8007c4e:	1a83      	subs	r3, r0, r2
 8007c50:	9309      	str	r3, [sp, #36]	; 0x24
 8007c52:	0023      	movs	r3, r4
 8007c54:	940c      	str	r4, [sp, #48]	; 0x30
 8007c56:	e44e      	b.n	80074f6 <_svfprintf_r+0x3da>
 8007c58:	9808      	ldr	r0, [sp, #32]
 8007c5a:	f7f8 fa53 	bl	8000104 <strlen>
 8007c5e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c60:	e7f7      	b.n	8007c52 <_svfprintf_r+0xb36>
 8007c62:	2310      	movs	r3, #16
 8007c64:	431e      	orrs	r6, r3
 8007c66:	2320      	movs	r3, #32
 8007c68:	0030      	movs	r0, r6
 8007c6a:	4018      	ands	r0, r3
 8007c6c:	421e      	tst	r6, r3
 8007c6e:	d009      	beq.n	8007c84 <_svfprintf_r+0xb68>
 8007c70:	3b19      	subs	r3, #25
 8007c72:	3407      	adds	r4, #7
 8007c74:	439c      	bics	r4, r3
 8007c76:	0022      	movs	r2, r4
 8007c78:	ca18      	ldmia	r2!, {r3, r4}
 8007c7a:	9306      	str	r3, [sp, #24]
 8007c7c:	9407      	str	r4, [sp, #28]
 8007c7e:	920d      	str	r2, [sp, #52]	; 0x34
 8007c80:	2301      	movs	r3, #1
 8007c82:	e79d      	b.n	8007bc0 <_svfprintf_r+0xaa4>
 8007c84:	0023      	movs	r3, r4
 8007c86:	cb04      	ldmia	r3!, {r2}
 8007c88:	0031      	movs	r1, r6
 8007c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	4019      	ands	r1, r3
 8007c90:	421e      	tst	r6, r3
 8007c92:	d003      	beq.n	8007c9c <_svfprintf_r+0xb80>
 8007c94:	9206      	str	r2, [sp, #24]
 8007c96:	9007      	str	r0, [sp, #28]
 8007c98:	3b0f      	subs	r3, #15
 8007c9a:	e791      	b.n	8007bc0 <_svfprintf_r+0xaa4>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	0030      	movs	r0, r6
 8007ca0:	4018      	ands	r0, r3
 8007ca2:	421e      	tst	r6, r3
 8007ca4:	d003      	beq.n	8007cae <_svfprintf_r+0xb92>
 8007ca6:	b293      	uxth	r3, r2
 8007ca8:	9306      	str	r3, [sp, #24]
 8007caa:	9107      	str	r1, [sp, #28]
 8007cac:	e7e8      	b.n	8007c80 <_svfprintf_r+0xb64>
 8007cae:	2380      	movs	r3, #128	; 0x80
 8007cb0:	0031      	movs	r1, r6
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4019      	ands	r1, r3
 8007cb6:	421e      	tst	r6, r3
 8007cb8:	d003      	beq.n	8007cc2 <_svfprintf_r+0xba6>
 8007cba:	b2d3      	uxtb	r3, r2
 8007cbc:	9306      	str	r3, [sp, #24]
 8007cbe:	9007      	str	r0, [sp, #28]
 8007cc0:	e7de      	b.n	8007c80 <_svfprintf_r+0xb64>
 8007cc2:	9206      	str	r2, [sp, #24]
 8007cc4:	e7f1      	b.n	8007caa <_svfprintf_r+0xb8e>
 8007cc6:	4b89      	ldr	r3, [pc, #548]	; (8007eec <_svfprintf_r+0xdd0>)
 8007cc8:	0030      	movs	r0, r6
 8007cca:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ccc:	2320      	movs	r3, #32
 8007cce:	4018      	ands	r0, r3
 8007cd0:	421e      	tst	r6, r3
 8007cd2:	d01a      	beq.n	8007d0a <_svfprintf_r+0xbee>
 8007cd4:	3b19      	subs	r3, #25
 8007cd6:	3407      	adds	r4, #7
 8007cd8:	439c      	bics	r4, r3
 8007cda:	0022      	movs	r2, r4
 8007cdc:	ca18      	ldmia	r2!, {r3, r4}
 8007cde:	9306      	str	r3, [sp, #24]
 8007ce0:	9407      	str	r4, [sp, #28]
 8007ce2:	920d      	str	r2, [sp, #52]	; 0x34
 8007ce4:	07f3      	lsls	r3, r6, #31
 8007ce6:	d50a      	bpl.n	8007cfe <_svfprintf_r+0xbe2>
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	9a07      	ldr	r2, [sp, #28]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	d006      	beq.n	8007cfe <_svfprintf_r+0xbe2>
 8007cf0:	2230      	movs	r2, #48	; 0x30
 8007cf2:	ab25      	add	r3, sp, #148	; 0x94
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cf8:	705a      	strb	r2, [r3, #1]
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	431e      	orrs	r6, r3
 8007cfe:	4b78      	ldr	r3, [pc, #480]	; (8007ee0 <_svfprintf_r+0xdc4>)
 8007d00:	401e      	ands	r6, r3
 8007d02:	2302      	movs	r3, #2
 8007d04:	e75c      	b.n	8007bc0 <_svfprintf_r+0xaa4>
 8007d06:	4b78      	ldr	r3, [pc, #480]	; (8007ee8 <_svfprintf_r+0xdcc>)
 8007d08:	e7de      	b.n	8007cc8 <_svfprintf_r+0xbac>
 8007d0a:	0023      	movs	r3, r4
 8007d0c:	cb04      	ldmia	r3!, {r2}
 8007d0e:	0031      	movs	r1, r6
 8007d10:	930d      	str	r3, [sp, #52]	; 0x34
 8007d12:	2310      	movs	r3, #16
 8007d14:	4019      	ands	r1, r3
 8007d16:	421e      	tst	r6, r3
 8007d18:	d002      	beq.n	8007d20 <_svfprintf_r+0xc04>
 8007d1a:	9206      	str	r2, [sp, #24]
 8007d1c:	9007      	str	r0, [sp, #28]
 8007d1e:	e7e1      	b.n	8007ce4 <_svfprintf_r+0xbc8>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	0030      	movs	r0, r6
 8007d24:	4018      	ands	r0, r3
 8007d26:	421e      	tst	r6, r3
 8007d28:	d003      	beq.n	8007d32 <_svfprintf_r+0xc16>
 8007d2a:	b293      	uxth	r3, r2
 8007d2c:	9306      	str	r3, [sp, #24]
 8007d2e:	9107      	str	r1, [sp, #28]
 8007d30:	e7d8      	b.n	8007ce4 <_svfprintf_r+0xbc8>
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	0031      	movs	r1, r6
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4019      	ands	r1, r3
 8007d3a:	421e      	tst	r6, r3
 8007d3c:	d002      	beq.n	8007d44 <_svfprintf_r+0xc28>
 8007d3e:	b2d3      	uxtb	r3, r2
 8007d40:	9306      	str	r3, [sp, #24]
 8007d42:	e7eb      	b.n	8007d1c <_svfprintf_r+0xc00>
 8007d44:	9206      	str	r2, [sp, #24]
 8007d46:	e7f2      	b.n	8007d2e <_svfprintf_r+0xc12>
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <_svfprintf_r+0xc48>
 8007d4e:	9b06      	ldr	r3, [sp, #24]
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d807      	bhi.n	8007d64 <_svfprintf_r+0xc48>
 8007d54:	23e7      	movs	r3, #231	; 0xe7
 8007d56:	aa1e      	add	r2, sp, #120	; 0x78
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	9a06      	ldr	r2, [sp, #24]
 8007d5c:	3230      	adds	r2, #48	; 0x30
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	f000 fc18 	bl	8008594 <_svfprintf_r+0x1478>
 8007d64:	2680      	movs	r6, #128	; 0x80
 8007d66:	2300      	movs	r3, #0
 8007d68:	00f6      	lsls	r6, r6, #3
 8007d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d6c:	ad58      	add	r5, sp, #352	; 0x160
 8007d6e:	4026      	ands	r6, r4
 8007d70:	220a      	movs	r2, #10
 8007d72:	9806      	ldr	r0, [sp, #24]
 8007d74:	9907      	ldr	r1, [sp, #28]
 8007d76:	2300      	movs	r3, #0
 8007d78:	f7f8 fb94 	bl	80004a4 <__aeabi_uldivmod>
 8007d7c:	1e6b      	subs	r3, r5, #1
 8007d7e:	3230      	adds	r2, #48	; 0x30
 8007d80:	9308      	str	r3, [sp, #32]
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d86:	900c      	str	r0, [sp, #48]	; 0x30
 8007d88:	3301      	adds	r3, #1
 8007d8a:	9110      	str	r1, [sp, #64]	; 0x40
 8007d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d01d      	beq.n	8007dce <_svfprintf_r+0xcb2>
 8007d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d118      	bne.n	8007dce <_svfprintf_r+0xcb2>
 8007d9c:	2aff      	cmp	r2, #255	; 0xff
 8007d9e:	d016      	beq.n	8007dce <_svfprintf_r+0xcb2>
 8007da0:	9b07      	ldr	r3, [sp, #28]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d102      	bne.n	8007dac <_svfprintf_r+0xc90>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	2b09      	cmp	r3, #9
 8007daa:	d910      	bls.n	8007dce <_svfprintf_r+0xcb2>
 8007dac:	9b08      	ldr	r3, [sp, #32]
 8007dae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007db0:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007db2:	1a9b      	subs	r3, r3, r2
 8007db4:	0018      	movs	r0, r3
 8007db6:	9308      	str	r3, [sp, #32]
 8007db8:	f7fe fc58 	bl	800666c <strncpy>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dc0:	920e      	str	r2, [sp, #56]	; 0x38
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	4193      	sbcs	r3, r2
 8007dc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dca:	18d3      	adds	r3, r2, r3
 8007dcc:	9312      	str	r3, [sp, #72]	; 0x48
 8007dce:	9b07      	ldr	r3, [sp, #28]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10f      	bne.n	8007df4 <_svfprintf_r+0xcd8>
 8007dd4:	9b06      	ldr	r3, [sp, #24]
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	d80c      	bhi.n	8007df4 <_svfprintf_r+0xcd8>
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	9a08      	ldr	r2, [sp, #32]
 8007dde:	9319      	str	r3, [sp, #100]	; 0x64
 8007de0:	ab58      	add	r3, sp, #352	; 0x160
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	9309      	str	r3, [sp, #36]	; 0x24
 8007de6:	2300      	movs	r3, #0
 8007de8:	0026      	movs	r6, r4
 8007dea:	930c      	str	r3, [sp, #48]	; 0x30
 8007dec:	001d      	movs	r5, r3
 8007dee:	9310      	str	r3, [sp, #64]	; 0x40
 8007df0:	9311      	str	r3, [sp, #68]	; 0x44
 8007df2:	e4f2      	b.n	80077da <_svfprintf_r+0x6be>
 8007df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007df6:	9d08      	ldr	r5, [sp, #32]
 8007df8:	9306      	str	r3, [sp, #24]
 8007dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dfc:	9307      	str	r3, [sp, #28]
 8007dfe:	e7b7      	b.n	8007d70 <_svfprintf_r+0xc54>
 8007e00:	200f      	movs	r0, #15
 8007e02:	ab58      	add	r3, sp, #352	; 0x160
 8007e04:	9308      	str	r3, [sp, #32]
 8007e06:	9b08      	ldr	r3, [sp, #32]
 8007e08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	9308      	str	r3, [sp, #32]
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	4003      	ands	r3, r0
 8007e12:	5cd3      	ldrb	r3, [r2, r3]
 8007e14:	9a08      	ldr	r2, [sp, #32]
 8007e16:	7013      	strb	r3, [r2, #0]
 8007e18:	9b07      	ldr	r3, [sp, #28]
 8007e1a:	0719      	lsls	r1, r3, #28
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	091a      	lsrs	r2, r3, #4
 8007e20:	9b07      	ldr	r3, [sp, #28]
 8007e22:	4311      	orrs	r1, r2
 8007e24:	091b      	lsrs	r3, r3, #4
 8007e26:	9307      	str	r3, [sp, #28]
 8007e28:	000b      	movs	r3, r1
 8007e2a:	9a07      	ldr	r2, [sp, #28]
 8007e2c:	9106      	str	r1, [sp, #24]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	d1e9      	bne.n	8007e06 <_svfprintf_r+0xcea>
 8007e32:	e7d2      	b.n	8007dda <_svfprintf_r+0xcbe>
 8007e34:	aa58      	add	r2, sp, #352	; 0x160
 8007e36:	9208      	str	r2, [sp, #32]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1ce      	bne.n	8007dda <_svfprintf_r+0xcbe>
 8007e3c:	07f6      	lsls	r6, r6, #31
 8007e3e:	d5cc      	bpl.n	8007dda <_svfprintf_r+0xcbe>
 8007e40:	aa1e      	add	r2, sp, #120	; 0x78
 8007e42:	33e7      	adds	r3, #231	; 0xe7
 8007e44:	189b      	adds	r3, r3, r2
 8007e46:	2230      	movs	r2, #48	; 0x30
 8007e48:	e789      	b.n	8007d5e <_svfprintf_r+0xc42>
 8007e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d100      	bne.n	8007e52 <_svfprintf_r+0xd36>
 8007e50:	e364      	b.n	800851c <_svfprintf_r+0x1400>
 8007e52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e54:	211b      	movs	r1, #27
 8007e56:	ab3f      	add	r3, sp, #252	; 0xfc
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	a81e      	add	r0, sp, #120	; 0x78
 8007e5e:	1809      	adds	r1, r1, r0
 8007e60:	700a      	strb	r2, [r1, #0]
 8007e62:	940d      	str	r4, [sp, #52]	; 0x34
 8007e64:	f7ff fabd 	bl	80073e2 <_svfprintf_r+0x2c6>
 8007e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e6a:	f7ff fb44 	bl	80074f6 <_svfprintf_r+0x3da>
 8007e6e:	2010      	movs	r0, #16
 8007e70:	1812      	adds	r2, r2, r0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	922e      	str	r2, [sp, #184]	; 0xb8
 8007e76:	932d      	str	r3, [sp, #180]	; 0xb4
 8007e78:	2b07      	cmp	r3, #7
 8007e7a:	dd08      	ble.n	8007e8e <_svfprintf_r+0xd72>
 8007e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e80:	aa2c      	add	r2, sp, #176	; 0xb0
 8007e82:	f001 fde5 	bl	8009a50 <__ssprint_r>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d000      	beq.n	8007e8c <_svfprintf_r+0xd70>
 8007e8a:	e326      	b.n	80084da <_svfprintf_r+0x13be>
 8007e8c:	a92f      	add	r1, sp, #188	; 0xbc
 8007e8e:	000f      	movs	r7, r1
 8007e90:	3c10      	subs	r4, #16
 8007e92:	e4c5      	b.n	8007820 <_svfprintf_r+0x704>
 8007e94:	2010      	movs	r0, #16
 8007e96:	1812      	adds	r2, r2, r0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	922e      	str	r2, [sp, #184]	; 0xb8
 8007e9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8007e9e:	2b07      	cmp	r3, #7
 8007ea0:	dd08      	ble.n	8007eb4 <_svfprintf_r+0xd98>
 8007ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ea6:	aa2c      	add	r2, sp, #176	; 0xb0
 8007ea8:	f001 fdd2 	bl	8009a50 <__ssprint_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d000      	beq.n	8007eb2 <_svfprintf_r+0xd96>
 8007eb0:	e313      	b.n	80084da <_svfprintf_r+0x13be>
 8007eb2:	a92f      	add	r1, sp, #188	; 0xbc
 8007eb4:	000f      	movs	r7, r1
 8007eb6:	3c10      	subs	r4, #16
 8007eb8:	e50b      	b.n	80078d2 <_svfprintf_r+0x7b6>
 8007eba:	2010      	movs	r0, #16
 8007ebc:	1812      	adds	r2, r2, r0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	922e      	str	r2, [sp, #184]	; 0xb8
 8007ec2:	932d      	str	r3, [sp, #180]	; 0xb4
 8007ec4:	2b07      	cmp	r3, #7
 8007ec6:	dd08      	ble.n	8007eda <_svfprintf_r+0xdbe>
 8007ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ecc:	aa2c      	add	r2, sp, #176	; 0xb0
 8007ece:	f001 fdbf 	bl	8009a50 <__ssprint_r>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d000      	beq.n	8007ed8 <_svfprintf_r+0xdbc>
 8007ed6:	e300      	b.n	80084da <_svfprintf_r+0x13be>
 8007ed8:	a92f      	add	r1, sp, #188	; 0xbc
 8007eda:	000f      	movs	r7, r1
 8007edc:	3c10      	subs	r4, #16
 8007ede:	e518      	b.n	8007912 <_svfprintf_r+0x7f6>
 8007ee0:	fffffbff 	.word	0xfffffbff
 8007ee4:	00007830 	.word	0x00007830
 8007ee8:	0800b23c 	.word	0x0800b23c
 8007eec:	0800b24d 	.word	0x0800b24d
 8007ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef2:	2b65      	cmp	r3, #101	; 0x65
 8007ef4:	dc00      	bgt.n	8007ef8 <_svfprintf_r+0xddc>
 8007ef6:	e241      	b.n	800837c <_svfprintf_r+0x1260>
 8007ef8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007efa:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007efc:	2200      	movs	r2, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	f7f8 faa2 	bl	8000448 <__aeabi_dcmpeq>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d077      	beq.n	8007ff8 <_svfprintf_r+0xedc>
 8007f08:	4bca      	ldr	r3, [pc, #808]	; (8008234 <_svfprintf_r+0x1118>)
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	607b      	str	r3, [r7, #4]
 8007f10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f12:	3708      	adds	r7, #8
 8007f14:	3301      	adds	r3, #1
 8007f16:	932e      	str	r3, [sp, #184]	; 0xb8
 8007f18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	932d      	str	r3, [sp, #180]	; 0xb4
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	dd08      	ble.n	8007f34 <_svfprintf_r+0xe18>
 8007f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f26:	aa2c      	add	r2, sp, #176	; 0xb0
 8007f28:	f001 fd92 	bl	8009a50 <__ssprint_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d000      	beq.n	8007f32 <_svfprintf_r+0xe16>
 8007f30:	e2d3      	b.n	80084da <_svfprintf_r+0x13be>
 8007f32:	af2f      	add	r7, sp, #188	; 0xbc
 8007f34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	db01      	blt.n	8007f40 <_svfprintf_r+0xe24>
 8007f3c:	07f3      	lsls	r3, r6, #31
 8007f3e:	d51b      	bpl.n	8007f78 <_svfprintf_r+0xe5c>
 8007f40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007f42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	189b      	adds	r3, r3, r2
 8007f50:	932e      	str	r3, [sp, #184]	; 0xb8
 8007f52:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007f54:	3301      	adds	r3, #1
 8007f56:	932d      	str	r3, [sp, #180]	; 0xb4
 8007f58:	2b07      	cmp	r3, #7
 8007f5a:	dd08      	ble.n	8007f6e <_svfprintf_r+0xe52>
 8007f5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f60:	aa2c      	add	r2, sp, #176	; 0xb0
 8007f62:	f001 fd75 	bl	8009a50 <__ssprint_r>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d000      	beq.n	8007f6c <_svfprintf_r+0xe50>
 8007f6a:	e2b6      	b.n	80084da <_svfprintf_r+0x13be>
 8007f6c:	af2f      	add	r7, sp, #188	; 0xbc
 8007f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f70:	2510      	movs	r5, #16
 8007f72:	1e5c      	subs	r4, r3, #1
 8007f74:	2c00      	cmp	r4, #0
 8007f76:	dc2e      	bgt.n	8007fd6 <_svfprintf_r+0xeba>
 8007f78:	0776      	lsls	r6, r6, #29
 8007f7a:	d500      	bpl.n	8007f7e <_svfprintf_r+0xe62>
 8007f7c:	e290      	b.n	80084a0 <_svfprintf_r+0x1384>
 8007f7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f82:	4293      	cmp	r3, r2
 8007f84:	da00      	bge.n	8007f88 <_svfprintf_r+0xe6c>
 8007f86:	0013      	movs	r3, r2
 8007f88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f8a:	18d3      	adds	r3, r2, r3
 8007f8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <_svfprintf_r+0xe88>
 8007f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f98:	aa2c      	add	r2, sp, #176	; 0xb0
 8007f9a:	f001 fd59 	bl	8009a50 <__ssprint_r>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d000      	beq.n	8007fa4 <_svfprintf_r+0xe88>
 8007fa2:	e29a      	b.n	80084da <_svfprintf_r+0x13be>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	932d      	str	r3, [sp, #180]	; 0xb4
 8007fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d000      	beq.n	8007fb0 <_svfprintf_r+0xe94>
 8007fae:	e2b0      	b.n	8008512 <_svfprintf_r+0x13f6>
 8007fb0:	af2f      	add	r7, sp, #188	; 0xbc
 8007fb2:	e5dc      	b.n	8007b6e <_svfprintf_r+0xa52>
 8007fb4:	3210      	adds	r2, #16
 8007fb6:	607d      	str	r5, [r7, #4]
 8007fb8:	922e      	str	r2, [sp, #184]	; 0xb8
 8007fba:	932d      	str	r3, [sp, #180]	; 0xb4
 8007fbc:	2b07      	cmp	r3, #7
 8007fbe:	dd08      	ble.n	8007fd2 <_svfprintf_r+0xeb6>
 8007fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fc4:	aa2c      	add	r2, sp, #176	; 0xb0
 8007fc6:	f001 fd43 	bl	8009a50 <__ssprint_r>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d000      	beq.n	8007fd0 <_svfprintf_r+0xeb4>
 8007fce:	e284      	b.n	80084da <_svfprintf_r+0x13be>
 8007fd0:	a92f      	add	r1, sp, #188	; 0xbc
 8007fd2:	000f      	movs	r7, r1
 8007fd4:	3c10      	subs	r4, #16
 8007fd6:	0039      	movs	r1, r7
 8007fd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007fda:	4897      	ldr	r0, [pc, #604]	; (8008238 <_svfprintf_r+0x111c>)
 8007fdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007fde:	3301      	adds	r3, #1
 8007fe0:	3108      	adds	r1, #8
 8007fe2:	6038      	str	r0, [r7, #0]
 8007fe4:	2c10      	cmp	r4, #16
 8007fe6:	dce5      	bgt.n	8007fb4 <_svfprintf_r+0xe98>
 8007fe8:	607c      	str	r4, [r7, #4]
 8007fea:	18a4      	adds	r4, r4, r2
 8007fec:	942e      	str	r4, [sp, #184]	; 0xb8
 8007fee:	000f      	movs	r7, r1
 8007ff0:	932d      	str	r3, [sp, #180]	; 0xb4
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	ddc0      	ble.n	8007f78 <_svfprintf_r+0xe5c>
 8007ff6:	e05f      	b.n	80080b8 <_svfprintf_r+0xf9c>
 8007ff8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc78      	bgt.n	80080f0 <_svfprintf_r+0xfd4>
 8007ffe:	4b8d      	ldr	r3, [pc, #564]	; (8008234 <_svfprintf_r+0x1118>)
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	2301      	movs	r3, #1
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008008:	3708      	adds	r7, #8
 800800a:	3301      	adds	r3, #1
 800800c:	932e      	str	r3, [sp, #184]	; 0xb8
 800800e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008010:	3301      	adds	r3, #1
 8008012:	932d      	str	r3, [sp, #180]	; 0xb4
 8008014:	2b07      	cmp	r3, #7
 8008016:	dd08      	ble.n	800802a <_svfprintf_r+0xf0e>
 8008018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800801a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800801c:	aa2c      	add	r2, sp, #176	; 0xb0
 800801e:	f001 fd17 	bl	8009a50 <__ssprint_r>
 8008022:	2800      	cmp	r0, #0
 8008024:	d000      	beq.n	8008028 <_svfprintf_r+0xf0c>
 8008026:	e258      	b.n	80084da <_svfprintf_r+0x13be>
 8008028:	af2f      	add	r7, sp, #188	; 0xbc
 800802a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800802c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800802e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008030:	430b      	orrs	r3, r1
 8008032:	2101      	movs	r1, #1
 8008034:	4031      	ands	r1, r6
 8008036:	430b      	orrs	r3, r1
 8008038:	d09e      	beq.n	8007f78 <_svfprintf_r+0xe5c>
 800803a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800803c:	603b      	str	r3, [r7, #0]
 800803e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	189a      	adds	r2, r3, r2
 8008044:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008046:	922e      	str	r2, [sp, #184]	; 0xb8
 8008048:	3301      	adds	r3, #1
 800804a:	932d      	str	r3, [sp, #180]	; 0xb4
 800804c:	3708      	adds	r7, #8
 800804e:	2b07      	cmp	r3, #7
 8008050:	dd08      	ble.n	8008064 <_svfprintf_r+0xf48>
 8008052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008054:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008056:	aa2c      	add	r2, sp, #176	; 0xb0
 8008058:	f001 fcfa 	bl	8009a50 <__ssprint_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	d000      	beq.n	8008062 <_svfprintf_r+0xf46>
 8008060:	e23b      	b.n	80084da <_svfprintf_r+0x13be>
 8008062:	af2f      	add	r7, sp, #188	; 0xbc
 8008064:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8008066:	2c00      	cmp	r4, #0
 8008068:	da19      	bge.n	800809e <_svfprintf_r+0xf82>
 800806a:	0038      	movs	r0, r7
 800806c:	2510      	movs	r5, #16
 800806e:	4264      	negs	r4, r4
 8008070:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008072:	4a71      	ldr	r2, [pc, #452]	; (8008238 <_svfprintf_r+0x111c>)
 8008074:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008076:	3101      	adds	r1, #1
 8008078:	3708      	adds	r7, #8
 800807a:	6002      	str	r2, [r0, #0]
 800807c:	2c10      	cmp	r4, #16
 800807e:	dc25      	bgt.n	80080cc <_svfprintf_r+0xfb0>
 8008080:	6044      	str	r4, [r0, #4]
 8008082:	18e4      	adds	r4, r4, r3
 8008084:	942e      	str	r4, [sp, #184]	; 0xb8
 8008086:	912d      	str	r1, [sp, #180]	; 0xb4
 8008088:	2907      	cmp	r1, #7
 800808a:	dd08      	ble.n	800809e <_svfprintf_r+0xf82>
 800808c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800808e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008090:	aa2c      	add	r2, sp, #176	; 0xb0
 8008092:	f001 fcdd 	bl	8009a50 <__ssprint_r>
 8008096:	2800      	cmp	r0, #0
 8008098:	d000      	beq.n	800809c <_svfprintf_r+0xf80>
 800809a:	e21e      	b.n	80084da <_svfprintf_r+0x13be>
 800809c:	af2f      	add	r7, sp, #188	; 0xbc
 800809e:	9b08      	ldr	r3, [sp, #32]
 80080a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a6:	18d2      	adds	r2, r2, r3
 80080a8:	922e      	str	r2, [sp, #184]	; 0xb8
 80080aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	3201      	adds	r2, #1
 80080b0:	922d      	str	r2, [sp, #180]	; 0xb4
 80080b2:	2a07      	cmp	r2, #7
 80080b4:	dc00      	bgt.n	80080b8 <_svfprintf_r+0xf9c>
 80080b6:	e45b      	b.n	8007970 <_svfprintf_r+0x854>
 80080b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80080be:	f001 fcc7 	bl	8009a50 <__ssprint_r>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d000      	beq.n	80080c8 <_svfprintf_r+0xfac>
 80080c6:	e208      	b.n	80084da <_svfprintf_r+0x13be>
 80080c8:	af2f      	add	r7, sp, #188	; 0xbc
 80080ca:	e755      	b.n	8007f78 <_svfprintf_r+0xe5c>
 80080cc:	3310      	adds	r3, #16
 80080ce:	6045      	str	r5, [r0, #4]
 80080d0:	932e      	str	r3, [sp, #184]	; 0xb8
 80080d2:	912d      	str	r1, [sp, #180]	; 0xb4
 80080d4:	2907      	cmp	r1, #7
 80080d6:	dd08      	ble.n	80080ea <_svfprintf_r+0xfce>
 80080d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80080de:	f001 fcb7 	bl	8009a50 <__ssprint_r>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d000      	beq.n	80080e8 <_svfprintf_r+0xfcc>
 80080e6:	e1f8      	b.n	80084da <_svfprintf_r+0x13be>
 80080e8:	af2f      	add	r7, sp, #188	; 0xbc
 80080ea:	0038      	movs	r0, r7
 80080ec:	3c10      	subs	r4, #16
 80080ee:	e7bf      	b.n	8008070 <_svfprintf_r+0xf54>
 80080f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f2:	002c      	movs	r4, r5
 80080f4:	429d      	cmp	r5, r3
 80080f6:	dd00      	ble.n	80080fa <_svfprintf_r+0xfde>
 80080f8:	001c      	movs	r4, r3
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	dd14      	ble.n	8008128 <_svfprintf_r+0x100c>
 80080fe:	9b08      	ldr	r3, [sp, #32]
 8008100:	607c      	str	r4, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008106:	3708      	adds	r7, #8
 8008108:	18e3      	adds	r3, r4, r3
 800810a:	932e      	str	r3, [sp, #184]	; 0xb8
 800810c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800810e:	3301      	adds	r3, #1
 8008110:	932d      	str	r3, [sp, #180]	; 0xb4
 8008112:	2b07      	cmp	r3, #7
 8008114:	dd08      	ble.n	8008128 <_svfprintf_r+0x100c>
 8008116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008118:	980a      	ldr	r0, [sp, #40]	; 0x28
 800811a:	aa2c      	add	r2, sp, #176	; 0xb0
 800811c:	f001 fc98 	bl	8009a50 <__ssprint_r>
 8008120:	2800      	cmp	r0, #0
 8008122:	d000      	beq.n	8008126 <_svfprintf_r+0x100a>
 8008124:	e1d9      	b.n	80084da <_svfprintf_r+0x13be>
 8008126:	af2f      	add	r7, sp, #188	; 0xbc
 8008128:	43e3      	mvns	r3, r4
 800812a:	17db      	asrs	r3, r3, #31
 800812c:	401c      	ands	r4, r3
 800812e:	1b2c      	subs	r4, r5, r4
 8008130:	2c00      	cmp	r4, #0
 8008132:	dd18      	ble.n	8008166 <_svfprintf_r+0x104a>
 8008134:	0039      	movs	r1, r7
 8008136:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008138:	483f      	ldr	r0, [pc, #252]	; (8008238 <_svfprintf_r+0x111c>)
 800813a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800813c:	3301      	adds	r3, #1
 800813e:	3108      	adds	r1, #8
 8008140:	6038      	str	r0, [r7, #0]
 8008142:	2c10      	cmp	r4, #16
 8008144:	dc7a      	bgt.n	800823c <_svfprintf_r+0x1120>
 8008146:	607c      	str	r4, [r7, #4]
 8008148:	18a4      	adds	r4, r4, r2
 800814a:	000f      	movs	r7, r1
 800814c:	942e      	str	r4, [sp, #184]	; 0xb8
 800814e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008150:	2b07      	cmp	r3, #7
 8008152:	dd08      	ble.n	8008166 <_svfprintf_r+0x104a>
 8008154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008156:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008158:	aa2c      	add	r2, sp, #176	; 0xb0
 800815a:	f001 fc79 	bl	8009a50 <__ssprint_r>
 800815e:	2800      	cmp	r0, #0
 8008160:	d000      	beq.n	8008164 <_svfprintf_r+0x1048>
 8008162:	e1ba      	b.n	80084da <_svfprintf_r+0x13be>
 8008164:	af2f      	add	r7, sp, #188	; 0xbc
 8008166:	9b08      	ldr	r3, [sp, #32]
 8008168:	195d      	adds	r5, r3, r5
 800816a:	0573      	lsls	r3, r6, #21
 800816c:	d50b      	bpl.n	8008186 <_svfprintf_r+0x106a>
 800816e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008170:	2b00      	cmp	r3, #0
 8008172:	d176      	bne.n	8008262 <_svfprintf_r+0x1146>
 8008174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d176      	bne.n	8008268 <_svfprintf_r+0x114c>
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800817e:	189b      	adds	r3, r3, r2
 8008180:	429d      	cmp	r5, r3
 8008182:	d900      	bls.n	8008186 <_svfprintf_r+0x106a>
 8008184:	001d      	movs	r5, r3
 8008186:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800818a:	4293      	cmp	r3, r2
 800818c:	db01      	blt.n	8008192 <_svfprintf_r+0x1076>
 800818e:	07f3      	lsls	r3, r6, #31
 8008190:	d516      	bpl.n	80081c0 <_svfprintf_r+0x10a4>
 8008192:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008194:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800819a:	607b      	str	r3, [r7, #4]
 800819c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800819e:	3708      	adds	r7, #8
 80081a0:	189b      	adds	r3, r3, r2
 80081a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80081a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80081a6:	3301      	adds	r3, #1
 80081a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80081aa:	2b07      	cmp	r3, #7
 80081ac:	dd08      	ble.n	80081c0 <_svfprintf_r+0x10a4>
 80081ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80081b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80081b4:	f001 fc4c 	bl	8009a50 <__ssprint_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d000      	beq.n	80081be <_svfprintf_r+0x10a2>
 80081bc:	e18d      	b.n	80084da <_svfprintf_r+0x13be>
 80081be:	af2f      	add	r7, sp, #188	; 0xbc
 80081c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	4694      	mov	ip, r2
 80081c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80081c8:	4463      	add	r3, ip
 80081ca:	1b5b      	subs	r3, r3, r5
 80081cc:	1b14      	subs	r4, r2, r4
 80081ce:	429c      	cmp	r4, r3
 80081d0:	dd00      	ble.n	80081d4 <_svfprintf_r+0x10b8>
 80081d2:	001c      	movs	r4, r3
 80081d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80081d6:	2c00      	cmp	r4, #0
 80081d8:	dd12      	ble.n	8008200 <_svfprintf_r+0x10e4>
 80081da:	18e3      	adds	r3, r4, r3
 80081dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80081de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80081e0:	603d      	str	r5, [r7, #0]
 80081e2:	3301      	adds	r3, #1
 80081e4:	607c      	str	r4, [r7, #4]
 80081e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80081e8:	3708      	adds	r7, #8
 80081ea:	2b07      	cmp	r3, #7
 80081ec:	dd08      	ble.n	8008200 <_svfprintf_r+0x10e4>
 80081ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80081f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80081f4:	f001 fc2c 	bl	8009a50 <__ssprint_r>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d000      	beq.n	80081fe <_svfprintf_r+0x10e2>
 80081fc:	e16d      	b.n	80084da <_svfprintf_r+0x13be>
 80081fe:	af2f      	add	r7, sp, #188	; 0xbc
 8008200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008204:	2510      	movs	r5, #16
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	43e2      	mvns	r2, r4
 800820a:	17d2      	asrs	r2, r2, #31
 800820c:	4014      	ands	r4, r2
 800820e:	1b1c      	subs	r4, r3, r4
 8008210:	2c00      	cmp	r4, #0
 8008212:	dc00      	bgt.n	8008216 <_svfprintf_r+0x10fa>
 8008214:	e6b0      	b.n	8007f78 <_svfprintf_r+0xe5c>
 8008216:	0039      	movs	r1, r7
 8008218:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800821a:	4807      	ldr	r0, [pc, #28]	; (8008238 <_svfprintf_r+0x111c>)
 800821c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800821e:	3301      	adds	r3, #1
 8008220:	3108      	adds	r1, #8
 8008222:	6038      	str	r0, [r7, #0]
 8008224:	2c10      	cmp	r4, #16
 8008226:	dd00      	ble.n	800822a <_svfprintf_r+0x110e>
 8008228:	e096      	b.n	8008358 <_svfprintf_r+0x123c>
 800822a:	1912      	adds	r2, r2, r4
 800822c:	607c      	str	r4, [r7, #4]
 800822e:	922e      	str	r2, [sp, #184]	; 0xb8
 8008230:	e6dd      	b.n	8007fee <_svfprintf_r+0xed2>
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	0800b25e 	.word	0x0800b25e
 8008238:	0800b270 	.word	0x0800b270
 800823c:	2010      	movs	r0, #16
 800823e:	1812      	adds	r2, r2, r0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	922e      	str	r2, [sp, #184]	; 0xb8
 8008244:	932d      	str	r3, [sp, #180]	; 0xb4
 8008246:	2b07      	cmp	r3, #7
 8008248:	dd08      	ble.n	800825c <_svfprintf_r+0x1140>
 800824a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800824c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800824e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008250:	f001 fbfe 	bl	8009a50 <__ssprint_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	d000      	beq.n	800825a <_svfprintf_r+0x113e>
 8008258:	e13f      	b.n	80084da <_svfprintf_r+0x13be>
 800825a:	a92f      	add	r1, sp, #188	; 0xbc
 800825c:	000f      	movs	r7, r1
 800825e:	3c10      	subs	r4, #16
 8008260:	e768      	b.n	8008134 <_svfprintf_r+0x1018>
 8008262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d05d      	beq.n	8008324 <_svfprintf_r+0x1208>
 8008268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800826a:	3b01      	subs	r3, #1
 800826c:	9310      	str	r3, [sp, #64]	; 0x40
 800826e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008270:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008276:	607b      	str	r3, [r7, #4]
 8008278:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800827a:	3708      	adds	r7, #8
 800827c:	189b      	adds	r3, r3, r2
 800827e:	932e      	str	r3, [sp, #184]	; 0xb8
 8008280:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008282:	3301      	adds	r3, #1
 8008284:	932d      	str	r3, [sp, #180]	; 0xb4
 8008286:	2b07      	cmp	r3, #7
 8008288:	dd08      	ble.n	800829c <_svfprintf_r+0x1180>
 800828a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800828c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800828e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008290:	f001 fbde 	bl	8009a50 <__ssprint_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	d000      	beq.n	800829a <_svfprintf_r+0x117e>
 8008298:	e11f      	b.n	80084da <_svfprintf_r+0x13be>
 800829a:	af2f      	add	r7, sp, #188	; 0xbc
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082a0:	189c      	adds	r4, r3, r2
 80082a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082a4:	1b64      	subs	r4, r4, r5
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	429c      	cmp	r4, r3
 80082aa:	dd00      	ble.n	80082ae <_svfprintf_r+0x1192>
 80082ac:	001c      	movs	r4, r3
 80082ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80082b0:	2c00      	cmp	r4, #0
 80082b2:	dd12      	ble.n	80082da <_svfprintf_r+0x11be>
 80082b4:	18e3      	adds	r3, r4, r3
 80082b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80082b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80082ba:	603d      	str	r5, [r7, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	607c      	str	r4, [r7, #4]
 80082c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80082c2:	3708      	adds	r7, #8
 80082c4:	2b07      	cmp	r3, #7
 80082c6:	dd08      	ble.n	80082da <_svfprintf_r+0x11be>
 80082c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80082ce:	f001 fbbf 	bl	8009a50 <__ssprint_r>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d000      	beq.n	80082d8 <_svfprintf_r+0x11bc>
 80082d6:	e100      	b.n	80084da <_svfprintf_r+0x13be>
 80082d8:	af2f      	add	r7, sp, #188	; 0xbc
 80082da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082dc:	781a      	ldrb	r2, [r3, #0]
 80082de:	43e3      	mvns	r3, r4
 80082e0:	17db      	asrs	r3, r3, #31
 80082e2:	401c      	ands	r4, r3
 80082e4:	1b14      	subs	r4, r2, r4
 80082e6:	2c00      	cmp	r4, #0
 80082e8:	dd18      	ble.n	800831c <_svfprintf_r+0x1200>
 80082ea:	0039      	movs	r1, r7
 80082ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80082ee:	48aa      	ldr	r0, [pc, #680]	; (8008598 <_svfprintf_r+0x147c>)
 80082f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80082f2:	3301      	adds	r3, #1
 80082f4:	3108      	adds	r1, #8
 80082f6:	6038      	str	r0, [r7, #0]
 80082f8:	2c10      	cmp	r4, #16
 80082fa:	dc1a      	bgt.n	8008332 <_svfprintf_r+0x1216>
 80082fc:	1912      	adds	r2, r2, r4
 80082fe:	607c      	str	r4, [r7, #4]
 8008300:	922e      	str	r2, [sp, #184]	; 0xb8
 8008302:	000f      	movs	r7, r1
 8008304:	932d      	str	r3, [sp, #180]	; 0xb4
 8008306:	2b07      	cmp	r3, #7
 8008308:	dd08      	ble.n	800831c <_svfprintf_r+0x1200>
 800830a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800830c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800830e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008310:	f001 fb9e 	bl	8009a50 <__ssprint_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	d000      	beq.n	800831a <_svfprintf_r+0x11fe>
 8008318:	e0df      	b.n	80084da <_svfprintf_r+0x13be>
 800831a:	af2f      	add	r7, sp, #188	; 0xbc
 800831c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	18ed      	adds	r5, r5, r3
 8008322:	e724      	b.n	800816e <_svfprintf_r+0x1052>
 8008324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008326:	3b01      	subs	r3, #1
 8008328:	9312      	str	r3, [sp, #72]	; 0x48
 800832a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800832c:	3b01      	subs	r3, #1
 800832e:	9311      	str	r3, [sp, #68]	; 0x44
 8008330:	e79d      	b.n	800826e <_svfprintf_r+0x1152>
 8008332:	2010      	movs	r0, #16
 8008334:	1812      	adds	r2, r2, r0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	922e      	str	r2, [sp, #184]	; 0xb8
 800833a:	932d      	str	r3, [sp, #180]	; 0xb4
 800833c:	2b07      	cmp	r3, #7
 800833e:	dd08      	ble.n	8008352 <_svfprintf_r+0x1236>
 8008340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008342:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008344:	aa2c      	add	r2, sp, #176	; 0xb0
 8008346:	f001 fb83 	bl	8009a50 <__ssprint_r>
 800834a:	2800      	cmp	r0, #0
 800834c:	d000      	beq.n	8008350 <_svfprintf_r+0x1234>
 800834e:	e0c4      	b.n	80084da <_svfprintf_r+0x13be>
 8008350:	a92f      	add	r1, sp, #188	; 0xbc
 8008352:	000f      	movs	r7, r1
 8008354:	3c10      	subs	r4, #16
 8008356:	e7c8      	b.n	80082ea <_svfprintf_r+0x11ce>
 8008358:	3210      	adds	r2, #16
 800835a:	607d      	str	r5, [r7, #4]
 800835c:	922e      	str	r2, [sp, #184]	; 0xb8
 800835e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008360:	2b07      	cmp	r3, #7
 8008362:	dd08      	ble.n	8008376 <_svfprintf_r+0x125a>
 8008364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008366:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008368:	aa2c      	add	r2, sp, #176	; 0xb0
 800836a:	f001 fb71 	bl	8009a50 <__ssprint_r>
 800836e:	2800      	cmp	r0, #0
 8008370:	d000      	beq.n	8008374 <_svfprintf_r+0x1258>
 8008372:	e0b2      	b.n	80084da <_svfprintf_r+0x13be>
 8008374:	a92f      	add	r1, sp, #188	; 0xbc
 8008376:	000f      	movs	r7, r1
 8008378:	3c10      	subs	r4, #16
 800837a:	e74c      	b.n	8008216 <_svfprintf_r+0x10fa>
 800837c:	003c      	movs	r4, r7
 800837e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008380:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008384:	3101      	adds	r1, #1
 8008386:	3301      	adds	r3, #1
 8008388:	3408      	adds	r4, #8
 800838a:	2a01      	cmp	r2, #1
 800838c:	dc03      	bgt.n	8008396 <_svfprintf_r+0x127a>
 800838e:	2201      	movs	r2, #1
 8008390:	4216      	tst	r6, r2
 8008392:	d100      	bne.n	8008396 <_svfprintf_r+0x127a>
 8008394:	e07f      	b.n	8008496 <_svfprintf_r+0x137a>
 8008396:	9a08      	ldr	r2, [sp, #32]
 8008398:	912e      	str	r1, [sp, #184]	; 0xb8
 800839a:	603a      	str	r2, [r7, #0]
 800839c:	2201      	movs	r2, #1
 800839e:	932d      	str	r3, [sp, #180]	; 0xb4
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	2b07      	cmp	r3, #7
 80083a4:	dd08      	ble.n	80083b8 <_svfprintf_r+0x129c>
 80083a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80083ac:	f001 fb50 	bl	8009a50 <__ssprint_r>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d000      	beq.n	80083b6 <_svfprintf_r+0x129a>
 80083b4:	e091      	b.n	80084da <_svfprintf_r+0x13be>
 80083b6:	ac2f      	add	r4, sp, #188	; 0xbc
 80083b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80083ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083c0:	6063      	str	r3, [r4, #4]
 80083c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80083c4:	3408      	adds	r4, #8
 80083c6:	189b      	adds	r3, r3, r2
 80083c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80083ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80083cc:	3301      	adds	r3, #1
 80083ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80083d0:	2b07      	cmp	r3, #7
 80083d2:	dd07      	ble.n	80083e4 <_svfprintf_r+0x12c8>
 80083d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80083da:	f001 fb39 	bl	8009a50 <__ssprint_r>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d17b      	bne.n	80084da <_svfprintf_r+0x13be>
 80083e2:	ac2f      	add	r4, sp, #188	; 0xbc
 80083e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80083e6:	2200      	movs	r2, #0
 80083e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80083ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 80083ec:	9309      	str	r3, [sp, #36]	; 0x24
 80083ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80083f2:	1e5d      	subs	r5, r3, #1
 80083f4:	2300      	movs	r3, #0
 80083f6:	f7f8 f827 	bl	8000448 <__aeabi_dcmpeq>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d126      	bne.n	800844c <_svfprintf_r+0x1330>
 80083fe:	9b08      	ldr	r3, [sp, #32]
 8008400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008402:	3301      	adds	r3, #1
 8008404:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	1e7b      	subs	r3, r7, #1
 800840a:	3201      	adds	r2, #1
 800840c:	185b      	adds	r3, r3, r1
 800840e:	6065      	str	r5, [r4, #4]
 8008410:	932e      	str	r3, [sp, #184]	; 0xb8
 8008412:	922d      	str	r2, [sp, #180]	; 0xb4
 8008414:	3408      	adds	r4, #8
 8008416:	2a07      	cmp	r2, #7
 8008418:	dd07      	ble.n	800842a <_svfprintf_r+0x130e>
 800841a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800841c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800841e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008420:	f001 fb16 	bl	8009a50 <__ssprint_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	d158      	bne.n	80084da <_svfprintf_r+0x13be>
 8008428:	ac2f      	add	r4, sp, #188	; 0xbc
 800842a:	ab28      	add	r3, sp, #160	; 0xa0
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008430:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008432:	6063      	str	r3, [r4, #4]
 8008434:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008436:	189b      	adds	r3, r3, r2
 8008438:	932e      	str	r3, [sp, #184]	; 0xb8
 800843a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800843c:	3301      	adds	r3, #1
 800843e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008440:	2b07      	cmp	r3, #7
 8008442:	dd00      	ble.n	8008446 <_svfprintf_r+0x132a>
 8008444:	e638      	b.n	80080b8 <_svfprintf_r+0xf9c>
 8008446:	3408      	adds	r4, #8
 8008448:	0027      	movs	r7, r4
 800844a:	e595      	b.n	8007f78 <_svfprintf_r+0xe5c>
 800844c:	2710      	movs	r7, #16
 800844e:	2d00      	cmp	r5, #0
 8008450:	ddeb      	ble.n	800842a <_svfprintf_r+0x130e>
 8008452:	0021      	movs	r1, r4
 8008454:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008456:	4850      	ldr	r0, [pc, #320]	; (8008598 <_svfprintf_r+0x147c>)
 8008458:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800845a:	3301      	adds	r3, #1
 800845c:	3108      	adds	r1, #8
 800845e:	6020      	str	r0, [r4, #0]
 8008460:	2d10      	cmp	r5, #16
 8008462:	dc07      	bgt.n	8008474 <_svfprintf_r+0x1358>
 8008464:	6065      	str	r5, [r4, #4]
 8008466:	000c      	movs	r4, r1
 8008468:	18ad      	adds	r5, r5, r2
 800846a:	952e      	str	r5, [sp, #184]	; 0xb8
 800846c:	932d      	str	r3, [sp, #180]	; 0xb4
 800846e:	2b07      	cmp	r3, #7
 8008470:	dddb      	ble.n	800842a <_svfprintf_r+0x130e>
 8008472:	e7d2      	b.n	800841a <_svfprintf_r+0x12fe>
 8008474:	3210      	adds	r2, #16
 8008476:	6067      	str	r7, [r4, #4]
 8008478:	922e      	str	r2, [sp, #184]	; 0xb8
 800847a:	932d      	str	r3, [sp, #180]	; 0xb4
 800847c:	2b07      	cmp	r3, #7
 800847e:	dd07      	ble.n	8008490 <_svfprintf_r+0x1374>
 8008480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008482:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008484:	aa2c      	add	r2, sp, #176	; 0xb0
 8008486:	f001 fae3 	bl	8009a50 <__ssprint_r>
 800848a:	2800      	cmp	r0, #0
 800848c:	d125      	bne.n	80084da <_svfprintf_r+0x13be>
 800848e:	a92f      	add	r1, sp, #188	; 0xbc
 8008490:	000c      	movs	r4, r1
 8008492:	3d10      	subs	r5, #16
 8008494:	e7dd      	b.n	8008452 <_svfprintf_r+0x1336>
 8008496:	9808      	ldr	r0, [sp, #32]
 8008498:	912e      	str	r1, [sp, #184]	; 0xb8
 800849a:	c705      	stmia	r7!, {r0, r2}
 800849c:	932d      	str	r3, [sp, #180]	; 0xb4
 800849e:	e7e6      	b.n	800846e <_svfprintf_r+0x1352>
 80084a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80084a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084a4:	2510      	movs	r5, #16
 80084a6:	1a9c      	subs	r4, r3, r2
 80084a8:	2c00      	cmp	r4, #0
 80084aa:	dc00      	bgt.n	80084ae <_svfprintf_r+0x1392>
 80084ac:	e567      	b.n	8007f7e <_svfprintf_r+0xe62>
 80084ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80084b0:	493a      	ldr	r1, [pc, #232]	; (800859c <_svfprintf_r+0x1480>)
 80084b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80084b4:	3301      	adds	r3, #1
 80084b6:	6039      	str	r1, [r7, #0]
 80084b8:	2c10      	cmp	r4, #16
 80084ba:	dc19      	bgt.n	80084f0 <_svfprintf_r+0x13d4>
 80084bc:	607c      	str	r4, [r7, #4]
 80084be:	18a4      	adds	r4, r4, r2
 80084c0:	942e      	str	r4, [sp, #184]	; 0xb8
 80084c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80084c4:	2b07      	cmp	r3, #7
 80084c6:	dc00      	bgt.n	80084ca <_svfprintf_r+0x13ae>
 80084c8:	e559      	b.n	8007f7e <_svfprintf_r+0xe62>
 80084ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80084d0:	f001 fabe 	bl	8009a50 <__ssprint_r>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d100      	bne.n	80084da <_svfprintf_r+0x13be>
 80084d8:	e551      	b.n	8007f7e <_svfprintf_r+0xe62>
 80084da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <_svfprintf_r+0x13c8>
 80084e0:	f7ff f845 	bl	800756e <_svfprintf_r+0x452>
 80084e4:	0019      	movs	r1, r3
 80084e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084e8:	f7fe f9fc 	bl	80068e4 <_free_r>
 80084ec:	f7ff f83f 	bl	800756e <_svfprintf_r+0x452>
 80084f0:	3210      	adds	r2, #16
 80084f2:	607d      	str	r5, [r7, #4]
 80084f4:	922e      	str	r2, [sp, #184]	; 0xb8
 80084f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80084f8:	3708      	adds	r7, #8
 80084fa:	2b07      	cmp	r3, #7
 80084fc:	dd07      	ble.n	800850e <_svfprintf_r+0x13f2>
 80084fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008500:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008502:	aa2c      	add	r2, sp, #176	; 0xb0
 8008504:	f001 faa4 	bl	8009a50 <__ssprint_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	d1e6      	bne.n	80084da <_svfprintf_r+0x13be>
 800850c:	af2f      	add	r7, sp, #188	; 0xbc
 800850e:	3c10      	subs	r4, #16
 8008510:	e7cd      	b.n	80084ae <_svfprintf_r+0x1392>
 8008512:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008516:	f7fe f9e5 	bl	80068e4 <_free_r>
 800851a:	e549      	b.n	8007fb0 <_svfprintf_r+0xe94>
 800851c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <_svfprintf_r+0x140a>
 8008522:	f7ff f824 	bl	800756e <_svfprintf_r+0x452>
 8008526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008528:	980a      	ldr	r0, [sp, #40]	; 0x28
 800852a:	aa2c      	add	r2, sp, #176	; 0xb0
 800852c:	f001 fa90 	bl	8009a50 <__ssprint_r>
 8008530:	f7ff f81d 	bl	800756e <_svfprintf_r+0x452>
 8008534:	0034      	movs	r4, r6
 8008536:	2a00      	cmp	r2, #0
 8008538:	d101      	bne.n	800853e <_svfprintf_r+0x1422>
 800853a:	f7fe ff8c 	bl	8007456 <_svfprintf_r+0x33a>
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <_svfprintf_r+0x142a>
 8008542:	f7ff fc01 	bl	8007d48 <_svfprintf_r+0xc2c>
 8008546:	2b02      	cmp	r3, #2
 8008548:	d100      	bne.n	800854c <_svfprintf_r+0x1430>
 800854a:	e459      	b.n	8007e00 <_svfprintf_r+0xce4>
 800854c:	2507      	movs	r5, #7
 800854e:	ab58      	add	r3, sp, #352	; 0x160
 8008550:	9308      	str	r3, [sp, #32]
 8008552:	9a08      	ldr	r2, [sp, #32]
 8008554:	0013      	movs	r3, r2
 8008556:	3b01      	subs	r3, #1
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	9b06      	ldr	r3, [sp, #24]
 800855c:	9908      	ldr	r1, [sp, #32]
 800855e:	402b      	ands	r3, r5
 8008560:	3330      	adds	r3, #48	; 0x30
 8008562:	700b      	strb	r3, [r1, #0]
 8008564:	9907      	ldr	r1, [sp, #28]
 8008566:	074e      	lsls	r6, r1, #29
 8008568:	9906      	ldr	r1, [sp, #24]
 800856a:	08c8      	lsrs	r0, r1, #3
 800856c:	9907      	ldr	r1, [sp, #28]
 800856e:	4306      	orrs	r6, r0
 8008570:	08c9      	lsrs	r1, r1, #3
 8008572:	9107      	str	r1, [sp, #28]
 8008574:	0031      	movs	r1, r6
 8008576:	9807      	ldr	r0, [sp, #28]
 8008578:	9606      	str	r6, [sp, #24]
 800857a:	4301      	orrs	r1, r0
 800857c:	d1e9      	bne.n	8008552 <_svfprintf_r+0x1436>
 800857e:	07e1      	lsls	r1, r4, #31
 8008580:	d400      	bmi.n	8008584 <_svfprintf_r+0x1468>
 8008582:	e42a      	b.n	8007dda <_svfprintf_r+0xcbe>
 8008584:	2b30      	cmp	r3, #48	; 0x30
 8008586:	d100      	bne.n	800858a <_svfprintf_r+0x146e>
 8008588:	e427      	b.n	8007dda <_svfprintf_r+0xcbe>
 800858a:	2130      	movs	r1, #48	; 0x30
 800858c:	9b08      	ldr	r3, [sp, #32]
 800858e:	3b01      	subs	r3, #1
 8008590:	7019      	strb	r1, [r3, #0]
 8008592:	1e93      	subs	r3, r2, #2
 8008594:	9308      	str	r3, [sp, #32]
 8008596:	e420      	b.n	8007dda <_svfprintf_r+0xcbe>
 8008598:	0800b270 	.word	0x0800b270
 800859c:	0800b260 	.word	0x0800b260

080085a0 <_fclose_r>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	0005      	movs	r5, r0
 80085a4:	1e0c      	subs	r4, r1, #0
 80085a6:	d102      	bne.n	80085ae <_fclose_r+0xe>
 80085a8:	2600      	movs	r6, #0
 80085aa:	0030      	movs	r0, r6
 80085ac:	bd70      	pop	{r4, r5, r6, pc}
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d004      	beq.n	80085bc <_fclose_r+0x1c>
 80085b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <_fclose_r+0x1c>
 80085b8:	f7fd ffb0 	bl	800651c <__sinit>
 80085bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085be:	07db      	lsls	r3, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_fclose_r+0x2e>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	059b      	lsls	r3, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_fclose_r+0x2e>
 80085c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ca:	f7fe f90d 	bl	80067e8 <__retarget_lock_acquire_recursive>
 80085ce:	220c      	movs	r2, #12
 80085d0:	5ea3      	ldrsh	r3, [r4, r2]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <_fclose_r+0x4a>
 80085d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085d8:	3301      	adds	r3, #1
 80085da:	0016      	movs	r6, r2
 80085dc:	401e      	ands	r6, r3
 80085de:	421a      	tst	r2, r3
 80085e0:	d1e2      	bne.n	80085a8 <_fclose_r+0x8>
 80085e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e4:	f7fe f901 	bl	80067ea <__retarget_lock_release_recursive>
 80085e8:	e7df      	b.n	80085aa <_fclose_r+0xa>
 80085ea:	0021      	movs	r1, r4
 80085ec:	0028      	movs	r0, r5
 80085ee:	f000 f837 	bl	8008660 <__sflush_r>
 80085f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085f4:	0006      	movs	r6, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d006      	beq.n	8008608 <_fclose_r+0x68>
 80085fa:	0028      	movs	r0, r5
 80085fc:	69e1      	ldr	r1, [r4, #28]
 80085fe:	4798      	blx	r3
 8008600:	2800      	cmp	r0, #0
 8008602:	da01      	bge.n	8008608 <_fclose_r+0x68>
 8008604:	2601      	movs	r6, #1
 8008606:	4276      	negs	r6, r6
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	061b      	lsls	r3, r3, #24
 800860c:	d503      	bpl.n	8008616 <_fclose_r+0x76>
 800860e:	0028      	movs	r0, r5
 8008610:	6921      	ldr	r1, [r4, #16]
 8008612:	f7fe f967 	bl	80068e4 <_free_r>
 8008616:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008618:	2900      	cmp	r1, #0
 800861a:	d008      	beq.n	800862e <_fclose_r+0x8e>
 800861c:	0023      	movs	r3, r4
 800861e:	3340      	adds	r3, #64	; 0x40
 8008620:	4299      	cmp	r1, r3
 8008622:	d002      	beq.n	800862a <_fclose_r+0x8a>
 8008624:	0028      	movs	r0, r5
 8008626:	f7fe f95d 	bl	80068e4 <_free_r>
 800862a:	2300      	movs	r3, #0
 800862c:	6323      	str	r3, [r4, #48]	; 0x30
 800862e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008630:	2900      	cmp	r1, #0
 8008632:	d004      	beq.n	800863e <_fclose_r+0x9e>
 8008634:	0028      	movs	r0, r5
 8008636:	f7fe f955 	bl	80068e4 <_free_r>
 800863a:	2300      	movs	r3, #0
 800863c:	6463      	str	r3, [r4, #68]	; 0x44
 800863e:	f7fd ff5d 	bl	80064fc <__sfp_lock_acquire>
 8008642:	2300      	movs	r3, #0
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008648:	07db      	lsls	r3, r3, #31
 800864a:	d402      	bmi.n	8008652 <_fclose_r+0xb2>
 800864c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800864e:	f7fe f8cc 	bl	80067ea <__retarget_lock_release_recursive>
 8008652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008654:	f7fe f8c7 	bl	80067e6 <__retarget_lock_close_recursive>
 8008658:	f7fd ff58 	bl	800650c <__sfp_lock_release>
 800865c:	e7a5      	b.n	80085aa <_fclose_r+0xa>
	...

08008660 <__sflush_r>:
 8008660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008662:	230c      	movs	r3, #12
 8008664:	5eca      	ldrsh	r2, [r1, r3]
 8008666:	000c      	movs	r4, r1
 8008668:	0005      	movs	r5, r0
 800866a:	b291      	uxth	r1, r2
 800866c:	0713      	lsls	r3, r2, #28
 800866e:	d464      	bmi.n	800873a <__sflush_r+0xda>
 8008670:	2380      	movs	r3, #128	; 0x80
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	4313      	orrs	r3, r2
 8008676:	6862      	ldr	r2, [r4, #4]
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	2a00      	cmp	r2, #0
 800867c:	dc04      	bgt.n	8008688 <__sflush_r+0x28>
 800867e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008680:	2a00      	cmp	r2, #0
 8008682:	dc01      	bgt.n	8008688 <__sflush_r+0x28>
 8008684:	2000      	movs	r0, #0
 8008686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008688:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800868a:	2f00      	cmp	r7, #0
 800868c:	d0fa      	beq.n	8008684 <__sflush_r+0x24>
 800868e:	2200      	movs	r2, #0
 8008690:	2080      	movs	r0, #128	; 0x80
 8008692:	682e      	ldr	r6, [r5, #0]
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	001a      	movs	r2, r3
 8008698:	0140      	lsls	r0, r0, #5
 800869a:	69e1      	ldr	r1, [r4, #28]
 800869c:	4002      	ands	r2, r0
 800869e:	4203      	tst	r3, r0
 80086a0:	d038      	beq.n	8008714 <__sflush_r+0xb4>
 80086a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	075b      	lsls	r3, r3, #29
 80086a8:	d506      	bpl.n	80086b8 <__sflush_r+0x58>
 80086aa:	6863      	ldr	r3, [r4, #4]
 80086ac:	1ac0      	subs	r0, r0, r3
 80086ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <__sflush_r+0x58>
 80086b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80086b6:	1ac0      	subs	r0, r0, r3
 80086b8:	0002      	movs	r2, r0
 80086ba:	2300      	movs	r3, #0
 80086bc:	0028      	movs	r0, r5
 80086be:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80086c0:	69e1      	ldr	r1, [r4, #28]
 80086c2:	47b8      	blx	r7
 80086c4:	89a2      	ldrh	r2, [r4, #12]
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d106      	bne.n	80086d8 <__sflush_r+0x78>
 80086ca:	6829      	ldr	r1, [r5, #0]
 80086cc:	291d      	cmp	r1, #29
 80086ce:	d830      	bhi.n	8008732 <__sflush_r+0xd2>
 80086d0:	4b2c      	ldr	r3, [pc, #176]	; (8008784 <__sflush_r+0x124>)
 80086d2:	410b      	asrs	r3, r1
 80086d4:	07db      	lsls	r3, r3, #31
 80086d6:	d42c      	bmi.n	8008732 <__sflush_r+0xd2>
 80086d8:	4b2b      	ldr	r3, [pc, #172]	; (8008788 <__sflush_r+0x128>)
 80086da:	4013      	ands	r3, r2
 80086dc:	2200      	movs	r2, #0
 80086de:	6062      	str	r2, [r4, #4]
 80086e0:	6922      	ldr	r2, [r4, #16]
 80086e2:	b21b      	sxth	r3, r3
 80086e4:	81a3      	strh	r3, [r4, #12]
 80086e6:	6022      	str	r2, [r4, #0]
 80086e8:	04db      	lsls	r3, r3, #19
 80086ea:	d505      	bpl.n	80086f8 <__sflush_r+0x98>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <__sflush_r+0x96>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d100      	bne.n	80086f8 <__sflush_r+0x98>
 80086f6:	6520      	str	r0, [r4, #80]	; 0x50
 80086f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80086fa:	602e      	str	r6, [r5, #0]
 80086fc:	2900      	cmp	r1, #0
 80086fe:	d0c1      	beq.n	8008684 <__sflush_r+0x24>
 8008700:	0023      	movs	r3, r4
 8008702:	3340      	adds	r3, #64	; 0x40
 8008704:	4299      	cmp	r1, r3
 8008706:	d002      	beq.n	800870e <__sflush_r+0xae>
 8008708:	0028      	movs	r0, r5
 800870a:	f7fe f8eb 	bl	80068e4 <_free_r>
 800870e:	2000      	movs	r0, #0
 8008710:	6320      	str	r0, [r4, #48]	; 0x30
 8008712:	e7b8      	b.n	8008686 <__sflush_r+0x26>
 8008714:	2301      	movs	r3, #1
 8008716:	0028      	movs	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	1c43      	adds	r3, r0, #1
 800871c:	d1c2      	bne.n	80086a4 <__sflush_r+0x44>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0bf      	beq.n	80086a4 <__sflush_r+0x44>
 8008724:	2b1d      	cmp	r3, #29
 8008726:	d001      	beq.n	800872c <__sflush_r+0xcc>
 8008728:	2b16      	cmp	r3, #22
 800872a:	d101      	bne.n	8008730 <__sflush_r+0xd0>
 800872c:	602e      	str	r6, [r5, #0]
 800872e:	e7a9      	b.n	8008684 <__sflush_r+0x24>
 8008730:	89a2      	ldrh	r2, [r4, #12]
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	4313      	orrs	r3, r2
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	e7a5      	b.n	8008686 <__sflush_r+0x26>
 800873a:	6926      	ldr	r6, [r4, #16]
 800873c:	2e00      	cmp	r6, #0
 800873e:	d0a1      	beq.n	8008684 <__sflush_r+0x24>
 8008740:	6827      	ldr	r7, [r4, #0]
 8008742:	6026      	str	r6, [r4, #0]
 8008744:	1bbb      	subs	r3, r7, r6
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	2300      	movs	r3, #0
 800874a:	0789      	lsls	r1, r1, #30
 800874c:	d100      	bne.n	8008750 <__sflush_r+0xf0>
 800874e:	6963      	ldr	r3, [r4, #20]
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dc00      	bgt.n	800875a <__sflush_r+0xfa>
 8008758:	e794      	b.n	8008684 <__sflush_r+0x24>
 800875a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875c:	0032      	movs	r2, r6
 800875e:	001f      	movs	r7, r3
 8008760:	0028      	movs	r0, r5
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	69e1      	ldr	r1, [r4, #28]
 8008766:	47b8      	blx	r7
 8008768:	2800      	cmp	r0, #0
 800876a:	dc06      	bgt.n	800877a <__sflush_r+0x11a>
 800876c:	2340      	movs	r3, #64	; 0x40
 800876e:	2001      	movs	r0, #1
 8008770:	89a2      	ldrh	r2, [r4, #12]
 8008772:	4240      	negs	r0, r0
 8008774:	4313      	orrs	r3, r2
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	e785      	b.n	8008686 <__sflush_r+0x26>
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	1836      	adds	r6, r6, r0
 800877e:	1a1b      	subs	r3, r3, r0
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	e7e6      	b.n	8008752 <__sflush_r+0xf2>
 8008784:	dfbffffe 	.word	0xdfbffffe
 8008788:	fffff7ff 	.word	0xfffff7ff

0800878c <_fflush_r>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	0005      	movs	r5, r0
 8008790:	000c      	movs	r4, r1
 8008792:	2800      	cmp	r0, #0
 8008794:	d004      	beq.n	80087a0 <_fflush_r+0x14>
 8008796:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <_fflush_r+0x14>
 800879c:	f7fd febe 	bl	800651c <__sinit>
 80087a0:	220c      	movs	r2, #12
 80087a2:	5ea3      	ldrsh	r3, [r4, r2]
 80087a4:	1e1e      	subs	r6, r3, #0
 80087a6:	d015      	beq.n	80087d4 <_fflush_r+0x48>
 80087a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087aa:	07d2      	lsls	r2, r2, #31
 80087ac:	d404      	bmi.n	80087b8 <_fflush_r+0x2c>
 80087ae:	059b      	lsls	r3, r3, #22
 80087b0:	d402      	bmi.n	80087b8 <_fflush_r+0x2c>
 80087b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b4:	f7fe f818 	bl	80067e8 <__retarget_lock_acquire_recursive>
 80087b8:	0021      	movs	r1, r4
 80087ba:	0028      	movs	r0, r5
 80087bc:	f7ff ff50 	bl	8008660 <__sflush_r>
 80087c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087c2:	0006      	movs	r6, r0
 80087c4:	07db      	lsls	r3, r3, #31
 80087c6:	d405      	bmi.n	80087d4 <_fflush_r+0x48>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	059b      	lsls	r3, r3, #22
 80087cc:	d402      	bmi.n	80087d4 <_fflush_r+0x48>
 80087ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d0:	f7fe f80b 	bl	80067ea <__retarget_lock_release_recursive>
 80087d4:	0030      	movs	r0, r6
 80087d6:	bd70      	pop	{r4, r5, r6, pc}

080087d8 <_localeconv_r>:
 80087d8:	4800      	ldr	r0, [pc, #0]	; (80087dc <_localeconv_r+0x4>)
 80087da:	4770      	bx	lr
 80087dc:	20000548 	.word	0x20000548

080087e0 <__libc_fini_array>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	4c07      	ldr	r4, [pc, #28]	; (8008800 <__libc_fini_array+0x20>)
 80087e4:	4d07      	ldr	r5, [pc, #28]	; (8008804 <__libc_fini_array+0x24>)
 80087e6:	1b64      	subs	r4, r4, r5
 80087e8:	10a4      	asrs	r4, r4, #2
 80087ea:	2c00      	cmp	r4, #0
 80087ec:	d102      	bne.n	80087f4 <__libc_fini_array+0x14>
 80087ee:	f002 fa89 	bl	800ad04 <_fini>
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	3c01      	subs	r4, #1
 80087f6:	00a3      	lsls	r3, r4, #2
 80087f8:	58eb      	ldr	r3, [r5, r3]
 80087fa:	4798      	blx	r3
 80087fc:	e7f5      	b.n	80087ea <__libc_fini_array+0xa>
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	0800b358 	.word	0x0800b358
 8008804:	0800b354 	.word	0x0800b354

08008808 <memchr>:
 8008808:	b2c9      	uxtb	r1, r1
 800880a:	1882      	adds	r2, r0, r2
 800880c:	4290      	cmp	r0, r2
 800880e:	d101      	bne.n	8008814 <memchr+0xc>
 8008810:	2000      	movs	r0, #0
 8008812:	4770      	bx	lr
 8008814:	7803      	ldrb	r3, [r0, #0]
 8008816:	428b      	cmp	r3, r1
 8008818:	d0fb      	beq.n	8008812 <memchr+0xa>
 800881a:	3001      	adds	r0, #1
 800881c:	e7f6      	b.n	800880c <memchr+0x4>
	...

08008820 <frexp>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	0014      	movs	r4, r2
 8008824:	2500      	movs	r5, #0
 8008826:	6025      	str	r5, [r4, #0]
 8008828:	4d10      	ldr	r5, [pc, #64]	; (800886c <frexp+0x4c>)
 800882a:	004b      	lsls	r3, r1, #1
 800882c:	000a      	movs	r2, r1
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	42ab      	cmp	r3, r5
 8008832:	dc1a      	bgt.n	800886a <frexp+0x4a>
 8008834:	001d      	movs	r5, r3
 8008836:	4305      	orrs	r5, r0
 8008838:	d017      	beq.n	800886a <frexp+0x4a>
 800883a:	4d0d      	ldr	r5, [pc, #52]	; (8008870 <frexp+0x50>)
 800883c:	4229      	tst	r1, r5
 800883e:	d109      	bne.n	8008854 <frexp+0x34>
 8008840:	2200      	movs	r2, #0
 8008842:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <frexp+0x54>)
 8008844:	f7f8 fe74 	bl	8001530 <__aeabi_dmul>
 8008848:	2536      	movs	r5, #54	; 0x36
 800884a:	000a      	movs	r2, r1
 800884c:	004b      	lsls	r3, r1, #1
 800884e:	426d      	negs	r5, r5
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	6025      	str	r5, [r4, #0]
 8008854:	4d08      	ldr	r5, [pc, #32]	; (8008878 <frexp+0x58>)
 8008856:	151b      	asrs	r3, r3, #20
 8008858:	195b      	adds	r3, r3, r5
 800885a:	6825      	ldr	r5, [r4, #0]
 800885c:	18eb      	adds	r3, r5, r3
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <frexp+0x5c>)
 8008862:	401a      	ands	r2, r3
 8008864:	4b06      	ldr	r3, [pc, #24]	; (8008880 <frexp+0x60>)
 8008866:	4313      	orrs	r3, r2
 8008868:	0019      	movs	r1, r3
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	7fefffff 	.word	0x7fefffff
 8008870:	7ff00000 	.word	0x7ff00000
 8008874:	43500000 	.word	0x43500000
 8008878:	fffffc02 	.word	0xfffffc02
 800887c:	800fffff 	.word	0x800fffff
 8008880:	3fe00000 	.word	0x3fe00000

08008884 <__register_exitproc>:
 8008884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008886:	4f1c      	ldr	r7, [pc, #112]	; (80088f8 <__register_exitproc+0x74>)
 8008888:	0004      	movs	r4, r0
 800888a:	6838      	ldr	r0, [r7, #0]
 800888c:	0016      	movs	r6, r2
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	9100      	str	r1, [sp, #0]
 8008892:	f7fd ffa9 	bl	80067e8 <__retarget_lock_acquire_recursive>
 8008896:	4a19      	ldr	r2, [pc, #100]	; (80088fc <__register_exitproc+0x78>)
 8008898:	6813      	ldr	r3, [r2, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <__register_exitproc+0x1e>
 800889e:	4b18      	ldr	r3, [pc, #96]	; (8008900 <__register_exitproc+0x7c>)
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	6838      	ldr	r0, [r7, #0]
 80088a6:	2a1f      	cmp	r2, #31
 80088a8:	dd04      	ble.n	80088b4 <__register_exitproc+0x30>
 80088aa:	f7fd ff9e 	bl	80067ea <__retarget_lock_release_recursive>
 80088ae:	2001      	movs	r0, #1
 80088b0:	4240      	negs	r0, r0
 80088b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	d014      	beq.n	80088e2 <__register_exitproc+0x5e>
 80088b8:	0091      	lsls	r1, r2, #2
 80088ba:	1859      	adds	r1, r3, r1
 80088bc:	000f      	movs	r7, r1
 80088be:	3788      	adds	r7, #136	; 0x88
 80088c0:	603e      	str	r6, [r7, #0]
 80088c2:	2701      	movs	r7, #1
 80088c4:	001e      	movs	r6, r3
 80088c6:	4097      	lsls	r7, r2
 80088c8:	3685      	adds	r6, #133	; 0x85
 80088ca:	36ff      	adds	r6, #255	; 0xff
 80088cc:	6875      	ldr	r5, [r6, #4]
 80088ce:	31fc      	adds	r1, #252	; 0xfc
 80088d0:	433d      	orrs	r5, r7
 80088d2:	6075      	str	r5, [r6, #4]
 80088d4:	9d01      	ldr	r5, [sp, #4]
 80088d6:	60cd      	str	r5, [r1, #12]
 80088d8:	2c02      	cmp	r4, #2
 80088da:	d102      	bne.n	80088e2 <__register_exitproc+0x5e>
 80088dc:	68b1      	ldr	r1, [r6, #8]
 80088de:	4339      	orrs	r1, r7
 80088e0:	60b1      	str	r1, [r6, #8]
 80088e2:	1c51      	adds	r1, r2, #1
 80088e4:	6059      	str	r1, [r3, #4]
 80088e6:	3202      	adds	r2, #2
 80088e8:	9900      	ldr	r1, [sp, #0]
 80088ea:	0092      	lsls	r2, r2, #2
 80088ec:	50d1      	str	r1, [r2, r3]
 80088ee:	f7fd ff7c 	bl	80067ea <__retarget_lock_release_recursive>
 80088f2:	2000      	movs	r0, #0
 80088f4:	e7dd      	b.n	80088b2 <__register_exitproc+0x2e>
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	200006ec 	.word	0x200006ec
 80088fc:	20000bfc 	.word	0x20000bfc
 8008900:	20000c00 	.word	0x20000c00

08008904 <__assert_func>:
 8008904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008906:	0014      	movs	r4, r2
 8008908:	001a      	movs	r2, r3
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <__assert_func+0x2c>)
 800890c:	0005      	movs	r5, r0
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	000e      	movs	r6, r1
 8008912:	68d8      	ldr	r0, [r3, #12]
 8008914:	4b07      	ldr	r3, [pc, #28]	; (8008934 <__assert_func+0x30>)
 8008916:	2c00      	cmp	r4, #0
 8008918:	d101      	bne.n	800891e <__assert_func+0x1a>
 800891a:	4b07      	ldr	r3, [pc, #28]	; (8008938 <__assert_func+0x34>)
 800891c:	001c      	movs	r4, r3
 800891e:	4907      	ldr	r1, [pc, #28]	; (800893c <__assert_func+0x38>)
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	9402      	str	r4, [sp, #8]
 8008924:	002b      	movs	r3, r5
 8008926:	9600      	str	r6, [sp, #0]
 8008928:	f001 f882 	bl	8009a30 <fiprintf>
 800892c:	f002 f896 	bl	800aa5c <abort>
 8008930:	200006e8 	.word	0x200006e8
 8008934:	0800b280 	.word	0x0800b280
 8008938:	0800b2bb 	.word	0x0800b2bb
 800893c:	0800b28d 	.word	0x0800b28d

08008940 <_calloc_r>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	2400      	movs	r4, #0
 8008944:	0c0b      	lsrs	r3, r1, #16
 8008946:	0c16      	lsrs	r6, r2, #16
 8008948:	42a3      	cmp	r3, r4
 800894a:	d133      	bne.n	80089b4 <_calloc_r+0x74>
 800894c:	42a6      	cmp	r6, r4
 800894e:	d121      	bne.n	8008994 <_calloc_r+0x54>
 8008950:	b28b      	uxth	r3, r1
 8008952:	b291      	uxth	r1, r2
 8008954:	4359      	muls	r1, r3
 8008956:	f7fd fa9b 	bl	8005e90 <_malloc_r>
 800895a:	1e05      	subs	r5, r0, #0
 800895c:	d033      	beq.n	80089c6 <_calloc_r+0x86>
 800895e:	0003      	movs	r3, r0
 8008960:	3b08      	subs	r3, #8
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	2303      	movs	r3, #3
 8008966:	439a      	bics	r2, r3
 8008968:	3a04      	subs	r2, #4
 800896a:	2a24      	cmp	r2, #36	; 0x24
 800896c:	d832      	bhi.n	80089d4 <_calloc_r+0x94>
 800896e:	0003      	movs	r3, r0
 8008970:	2a13      	cmp	r2, #19
 8008972:	d90a      	bls.n	800898a <_calloc_r+0x4a>
 8008974:	6004      	str	r4, [r0, #0]
 8008976:	6044      	str	r4, [r0, #4]
 8008978:	3308      	adds	r3, #8
 800897a:	2a1b      	cmp	r2, #27
 800897c:	d905      	bls.n	800898a <_calloc_r+0x4a>
 800897e:	6084      	str	r4, [r0, #8]
 8008980:	60c4      	str	r4, [r0, #12]
 8008982:	2a24      	cmp	r2, #36	; 0x24
 8008984:	d021      	beq.n	80089ca <_calloc_r+0x8a>
 8008986:	0003      	movs	r3, r0
 8008988:	3310      	adds	r3, #16
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	609a      	str	r2, [r3, #8]
 8008992:	e018      	b.n	80089c6 <_calloc_r+0x86>
 8008994:	1c33      	adds	r3, r6, #0
 8008996:	1c0d      	adds	r5, r1, #0
 8008998:	b289      	uxth	r1, r1
 800899a:	b292      	uxth	r2, r2
 800899c:	434a      	muls	r2, r1
 800899e:	b2ad      	uxth	r5, r5
 80089a0:	b299      	uxth	r1, r3
 80089a2:	4369      	muls	r1, r5
 80089a4:	0c13      	lsrs	r3, r2, #16
 80089a6:	18c9      	adds	r1, r1, r3
 80089a8:	0c0b      	lsrs	r3, r1, #16
 80089aa:	d107      	bne.n	80089bc <_calloc_r+0x7c>
 80089ac:	0409      	lsls	r1, r1, #16
 80089ae:	b292      	uxth	r2, r2
 80089b0:	4311      	orrs	r1, r2
 80089b2:	e7d0      	b.n	8008956 <_calloc_r+0x16>
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	d101      	bne.n	80089bc <_calloc_r+0x7c>
 80089b8:	1c15      	adds	r5, r2, #0
 80089ba:	e7ed      	b.n	8008998 <_calloc_r+0x58>
 80089bc:	f7fd fee8 	bl	8006790 <__errno>
 80089c0:	230c      	movs	r3, #12
 80089c2:	2500      	movs	r5, #0
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	0028      	movs	r0, r5
 80089c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ca:	0003      	movs	r3, r0
 80089cc:	6104      	str	r4, [r0, #16]
 80089ce:	3318      	adds	r3, #24
 80089d0:	6144      	str	r4, [r0, #20]
 80089d2:	e7da      	b.n	800898a <_calloc_r+0x4a>
 80089d4:	2100      	movs	r1, #0
 80089d6:	f7fd fe41 	bl	800665c <memset>
 80089da:	e7f4      	b.n	80089c6 <_calloc_r+0x86>

080089dc <quorem>:
 80089dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089de:	6902      	ldr	r2, [r0, #16]
 80089e0:	690b      	ldr	r3, [r1, #16]
 80089e2:	b089      	sub	sp, #36	; 0x24
 80089e4:	0007      	movs	r7, r0
 80089e6:	9104      	str	r1, [sp, #16]
 80089e8:	2000      	movs	r0, #0
 80089ea:	429a      	cmp	r2, r3
 80089ec:	db69      	blt.n	8008ac2 <quorem+0xe6>
 80089ee:	3b01      	subs	r3, #1
 80089f0:	009c      	lsls	r4, r3, #2
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	000b      	movs	r3, r1
 80089f6:	3314      	adds	r3, #20
 80089f8:	9306      	str	r3, [sp, #24]
 80089fa:	191b      	adds	r3, r3, r4
 80089fc:	9305      	str	r3, [sp, #20]
 80089fe:	003b      	movs	r3, r7
 8008a00:	3314      	adds	r3, #20
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	191c      	adds	r4, r3, r4
 8008a06:	9b05      	ldr	r3, [sp, #20]
 8008a08:	6826      	ldr	r6, [r4, #0]
 8008a0a:	681d      	ldr	r5, [r3, #0]
 8008a0c:	0030      	movs	r0, r6
 8008a0e:	3501      	adds	r5, #1
 8008a10:	0029      	movs	r1, r5
 8008a12:	f7f7 fb93 	bl	800013c <__udivsi3>
 8008a16:	9002      	str	r0, [sp, #8]
 8008a18:	42ae      	cmp	r6, r5
 8008a1a:	d329      	bcc.n	8008a70 <quorem+0x94>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	2600      	movs	r6, #0
 8008a20:	469c      	mov	ip, r3
 8008a22:	9d03      	ldr	r5, [sp, #12]
 8008a24:	9606      	str	r6, [sp, #24]
 8008a26:	4662      	mov	r2, ip
 8008a28:	ca08      	ldmia	r2!, {r3}
 8008a2a:	6828      	ldr	r0, [r5, #0]
 8008a2c:	4694      	mov	ip, r2
 8008a2e:	9a02      	ldr	r2, [sp, #8]
 8008a30:	b299      	uxth	r1, r3
 8008a32:	4351      	muls	r1, r2
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	4353      	muls	r3, r2
 8008a38:	1989      	adds	r1, r1, r6
 8008a3a:	0c0a      	lsrs	r2, r1, #16
 8008a3c:	189b      	adds	r3, r3, r2
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	0c1e      	lsrs	r6, r3, #16
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	b282      	uxth	r2, r0
 8008a46:	18d2      	adds	r2, r2, r3
 8008a48:	466b      	mov	r3, sp
 8008a4a:	b289      	uxth	r1, r1
 8008a4c:	8b9b      	ldrh	r3, [r3, #28]
 8008a4e:	1a52      	subs	r2, r2, r1
 8008a50:	0c01      	lsrs	r1, r0, #16
 8008a52:	1ac9      	subs	r1, r1, r3
 8008a54:	1413      	asrs	r3, r2, #16
 8008a56:	18cb      	adds	r3, r1, r3
 8008a58:	1419      	asrs	r1, r3, #16
 8008a5a:	b292      	uxth	r2, r2
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	c508      	stmia	r5!, {r3}
 8008a62:	9b05      	ldr	r3, [sp, #20]
 8008a64:	9106      	str	r1, [sp, #24]
 8008a66:	4563      	cmp	r3, ip
 8008a68:	d2dd      	bcs.n	8008a26 <quorem+0x4a>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d030      	beq.n	8008ad2 <quorem+0xf6>
 8008a70:	0038      	movs	r0, r7
 8008a72:	9904      	ldr	r1, [sp, #16]
 8008a74:	f7fe fa30 	bl	8006ed8 <__mcmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	db21      	blt.n	8008ac0 <quorem+0xe4>
 8008a7c:	0038      	movs	r0, r7
 8008a7e:	2600      	movs	r6, #0
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	9c04      	ldr	r4, [sp, #16]
 8008a84:	3301      	adds	r3, #1
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	3014      	adds	r0, #20
 8008a8a:	3414      	adds	r4, #20
 8008a8c:	6803      	ldr	r3, [r0, #0]
 8008a8e:	cc02      	ldmia	r4!, {r1}
 8008a90:	b29d      	uxth	r5, r3
 8008a92:	19ad      	adds	r5, r5, r6
 8008a94:	b28a      	uxth	r2, r1
 8008a96:	1aaa      	subs	r2, r5, r2
 8008a98:	0c09      	lsrs	r1, r1, #16
 8008a9a:	0c1b      	lsrs	r3, r3, #16
 8008a9c:	1a5b      	subs	r3, r3, r1
 8008a9e:	1411      	asrs	r1, r2, #16
 8008aa0:	185b      	adds	r3, r3, r1
 8008aa2:	141e      	asrs	r6, r3, #16
 8008aa4:	b292      	uxth	r2, r2
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	c008      	stmia	r0!, {r3}
 8008aac:	9b05      	ldr	r3, [sp, #20]
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	d2ec      	bcs.n	8008a8c <quorem+0xb0>
 8008ab2:	9b01      	ldr	r3, [sp, #4]
 8008ab4:	9a03      	ldr	r2, [sp, #12]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	18d3      	adds	r3, r2, r3
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d015      	beq.n	8008aec <quorem+0x110>
 8008ac0:	9802      	ldr	r0, [sp, #8]
 8008ac2:	b009      	add	sp, #36	; 0x24
 8008ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <quorem+0xfe>
 8008acc:	9b01      	ldr	r3, [sp, #4]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	3c04      	subs	r4, #4
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	d3f5      	bcc.n	8008ac6 <quorem+0xea>
 8008ada:	9b01      	ldr	r3, [sp, #4]
 8008adc:	613b      	str	r3, [r7, #16]
 8008ade:	e7c7      	b.n	8008a70 <quorem+0x94>
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	d106      	bne.n	8008af4 <quorem+0x118>
 8008ae6:	9a01      	ldr	r2, [sp, #4]
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	9a03      	ldr	r2, [sp, #12]
 8008aee:	3b04      	subs	r3, #4
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d3f5      	bcc.n	8008ae0 <quorem+0x104>
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	613b      	str	r3, [r7, #16]
 8008af8:	e7e2      	b.n	8008ac0 <quorem+0xe4>
	...

08008afc <_dtoa_r>:
 8008afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008afe:	0014      	movs	r4, r2
 8008b00:	001d      	movs	r5, r3
 8008b02:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008b04:	b09d      	sub	sp, #116	; 0x74
 8008b06:	9408      	str	r4, [sp, #32]
 8008b08:	9509      	str	r5, [sp, #36]	; 0x24
 8008b0a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8008b0c:	9004      	str	r0, [sp, #16]
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d009      	beq.n	8008b26 <_dtoa_r+0x2a>
 8008b12:	2301      	movs	r3, #1
 8008b14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008b16:	4093      	lsls	r3, r2
 8008b18:	604a      	str	r2, [r1, #4]
 8008b1a:	608b      	str	r3, [r1, #8]
 8008b1c:	f7fd ffce 	bl	8006abc <_Bfree>
 8008b20:	2300      	movs	r3, #0
 8008b22:	9a04      	ldr	r2, [sp, #16]
 8008b24:	6393      	str	r3, [r2, #56]	; 0x38
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	da1e      	bge.n	8008b68 <_dtoa_r+0x6c>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	006b      	lsls	r3, r5, #1
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b36:	4bb5      	ldr	r3, [pc, #724]	; (8008e0c <_dtoa_r+0x310>)
 8008b38:	4ab4      	ldr	r2, [pc, #720]	; (8008e0c <_dtoa_r+0x310>)
 8008b3a:	403b      	ands	r3, r7
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d116      	bne.n	8008b6e <_dtoa_r+0x72>
 8008b40:	4bb3      	ldr	r3, [pc, #716]	; (8008e10 <_dtoa_r+0x314>)
 8008b42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	033b      	lsls	r3, r7, #12
 8008b48:	0b1b      	lsrs	r3, r3, #12
 8008b4a:	4323      	orrs	r3, r4
 8008b4c:	d101      	bne.n	8008b52 <_dtoa_r+0x56>
 8008b4e:	f000 fdb2 	bl	80096b6 <_dtoa_r+0xbba>
 8008b52:	4bb0      	ldr	r3, [pc, #704]	; (8008e14 <_dtoa_r+0x318>)
 8008b54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b56:	9306      	str	r3, [sp, #24]
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	d002      	beq.n	8008b62 <_dtoa_r+0x66>
 8008b5c:	4bae      	ldr	r3, [pc, #696]	; (8008e18 <_dtoa_r+0x31c>)
 8008b5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	9806      	ldr	r0, [sp, #24]
 8008b64:	b01d      	add	sp, #116	; 0x74
 8008b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b68:	2300      	movs	r3, #0
 8008b6a:	6033      	str	r3, [r6, #0]
 8008b6c:	e7e2      	b.n	8008b34 <_dtoa_r+0x38>
 8008b6e:	9a08      	ldr	r2, [sp, #32]
 8008b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b72:	9210      	str	r2, [sp, #64]	; 0x40
 8008b74:	9311      	str	r3, [sp, #68]	; 0x44
 8008b76:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b78:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f7f7 fc63 	bl	8000448 <__aeabi_dcmpeq>
 8008b82:	1e06      	subs	r6, r0, #0
 8008b84:	d009      	beq.n	8008b9a <_dtoa_r+0x9e>
 8008b86:	2301      	movs	r3, #1
 8008b88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	4ba3      	ldr	r3, [pc, #652]	; (8008e1c <_dtoa_r+0x320>)
 8008b8e:	9306      	str	r3, [sp, #24]
 8008b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0e5      	beq.n	8008b62 <_dtoa_r+0x66>
 8008b96:	4ba2      	ldr	r3, [pc, #648]	; (8008e20 <_dtoa_r+0x324>)
 8008b98:	e7e1      	b.n	8008b5e <_dtoa_r+0x62>
 8008b9a:	ab1a      	add	r3, sp, #104	; 0x68
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	9804      	ldr	r0, [sp, #16]
 8008ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ba8:	f7fe fa4a 	bl	8007040 <__d2b>
 8008bac:	007a      	lsls	r2, r7, #1
 8008bae:	9005      	str	r0, [sp, #20]
 8008bb0:	0d52      	lsrs	r2, r2, #21
 8008bb2:	d100      	bne.n	8008bb6 <_dtoa_r+0xba>
 8008bb4:	e07b      	b.n	8008cae <_dtoa_r+0x1b2>
 8008bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bb8:	9617      	str	r6, [sp, #92]	; 0x5c
 8008bba:	0319      	lsls	r1, r3, #12
 8008bbc:	4b99      	ldr	r3, [pc, #612]	; (8008e24 <_dtoa_r+0x328>)
 8008bbe:	0b09      	lsrs	r1, r1, #12
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	4999      	ldr	r1, [pc, #612]	; (8008e28 <_dtoa_r+0x32c>)
 8008bc4:	1857      	adds	r7, r2, r1
 8008bc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008bc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008bca:	0019      	movs	r1, r3
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4b97      	ldr	r3, [pc, #604]	; (8008e2c <_dtoa_r+0x330>)
 8008bd0:	f7f8 ff70 	bl	8001ab4 <__aeabi_dsub>
 8008bd4:	4a96      	ldr	r2, [pc, #600]	; (8008e30 <_dtoa_r+0x334>)
 8008bd6:	4b97      	ldr	r3, [pc, #604]	; (8008e34 <_dtoa_r+0x338>)
 8008bd8:	f7f8 fcaa 	bl	8001530 <__aeabi_dmul>
 8008bdc:	4a96      	ldr	r2, [pc, #600]	; (8008e38 <_dtoa_r+0x33c>)
 8008bde:	4b97      	ldr	r3, [pc, #604]	; (8008e3c <_dtoa_r+0x340>)
 8008be0:	f7f7 fd4c 	bl	800067c <__aeabi_dadd>
 8008be4:	0004      	movs	r4, r0
 8008be6:	0038      	movs	r0, r7
 8008be8:	000d      	movs	r5, r1
 8008bea:	f7f9 fb39 	bl	8002260 <__aeabi_i2d>
 8008bee:	4a94      	ldr	r2, [pc, #592]	; (8008e40 <_dtoa_r+0x344>)
 8008bf0:	4b94      	ldr	r3, [pc, #592]	; (8008e44 <_dtoa_r+0x348>)
 8008bf2:	f7f8 fc9d 	bl	8001530 <__aeabi_dmul>
 8008bf6:	0002      	movs	r2, r0
 8008bf8:	000b      	movs	r3, r1
 8008bfa:	0020      	movs	r0, r4
 8008bfc:	0029      	movs	r1, r5
 8008bfe:	f7f7 fd3d 	bl	800067c <__aeabi_dadd>
 8008c02:	0004      	movs	r4, r0
 8008c04:	000d      	movs	r5, r1
 8008c06:	f7f9 faf5 	bl	80021f4 <__aeabi_d2iz>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	9003      	str	r0, [sp, #12]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	0020      	movs	r0, r4
 8008c12:	0029      	movs	r1, r5
 8008c14:	f7f7 fc1e 	bl	8000454 <__aeabi_dcmplt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d00b      	beq.n	8008c34 <_dtoa_r+0x138>
 8008c1c:	9803      	ldr	r0, [sp, #12]
 8008c1e:	f7f9 fb1f 	bl	8002260 <__aeabi_i2d>
 8008c22:	002b      	movs	r3, r5
 8008c24:	0022      	movs	r2, r4
 8008c26:	f7f7 fc0f 	bl	8000448 <__aeabi_dcmpeq>
 8008c2a:	4243      	negs	r3, r0
 8008c2c:	4158      	adcs	r0, r3
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	1a1b      	subs	r3, r3, r0
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	2301      	movs	r3, #1
 8008c36:	9316      	str	r3, [sp, #88]	; 0x58
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	2b16      	cmp	r3, #22
 8008c3c:	d810      	bhi.n	8008c60 <_dtoa_r+0x164>
 8008c3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c42:	9a03      	ldr	r2, [sp, #12]
 8008c44:	4b80      	ldr	r3, [pc, #512]	; (8008e48 <_dtoa_r+0x34c>)
 8008c46:	00d2      	lsls	r2, r2, #3
 8008c48:	189b      	adds	r3, r3, r2
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f7f7 fc01 	bl	8000454 <__aeabi_dcmplt>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d047      	beq.n	8008ce6 <_dtoa_r+0x1ea>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9316      	str	r3, [sp, #88]	; 0x58
 8008c60:	2200      	movs	r2, #0
 8008c62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008c64:	920a      	str	r2, [sp, #40]	; 0x28
 8008c66:	1bdb      	subs	r3, r3, r7
 8008c68:	1e5a      	subs	r2, r3, #1
 8008c6a:	d53e      	bpl.n	8008cea <_dtoa_r+0x1ee>
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	930a      	str	r3, [sp, #40]	; 0x28
 8008c72:	2300      	movs	r3, #0
 8008c74:	930c      	str	r3, [sp, #48]	; 0x30
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	db38      	blt.n	8008cee <_dtoa_r+0x1f2>
 8008c7c:	9a03      	ldr	r2, [sp, #12]
 8008c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c80:	4694      	mov	ip, r2
 8008c82:	4463      	add	r3, ip
 8008c84:	930c      	str	r3, [sp, #48]	; 0x30
 8008c86:	2300      	movs	r3, #0
 8008c88:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c8e:	2401      	movs	r4, #1
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d867      	bhi.n	8008d64 <_dtoa_r+0x268>
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	dd02      	ble.n	8008c9e <_dtoa_r+0x1a2>
 8008c98:	2400      	movs	r4, #0
 8008c9a:	3b04      	subs	r3, #4
 8008c9c:	9322      	str	r3, [sp, #136]	; 0x88
 8008c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ca0:	1e98      	subs	r0, r3, #2
 8008ca2:	2803      	cmp	r0, #3
 8008ca4:	d867      	bhi.n	8008d76 <_dtoa_r+0x27a>
 8008ca6:	f7f7 fa35 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008caa:	3a2b      	.short	0x3a2b
 8008cac:	5b38      	.short	0x5b38
 8008cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cb0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008cb2:	18f6      	adds	r6, r6, r3
 8008cb4:	4b65      	ldr	r3, [pc, #404]	; (8008e4c <_dtoa_r+0x350>)
 8008cb6:	18f2      	adds	r2, r6, r3
 8008cb8:	2a20      	cmp	r2, #32
 8008cba:	dd0f      	ble.n	8008cdc <_dtoa_r+0x1e0>
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	409f      	lsls	r7, r3
 8008cc2:	4b63      	ldr	r3, [pc, #396]	; (8008e50 <_dtoa_r+0x354>)
 8008cc4:	0038      	movs	r0, r7
 8008cc6:	18f3      	adds	r3, r6, r3
 8008cc8:	40dc      	lsrs	r4, r3
 8008cca:	4320      	orrs	r0, r4
 8008ccc:	f7f9 faf8 	bl	80022c0 <__aeabi_ui2d>
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4b60      	ldr	r3, [pc, #384]	; (8008e54 <_dtoa_r+0x358>)
 8008cd4:	1e77      	subs	r7, r6, #1
 8008cd6:	18cb      	adds	r3, r1, r3
 8008cd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cda:	e776      	b.n	8008bca <_dtoa_r+0xce>
 8008cdc:	2320      	movs	r3, #32
 8008cde:	0020      	movs	r0, r4
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	4098      	lsls	r0, r3
 8008ce4:	e7f2      	b.n	8008ccc <_dtoa_r+0x1d0>
 8008ce6:	9016      	str	r0, [sp, #88]	; 0x58
 8008ce8:	e7ba      	b.n	8008c60 <_dtoa_r+0x164>
 8008cea:	920c      	str	r2, [sp, #48]	; 0x30
 8008cec:	e7c3      	b.n	8008c76 <_dtoa_r+0x17a>
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	9a03      	ldr	r2, [sp, #12]
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf6:	4253      	negs	r3, r2
 8008cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cfe:	e7c5      	b.n	8008c8c <_dtoa_r+0x190>
 8008d00:	2300      	movs	r3, #0
 8008d02:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d08:	9307      	str	r3, [sp, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dc13      	bgt.n	8008d36 <_dtoa_r+0x23a>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	001a      	movs	r2, r3
 8008d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d14:	9307      	str	r3, [sp, #28]
 8008d16:	9223      	str	r2, [sp, #140]	; 0x8c
 8008d18:	e00d      	b.n	8008d36 <_dtoa_r+0x23a>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e7f1      	b.n	8008d02 <_dtoa_r+0x206>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008d22:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d24:	4694      	mov	ip, r2
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	4463      	add	r3, ip
 8008d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dc00      	bgt.n	8008d36 <_dtoa_r+0x23a>
 8008d34:	2301      	movs	r3, #1
 8008d36:	2100      	movs	r1, #0
 8008d38:	2204      	movs	r2, #4
 8008d3a:	0010      	movs	r0, r2
 8008d3c:	3014      	adds	r0, #20
 8008d3e:	4298      	cmp	r0, r3
 8008d40:	d91d      	bls.n	8008d7e <_dtoa_r+0x282>
 8008d42:	9b04      	ldr	r3, [sp, #16]
 8008d44:	0018      	movs	r0, r3
 8008d46:	63d9      	str	r1, [r3, #60]	; 0x3c
 8008d48:	f7fd fe90 	bl	8006a6c <_Balloc>
 8008d4c:	9006      	str	r0, [sp, #24]
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d118      	bne.n	8008d84 <_dtoa_r+0x288>
 8008d52:	21b0      	movs	r1, #176	; 0xb0
 8008d54:	4b40      	ldr	r3, [pc, #256]	; (8008e58 <_dtoa_r+0x35c>)
 8008d56:	4841      	ldr	r0, [pc, #260]	; (8008e5c <_dtoa_r+0x360>)
 8008d58:	9a06      	ldr	r2, [sp, #24]
 8008d5a:	31ff      	adds	r1, #255	; 0xff
 8008d5c:	f7ff fdd2 	bl	8008904 <__assert_func>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e7dd      	b.n	8008d20 <_dtoa_r+0x224>
 8008d64:	2300      	movs	r3, #0
 8008d66:	940f      	str	r4, [sp, #60]	; 0x3c
 8008d68:	9322      	str	r3, [sp, #136]	; 0x88
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d6e:	9307      	str	r3, [sp, #28]
 8008d70:	2200      	movs	r2, #0
 8008d72:	3313      	adds	r3, #19
 8008d74:	e7cf      	b.n	8008d16 <_dtoa_r+0x21a>
 8008d76:	2301      	movs	r3, #1
 8008d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d7a:	3b02      	subs	r3, #2
 8008d7c:	e7f6      	b.n	8008d6c <_dtoa_r+0x270>
 8008d7e:	3101      	adds	r1, #1
 8008d80:	0052      	lsls	r2, r2, #1
 8008d82:	e7da      	b.n	8008d3a <_dtoa_r+0x23e>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	9a06      	ldr	r2, [sp, #24]
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38
 8008d8a:	9b07      	ldr	r3, [sp, #28]
 8008d8c:	2b0e      	cmp	r3, #14
 8008d8e:	d900      	bls.n	8008d92 <_dtoa_r+0x296>
 8008d90:	e0e3      	b.n	8008f5a <_dtoa_r+0x45e>
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	d100      	bne.n	8008d98 <_dtoa_r+0x29c>
 8008d96:	e0e0      	b.n	8008f5a <_dtoa_r+0x45e>
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dd62      	ble.n	8008e64 <_dtoa_r+0x368>
 8008d9e:	210f      	movs	r1, #15
 8008da0:	9a03      	ldr	r2, [sp, #12]
 8008da2:	4b29      	ldr	r3, [pc, #164]	; (8008e48 <_dtoa_r+0x34c>)
 8008da4:	400a      	ands	r2, r1
 8008da6:	00d2      	lsls	r2, r2, #3
 8008da8:	189b      	adds	r3, r3, r2
 8008daa:	681e      	ldr	r6, [r3, #0]
 8008dac:	685f      	ldr	r7, [r3, #4]
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	2402      	movs	r4, #2
 8008db2:	111d      	asrs	r5, r3, #4
 8008db4:	05db      	lsls	r3, r3, #23
 8008db6:	d50a      	bpl.n	8008dce <_dtoa_r+0x2d2>
 8008db8:	4b29      	ldr	r3, [pc, #164]	; (8008e60 <_dtoa_r+0x364>)
 8008dba:	400d      	ands	r5, r1
 8008dbc:	6a1a      	ldr	r2, [r3, #32]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008dc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008dc4:	f7f7 ffba 	bl	8000d3c <__aeabi_ddiv>
 8008dc8:	9008      	str	r0, [sp, #32]
 8008dca:	9109      	str	r1, [sp, #36]	; 0x24
 8008dcc:	3401      	adds	r4, #1
 8008dce:	4b24      	ldr	r3, [pc, #144]	; (8008e60 <_dtoa_r+0x364>)
 8008dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	d108      	bne.n	8008de8 <_dtoa_r+0x2ec>
 8008dd6:	9808      	ldr	r0, [sp, #32]
 8008dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dda:	0032      	movs	r2, r6
 8008ddc:	003b      	movs	r3, r7
 8008dde:	f7f7 ffad 	bl	8000d3c <__aeabi_ddiv>
 8008de2:	9008      	str	r0, [sp, #32]
 8008de4:	9109      	str	r1, [sp, #36]	; 0x24
 8008de6:	e058      	b.n	8008e9a <_dtoa_r+0x39e>
 8008de8:	2301      	movs	r3, #1
 8008dea:	421d      	tst	r5, r3
 8008dec:	d009      	beq.n	8008e02 <_dtoa_r+0x306>
 8008dee:	18e4      	adds	r4, r4, r3
 8008df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df2:	0030      	movs	r0, r6
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	0039      	movs	r1, r7
 8008dfa:	f7f8 fb99 	bl	8001530 <__aeabi_dmul>
 8008dfe:	0006      	movs	r6, r0
 8008e00:	000f      	movs	r7, r1
 8008e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e04:	106d      	asrs	r5, r5, #1
 8008e06:	3308      	adds	r3, #8
 8008e08:	e7e2      	b.n	8008dd0 <_dtoa_r+0x2d4>
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	7ff00000 	.word	0x7ff00000
 8008e10:	0000270f 	.word	0x0000270f
 8008e14:	0800b2c5 	.word	0x0800b2c5
 8008e18:	0800b2c8 	.word	0x0800b2c8
 8008e1c:	0800b25e 	.word	0x0800b25e
 8008e20:	0800b25f 	.word	0x0800b25f
 8008e24:	3ff00000 	.word	0x3ff00000
 8008e28:	fffffc01 	.word	0xfffffc01
 8008e2c:	3ff80000 	.word	0x3ff80000
 8008e30:	636f4361 	.word	0x636f4361
 8008e34:	3fd287a7 	.word	0x3fd287a7
 8008e38:	8b60c8b3 	.word	0x8b60c8b3
 8008e3c:	3fc68a28 	.word	0x3fc68a28
 8008e40:	509f79fb 	.word	0x509f79fb
 8008e44:	3fd34413 	.word	0x3fd34413
 8008e48:	0800b158 	.word	0x0800b158
 8008e4c:	00000432 	.word	0x00000432
 8008e50:	00000412 	.word	0x00000412
 8008e54:	fe100000 	.word	0xfe100000
 8008e58:	0800b0c3 	.word	0x0800b0c3
 8008e5c:	0800b2c9 	.word	0x0800b2c9
 8008e60:	0800b130 	.word	0x0800b130
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	2402      	movs	r4, #2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d016      	beq.n	8008e9a <_dtoa_r+0x39e>
 8008e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e70:	220f      	movs	r2, #15
 8008e72:	425d      	negs	r5, r3
 8008e74:	402a      	ands	r2, r5
 8008e76:	4bdd      	ldr	r3, [pc, #884]	; (80091ec <_dtoa_r+0x6f0>)
 8008e78:	00d2      	lsls	r2, r2, #3
 8008e7a:	189b      	adds	r3, r3, r2
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f7f8 fb56 	bl	8001530 <__aeabi_dmul>
 8008e84:	2701      	movs	r7, #1
 8008e86:	2300      	movs	r3, #0
 8008e88:	9008      	str	r0, [sp, #32]
 8008e8a:	9109      	str	r1, [sp, #36]	; 0x24
 8008e8c:	4ed8      	ldr	r6, [pc, #864]	; (80091f0 <_dtoa_r+0x6f4>)
 8008e8e:	112d      	asrs	r5, r5, #4
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	d000      	beq.n	8008e96 <_dtoa_r+0x39a>
 8008e94:	e091      	b.n	8008fba <_dtoa_r+0x4be>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1a3      	bne.n	8008de2 <_dtoa_r+0x2e6>
 8008e9a:	9e08      	ldr	r6, [sp, #32]
 8008e9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d100      	bne.n	8008ea6 <_dtoa_r+0x3aa>
 8008ea4:	e094      	b.n	8008fd0 <_dtoa_r+0x4d4>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	0030      	movs	r0, r6
 8008eaa:	0039      	movs	r1, r7
 8008eac:	4bd1      	ldr	r3, [pc, #836]	; (80091f4 <_dtoa_r+0x6f8>)
 8008eae:	f7f7 fad1 	bl	8000454 <__aeabi_dcmplt>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d100      	bne.n	8008eb8 <_dtoa_r+0x3bc>
 8008eb6:	e08b      	b.n	8008fd0 <_dtoa_r+0x4d4>
 8008eb8:	9b07      	ldr	r3, [sp, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d100      	bne.n	8008ec0 <_dtoa_r+0x3c4>
 8008ebe:	e087      	b.n	8008fd0 <_dtoa_r+0x4d4>
 8008ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dd45      	ble.n	8008f52 <_dtoa_r+0x456>
 8008ec6:	9b03      	ldr	r3, [sp, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ece:	0030      	movs	r0, r6
 8008ed0:	4bc9      	ldr	r3, [pc, #804]	; (80091f8 <_dtoa_r+0x6fc>)
 8008ed2:	0039      	movs	r1, r7
 8008ed4:	f7f8 fb2c 	bl	8001530 <__aeabi_dmul>
 8008ed8:	9008      	str	r0, [sp, #32]
 8008eda:	9109      	str	r1, [sp, #36]	; 0x24
 8008edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ede:	3401      	adds	r4, #1
 8008ee0:	0020      	movs	r0, r4
 8008ee2:	9e08      	ldr	r6, [sp, #32]
 8008ee4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ee6:	9312      	str	r3, [sp, #72]	; 0x48
 8008ee8:	f7f9 f9ba 	bl	8002260 <__aeabi_i2d>
 8008eec:	0032      	movs	r2, r6
 8008eee:	003b      	movs	r3, r7
 8008ef0:	f7f8 fb1e 	bl	8001530 <__aeabi_dmul>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4bc1      	ldr	r3, [pc, #772]	; (80091fc <_dtoa_r+0x700>)
 8008ef8:	f7f7 fbc0 	bl	800067c <__aeabi_dadd>
 8008efc:	4ac0      	ldr	r2, [pc, #768]	; (8009200 <_dtoa_r+0x704>)
 8008efe:	9014      	str	r0, [sp, #80]	; 0x50
 8008f00:	9115      	str	r1, [sp, #84]	; 0x54
 8008f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008f06:	4694      	mov	ip, r2
 8008f08:	9308      	str	r3, [sp, #32]
 8008f0a:	9409      	str	r4, [sp, #36]	; 0x24
 8008f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f0e:	4463      	add	r3, ip
 8008f10:	9318      	str	r3, [sp, #96]	; 0x60
 8008f12:	9309      	str	r3, [sp, #36]	; 0x24
 8008f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d15e      	bne.n	8008fd8 <_dtoa_r+0x4dc>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4bb9      	ldr	r3, [pc, #740]	; (8009204 <_dtoa_r+0x708>)
 8008f1e:	0030      	movs	r0, r6
 8008f20:	0039      	movs	r1, r7
 8008f22:	f7f8 fdc7 	bl	8001ab4 <__aeabi_dsub>
 8008f26:	9a08      	ldr	r2, [sp, #32]
 8008f28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f2a:	0004      	movs	r4, r0
 8008f2c:	000d      	movs	r5, r1
 8008f2e:	f7f7 faa5 	bl	800047c <__aeabi_dcmpgt>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d000      	beq.n	8008f38 <_dtoa_r+0x43c>
 8008f36:	e2b3      	b.n	80094a0 <_dtoa_r+0x9a4>
 8008f38:	48b3      	ldr	r0, [pc, #716]	; (8009208 <_dtoa_r+0x70c>)
 8008f3a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008f3c:	4684      	mov	ip, r0
 8008f3e:	4461      	add	r1, ip
 8008f40:	000b      	movs	r3, r1
 8008f42:	0020      	movs	r0, r4
 8008f44:	0029      	movs	r1, r5
 8008f46:	9a08      	ldr	r2, [sp, #32]
 8008f48:	f7f7 fa84 	bl	8000454 <__aeabi_dcmplt>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d000      	beq.n	8008f52 <_dtoa_r+0x456>
 8008f50:	e2a3      	b.n	800949a <_dtoa_r+0x99e>
 8008f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008f56:	9308      	str	r3, [sp, #32]
 8008f58:	9409      	str	r4, [sp, #36]	; 0x24
 8008f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	da00      	bge.n	8008f62 <_dtoa_r+0x466>
 8008f60:	e179      	b.n	8009256 <_dtoa_r+0x75a>
 8008f62:	9a03      	ldr	r2, [sp, #12]
 8008f64:	2a0e      	cmp	r2, #14
 8008f66:	dd00      	ble.n	8008f6a <_dtoa_r+0x46e>
 8008f68:	e175      	b.n	8009256 <_dtoa_r+0x75a>
 8008f6a:	4ba0      	ldr	r3, [pc, #640]	; (80091ec <_dtoa_r+0x6f0>)
 8008f6c:	00d2      	lsls	r2, r2, #3
 8008f6e:	189b      	adds	r3, r3, r2
 8008f70:	681e      	ldr	r6, [r3, #0]
 8008f72:	685f      	ldr	r7, [r3, #4]
 8008f74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	db00      	blt.n	8008f7c <_dtoa_r+0x480>
 8008f7a:	e0e5      	b.n	8009148 <_dtoa_r+0x64c>
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd00      	ble.n	8008f84 <_dtoa_r+0x488>
 8008f82:	e0e1      	b.n	8009148 <_dtoa_r+0x64c>
 8008f84:	d000      	beq.n	8008f88 <_dtoa_r+0x48c>
 8008f86:	e288      	b.n	800949a <_dtoa_r+0x99e>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	0030      	movs	r0, r6
 8008f8c:	0039      	movs	r1, r7
 8008f8e:	4b9d      	ldr	r3, [pc, #628]	; (8009204 <_dtoa_r+0x708>)
 8008f90:	f7f8 face 	bl	8001530 <__aeabi_dmul>
 8008f94:	9a08      	ldr	r2, [sp, #32]
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	f7f7 fa7a 	bl	8000490 <__aeabi_dcmpge>
 8008f9c:	9e07      	ldr	r6, [sp, #28]
 8008f9e:	0037      	movs	r7, r6
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d000      	beq.n	8008fa6 <_dtoa_r+0x4aa>
 8008fa4:	e25f      	b.n	8009466 <_dtoa_r+0x96a>
 8008fa6:	9b06      	ldr	r3, [sp, #24]
 8008fa8:	9a06      	ldr	r2, [sp, #24]
 8008faa:	3301      	adds	r3, #1
 8008fac:	9308      	str	r3, [sp, #32]
 8008fae:	2331      	movs	r3, #49	; 0x31
 8008fb0:	7013      	strb	r3, [r2, #0]
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	9303      	str	r3, [sp, #12]
 8008fb8:	e25a      	b.n	8009470 <_dtoa_r+0x974>
 8008fba:	423d      	tst	r5, r7
 8008fbc:	d005      	beq.n	8008fca <_dtoa_r+0x4ce>
 8008fbe:	6832      	ldr	r2, [r6, #0]
 8008fc0:	6873      	ldr	r3, [r6, #4]
 8008fc2:	f7f8 fab5 	bl	8001530 <__aeabi_dmul>
 8008fc6:	003b      	movs	r3, r7
 8008fc8:	3401      	adds	r4, #1
 8008fca:	106d      	asrs	r5, r5, #1
 8008fcc:	3608      	adds	r6, #8
 8008fce:	e75f      	b.n	8008e90 <_dtoa_r+0x394>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	930e      	str	r3, [sp, #56]	; 0x38
 8008fd4:	9b07      	ldr	r3, [sp, #28]
 8008fd6:	e783      	b.n	8008ee0 <_dtoa_r+0x3e4>
 8008fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fda:	4b84      	ldr	r3, [pc, #528]	; (80091ec <_dtoa_r+0x6f0>)
 8008fdc:	3a01      	subs	r2, #1
 8008fde:	00d2      	lsls	r2, r2, #3
 8008fe0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fe2:	189b      	adds	r3, r3, r2
 8008fe4:	9c08      	ldr	r4, [sp, #32]
 8008fe6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2900      	cmp	r1, #0
 8008fee:	d051      	beq.n	8009094 <_dtoa_r+0x598>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	4986      	ldr	r1, [pc, #536]	; (800920c <_dtoa_r+0x710>)
 8008ff4:	f7f7 fea2 	bl	8000d3c <__aeabi_ddiv>
 8008ff8:	0022      	movs	r2, r4
 8008ffa:	002b      	movs	r3, r5
 8008ffc:	f7f8 fd5a 	bl	8001ab4 <__aeabi_dsub>
 8009000:	9a06      	ldr	r2, [sp, #24]
 8009002:	0004      	movs	r4, r0
 8009004:	4694      	mov	ip, r2
 8009006:	000d      	movs	r5, r1
 8009008:	9b06      	ldr	r3, [sp, #24]
 800900a:	9314      	str	r3, [sp, #80]	; 0x50
 800900c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800900e:	4463      	add	r3, ip
 8009010:	9318      	str	r3, [sp, #96]	; 0x60
 8009012:	0039      	movs	r1, r7
 8009014:	0030      	movs	r0, r6
 8009016:	f7f9 f8ed 	bl	80021f4 <__aeabi_d2iz>
 800901a:	9012      	str	r0, [sp, #72]	; 0x48
 800901c:	f7f9 f920 	bl	8002260 <__aeabi_i2d>
 8009020:	0002      	movs	r2, r0
 8009022:	000b      	movs	r3, r1
 8009024:	0030      	movs	r0, r6
 8009026:	0039      	movs	r1, r7
 8009028:	f7f8 fd44 	bl	8001ab4 <__aeabi_dsub>
 800902c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800902e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009030:	3301      	adds	r3, #1
 8009032:	9308      	str	r3, [sp, #32]
 8009034:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009036:	0006      	movs	r6, r0
 8009038:	3330      	adds	r3, #48	; 0x30
 800903a:	7013      	strb	r3, [r2, #0]
 800903c:	0022      	movs	r2, r4
 800903e:	002b      	movs	r3, r5
 8009040:	000f      	movs	r7, r1
 8009042:	f7f7 fa07 	bl	8000454 <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	d174      	bne.n	8009134 <_dtoa_r+0x638>
 800904a:	0032      	movs	r2, r6
 800904c:	003b      	movs	r3, r7
 800904e:	2000      	movs	r0, #0
 8009050:	4968      	ldr	r1, [pc, #416]	; (80091f4 <_dtoa_r+0x6f8>)
 8009052:	f7f8 fd2f 	bl	8001ab4 <__aeabi_dsub>
 8009056:	0022      	movs	r2, r4
 8009058:	002b      	movs	r3, r5
 800905a:	f7f7 f9fb 	bl	8000454 <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	d000      	beq.n	8009064 <_dtoa_r+0x568>
 8009062:	e0d7      	b.n	8009214 <_dtoa_r+0x718>
 8009064:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009066:	9a08      	ldr	r2, [sp, #32]
 8009068:	4293      	cmp	r3, r2
 800906a:	d100      	bne.n	800906e <_dtoa_r+0x572>
 800906c:	e771      	b.n	8008f52 <_dtoa_r+0x456>
 800906e:	2200      	movs	r2, #0
 8009070:	0020      	movs	r0, r4
 8009072:	0029      	movs	r1, r5
 8009074:	4b60      	ldr	r3, [pc, #384]	; (80091f8 <_dtoa_r+0x6fc>)
 8009076:	f7f8 fa5b 	bl	8001530 <__aeabi_dmul>
 800907a:	4b5f      	ldr	r3, [pc, #380]	; (80091f8 <_dtoa_r+0x6fc>)
 800907c:	0004      	movs	r4, r0
 800907e:	000d      	movs	r5, r1
 8009080:	0030      	movs	r0, r6
 8009082:	0039      	movs	r1, r7
 8009084:	2200      	movs	r2, #0
 8009086:	f7f8 fa53 	bl	8001530 <__aeabi_dmul>
 800908a:	9b08      	ldr	r3, [sp, #32]
 800908c:	0006      	movs	r6, r0
 800908e:	000f      	movs	r7, r1
 8009090:	9314      	str	r3, [sp, #80]	; 0x50
 8009092:	e7be      	b.n	8009012 <_dtoa_r+0x516>
 8009094:	0020      	movs	r0, r4
 8009096:	0029      	movs	r1, r5
 8009098:	f7f8 fa4a 	bl	8001530 <__aeabi_dmul>
 800909c:	9a06      	ldr	r2, [sp, #24]
 800909e:	9b06      	ldr	r3, [sp, #24]
 80090a0:	4694      	mov	ip, r2
 80090a2:	9308      	str	r3, [sp, #32]
 80090a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090a6:	9014      	str	r0, [sp, #80]	; 0x50
 80090a8:	9115      	str	r1, [sp, #84]	; 0x54
 80090aa:	4463      	add	r3, ip
 80090ac:	9319      	str	r3, [sp, #100]	; 0x64
 80090ae:	0030      	movs	r0, r6
 80090b0:	0039      	movs	r1, r7
 80090b2:	f7f9 f89f 	bl	80021f4 <__aeabi_d2iz>
 80090b6:	9018      	str	r0, [sp, #96]	; 0x60
 80090b8:	f7f9 f8d2 	bl	8002260 <__aeabi_i2d>
 80090bc:	0002      	movs	r2, r0
 80090be:	000b      	movs	r3, r1
 80090c0:	0030      	movs	r0, r6
 80090c2:	0039      	movs	r1, r7
 80090c4:	f7f8 fcf6 	bl	8001ab4 <__aeabi_dsub>
 80090c8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80090ca:	9b08      	ldr	r3, [sp, #32]
 80090cc:	3630      	adds	r6, #48	; 0x30
 80090ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090d0:	701e      	strb	r6, [r3, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	0004      	movs	r4, r0
 80090d6:	000d      	movs	r5, r1
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	4293      	cmp	r3, r2
 80090dc:	d12d      	bne.n	800913a <_dtoa_r+0x63e>
 80090de:	9814      	ldr	r0, [sp, #80]	; 0x50
 80090e0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80090e2:	9a06      	ldr	r2, [sp, #24]
 80090e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090e6:	4694      	mov	ip, r2
 80090e8:	4463      	add	r3, ip
 80090ea:	2200      	movs	r2, #0
 80090ec:	9308      	str	r3, [sp, #32]
 80090ee:	4b47      	ldr	r3, [pc, #284]	; (800920c <_dtoa_r+0x710>)
 80090f0:	f7f7 fac4 	bl	800067c <__aeabi_dadd>
 80090f4:	0002      	movs	r2, r0
 80090f6:	000b      	movs	r3, r1
 80090f8:	0020      	movs	r0, r4
 80090fa:	0029      	movs	r1, r5
 80090fc:	f7f7 f9be 	bl	800047c <__aeabi_dcmpgt>
 8009100:	2800      	cmp	r0, #0
 8009102:	d000      	beq.n	8009106 <_dtoa_r+0x60a>
 8009104:	e086      	b.n	8009214 <_dtoa_r+0x718>
 8009106:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800910a:	2000      	movs	r0, #0
 800910c:	493f      	ldr	r1, [pc, #252]	; (800920c <_dtoa_r+0x710>)
 800910e:	f7f8 fcd1 	bl	8001ab4 <__aeabi_dsub>
 8009112:	0002      	movs	r2, r0
 8009114:	000b      	movs	r3, r1
 8009116:	0020      	movs	r0, r4
 8009118:	0029      	movs	r1, r5
 800911a:	f7f7 f99b 	bl	8000454 <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	d100      	bne.n	8009124 <_dtoa_r+0x628>
 8009122:	e716      	b.n	8008f52 <_dtoa_r+0x456>
 8009124:	9b08      	ldr	r3, [sp, #32]
 8009126:	001a      	movs	r2, r3
 8009128:	3a01      	subs	r2, #1
 800912a:	9208      	str	r2, [sp, #32]
 800912c:	7812      	ldrb	r2, [r2, #0]
 800912e:	2a30      	cmp	r2, #48	; 0x30
 8009130:	d0f8      	beq.n	8009124 <_dtoa_r+0x628>
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009136:	9303      	str	r3, [sp, #12]
 8009138:	e046      	b.n	80091c8 <_dtoa_r+0x6cc>
 800913a:	2200      	movs	r2, #0
 800913c:	4b2e      	ldr	r3, [pc, #184]	; (80091f8 <_dtoa_r+0x6fc>)
 800913e:	f7f8 f9f7 	bl	8001530 <__aeabi_dmul>
 8009142:	0006      	movs	r6, r0
 8009144:	000f      	movs	r7, r1
 8009146:	e7b2      	b.n	80090ae <_dtoa_r+0x5b2>
 8009148:	9b06      	ldr	r3, [sp, #24]
 800914a:	9a06      	ldr	r2, [sp, #24]
 800914c:	930a      	str	r3, [sp, #40]	; 0x28
 800914e:	9b07      	ldr	r3, [sp, #28]
 8009150:	9c08      	ldr	r4, [sp, #32]
 8009152:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009154:	3b01      	subs	r3, #1
 8009156:	189b      	adds	r3, r3, r2
 8009158:	930b      	str	r3, [sp, #44]	; 0x2c
 800915a:	0032      	movs	r2, r6
 800915c:	003b      	movs	r3, r7
 800915e:	0020      	movs	r0, r4
 8009160:	0029      	movs	r1, r5
 8009162:	f7f7 fdeb 	bl	8000d3c <__aeabi_ddiv>
 8009166:	f7f9 f845 	bl	80021f4 <__aeabi_d2iz>
 800916a:	9007      	str	r0, [sp, #28]
 800916c:	f7f9 f878 	bl	8002260 <__aeabi_i2d>
 8009170:	0032      	movs	r2, r6
 8009172:	003b      	movs	r3, r7
 8009174:	f7f8 f9dc 	bl	8001530 <__aeabi_dmul>
 8009178:	0002      	movs	r2, r0
 800917a:	000b      	movs	r3, r1
 800917c:	0020      	movs	r0, r4
 800917e:	0029      	movs	r1, r5
 8009180:	f7f8 fc98 	bl	8001ab4 <__aeabi_dsub>
 8009184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009186:	001a      	movs	r2, r3
 8009188:	3201      	adds	r2, #1
 800918a:	920a      	str	r2, [sp, #40]	; 0x28
 800918c:	9208      	str	r2, [sp, #32]
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	3230      	adds	r2, #48	; 0x30
 8009192:	701a      	strb	r2, [r3, #0]
 8009194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009196:	429a      	cmp	r2, r3
 8009198:	d14f      	bne.n	800923a <_dtoa_r+0x73e>
 800919a:	0002      	movs	r2, r0
 800919c:	000b      	movs	r3, r1
 800919e:	f7f7 fa6d 	bl	800067c <__aeabi_dadd>
 80091a2:	0032      	movs	r2, r6
 80091a4:	003b      	movs	r3, r7
 80091a6:	0004      	movs	r4, r0
 80091a8:	000d      	movs	r5, r1
 80091aa:	f7f7 f967 	bl	800047c <__aeabi_dcmpgt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d12e      	bne.n	8009210 <_dtoa_r+0x714>
 80091b2:	0032      	movs	r2, r6
 80091b4:	003b      	movs	r3, r7
 80091b6:	0020      	movs	r0, r4
 80091b8:	0029      	movs	r1, r5
 80091ba:	f7f7 f945 	bl	8000448 <__aeabi_dcmpeq>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d002      	beq.n	80091c8 <_dtoa_r+0x6cc>
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	07de      	lsls	r6, r3, #31
 80091c6:	d423      	bmi.n	8009210 <_dtoa_r+0x714>
 80091c8:	9905      	ldr	r1, [sp, #20]
 80091ca:	9804      	ldr	r0, [sp, #16]
 80091cc:	f7fd fc76 	bl	8006abc <_Bfree>
 80091d0:	2300      	movs	r3, #0
 80091d2:	9a08      	ldr	r2, [sp, #32]
 80091d4:	7013      	strb	r3, [r2, #0]
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80091da:	3301      	adds	r3, #1
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d100      	bne.n	80091e6 <_dtoa_r+0x6ea>
 80091e4:	e4bd      	b.n	8008b62 <_dtoa_r+0x66>
 80091e6:	9a08      	ldr	r2, [sp, #32]
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e4ba      	b.n	8008b62 <_dtoa_r+0x66>
 80091ec:	0800b158 	.word	0x0800b158
 80091f0:	0800b130 	.word	0x0800b130
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	40240000 	.word	0x40240000
 80091fc:	401c0000 	.word	0x401c0000
 8009200:	fcc00000 	.word	0xfcc00000
 8009204:	40140000 	.word	0x40140000
 8009208:	7cc00000 	.word	0x7cc00000
 800920c:	3fe00000 	.word	0x3fe00000
 8009210:	9b03      	ldr	r3, [sp, #12]
 8009212:	930e      	str	r3, [sp, #56]	; 0x38
 8009214:	9b08      	ldr	r3, [sp, #32]
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	3b01      	subs	r3, #1
 800921a:	781a      	ldrb	r2, [r3, #0]
 800921c:	2a39      	cmp	r2, #57	; 0x39
 800921e:	d108      	bne.n	8009232 <_dtoa_r+0x736>
 8009220:	9a06      	ldr	r2, [sp, #24]
 8009222:	429a      	cmp	r2, r3
 8009224:	d1f7      	bne.n	8009216 <_dtoa_r+0x71a>
 8009226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009228:	9906      	ldr	r1, [sp, #24]
 800922a:	3201      	adds	r2, #1
 800922c:	920e      	str	r2, [sp, #56]	; 0x38
 800922e:	2230      	movs	r2, #48	; 0x30
 8009230:	700a      	strb	r2, [r1, #0]
 8009232:	781a      	ldrb	r2, [r3, #0]
 8009234:	3201      	adds	r2, #1
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	e77c      	b.n	8009134 <_dtoa_r+0x638>
 800923a:	2200      	movs	r2, #0
 800923c:	4ba9      	ldr	r3, [pc, #676]	; (80094e4 <_dtoa_r+0x9e8>)
 800923e:	f7f8 f977 	bl	8001530 <__aeabi_dmul>
 8009242:	2200      	movs	r2, #0
 8009244:	2300      	movs	r3, #0
 8009246:	0004      	movs	r4, r0
 8009248:	000d      	movs	r5, r1
 800924a:	f7f7 f8fd 	bl	8000448 <__aeabi_dcmpeq>
 800924e:	2800      	cmp	r0, #0
 8009250:	d100      	bne.n	8009254 <_dtoa_r+0x758>
 8009252:	e782      	b.n	800915a <_dtoa_r+0x65e>
 8009254:	e7b8      	b.n	80091c8 <_dtoa_r+0x6cc>
 8009256:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009258:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800925a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800925c:	2f00      	cmp	r7, #0
 800925e:	d012      	beq.n	8009286 <_dtoa_r+0x78a>
 8009260:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009262:	2a01      	cmp	r2, #1
 8009264:	dc6e      	bgt.n	8009344 <_dtoa_r+0x848>
 8009266:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009268:	2a00      	cmp	r2, #0
 800926a:	d065      	beq.n	8009338 <_dtoa_r+0x83c>
 800926c:	4a9e      	ldr	r2, [pc, #632]	; (80094e8 <_dtoa_r+0x9ec>)
 800926e:	189b      	adds	r3, r3, r2
 8009270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009272:	2101      	movs	r1, #1
 8009274:	18d2      	adds	r2, r2, r3
 8009276:	920a      	str	r2, [sp, #40]	; 0x28
 8009278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800927a:	9804      	ldr	r0, [sp, #16]
 800927c:	18d3      	adds	r3, r2, r3
 800927e:	930c      	str	r3, [sp, #48]	; 0x30
 8009280:	f7fd fcb2 	bl	8006be8 <__i2b>
 8009284:	0007      	movs	r7, r0
 8009286:	2c00      	cmp	r4, #0
 8009288:	d00e      	beq.n	80092a8 <_dtoa_r+0x7ac>
 800928a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800928c:	2b00      	cmp	r3, #0
 800928e:	dd0b      	ble.n	80092a8 <_dtoa_r+0x7ac>
 8009290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009292:	0023      	movs	r3, r4
 8009294:	4294      	cmp	r4, r2
 8009296:	dd00      	ble.n	800929a <_dtoa_r+0x79e>
 8009298:	0013      	movs	r3, r2
 800929a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800929c:	1ae4      	subs	r4, r4, r3
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	920a      	str	r2, [sp, #40]	; 0x28
 80092a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	930c      	str	r3, [sp, #48]	; 0x30
 80092a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01e      	beq.n	80092ec <_dtoa_r+0x7f0>
 80092ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d05c      	beq.n	800936e <_dtoa_r+0x872>
 80092b4:	2d00      	cmp	r5, #0
 80092b6:	dd10      	ble.n	80092da <_dtoa_r+0x7de>
 80092b8:	0039      	movs	r1, r7
 80092ba:	002a      	movs	r2, r5
 80092bc:	9804      	ldr	r0, [sp, #16]
 80092be:	f7fd fd5b 	bl	8006d78 <__pow5mult>
 80092c2:	9a05      	ldr	r2, [sp, #20]
 80092c4:	0001      	movs	r1, r0
 80092c6:	0007      	movs	r7, r0
 80092c8:	9804      	ldr	r0, [sp, #16]
 80092ca:	f7fd fca5 	bl	8006c18 <__multiply>
 80092ce:	0006      	movs	r6, r0
 80092d0:	9905      	ldr	r1, [sp, #20]
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	f7fd fbf2 	bl	8006abc <_Bfree>
 80092d8:	9605      	str	r6, [sp, #20]
 80092da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092dc:	1b5a      	subs	r2, r3, r5
 80092de:	42ab      	cmp	r3, r5
 80092e0:	d004      	beq.n	80092ec <_dtoa_r+0x7f0>
 80092e2:	9905      	ldr	r1, [sp, #20]
 80092e4:	9804      	ldr	r0, [sp, #16]
 80092e6:	f7fd fd47 	bl	8006d78 <__pow5mult>
 80092ea:	9005      	str	r0, [sp, #20]
 80092ec:	2101      	movs	r1, #1
 80092ee:	9804      	ldr	r0, [sp, #16]
 80092f0:	f7fd fc7a 	bl	8006be8 <__i2b>
 80092f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092f6:	0006      	movs	r6, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	dd3a      	ble.n	8009372 <_dtoa_r+0x876>
 80092fc:	001a      	movs	r2, r3
 80092fe:	0001      	movs	r1, r0
 8009300:	9804      	ldr	r0, [sp, #16]
 8009302:	f7fd fd39 	bl	8006d78 <__pow5mult>
 8009306:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009308:	0006      	movs	r6, r0
 800930a:	2500      	movs	r5, #0
 800930c:	2b01      	cmp	r3, #1
 800930e:	dc38      	bgt.n	8009382 <_dtoa_r+0x886>
 8009310:	2500      	movs	r5, #0
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	42ab      	cmp	r3, r5
 8009316:	d130      	bne.n	800937a <_dtoa_r+0x87e>
 8009318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931a:	031b      	lsls	r3, r3, #12
 800931c:	42ab      	cmp	r3, r5
 800931e:	d12c      	bne.n	800937a <_dtoa_r+0x87e>
 8009320:	4b72      	ldr	r3, [pc, #456]	; (80094ec <_dtoa_r+0x9f0>)
 8009322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009324:	4213      	tst	r3, r2
 8009326:	d028      	beq.n	800937a <_dtoa_r+0x87e>
 8009328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932a:	3501      	adds	r5, #1
 800932c:	3301      	adds	r3, #1
 800932e:	930a      	str	r3, [sp, #40]	; 0x28
 8009330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009332:	3301      	adds	r3, #1
 8009334:	930c      	str	r3, [sp, #48]	; 0x30
 8009336:	e020      	b.n	800937a <_dtoa_r+0x87e>
 8009338:	2336      	movs	r3, #54	; 0x36
 800933a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800933c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800933e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	e795      	b.n	8009270 <_dtoa_r+0x774>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	1e5d      	subs	r5, r3, #1
 8009348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800934a:	42ab      	cmp	r3, r5
 800934c:	db07      	blt.n	800935e <_dtoa_r+0x862>
 800934e:	1b5d      	subs	r5, r3, r5
 8009350:	9b07      	ldr	r3, [sp, #28]
 8009352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	da8b      	bge.n	8009270 <_dtoa_r+0x774>
 8009358:	1ae4      	subs	r4, r4, r3
 800935a:	2300      	movs	r3, #0
 800935c:	e788      	b.n	8009270 <_dtoa_r+0x774>
 800935e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009362:	1aeb      	subs	r3, r5, r3
 8009364:	18d3      	adds	r3, r2, r3
 8009366:	950d      	str	r5, [sp, #52]	; 0x34
 8009368:	9313      	str	r3, [sp, #76]	; 0x4c
 800936a:	2500      	movs	r5, #0
 800936c:	e7f0      	b.n	8009350 <_dtoa_r+0x854>
 800936e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009370:	e7b7      	b.n	80092e2 <_dtoa_r+0x7e6>
 8009372:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009374:	2500      	movs	r5, #0
 8009376:	2b01      	cmp	r3, #1
 8009378:	ddca      	ble.n	8009310 <_dtoa_r+0x814>
 800937a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800937c:	2001      	movs	r0, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <_dtoa_r+0x898>
 8009382:	6933      	ldr	r3, [r6, #16]
 8009384:	3303      	adds	r3, #3
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	18f3      	adds	r3, r6, r3
 800938a:	6858      	ldr	r0, [r3, #4]
 800938c:	f7fd fbe4 	bl	8006b58 <__hi0bits>
 8009390:	2320      	movs	r3, #32
 8009392:	1a18      	subs	r0, r3, r0
 8009394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009396:	1818      	adds	r0, r3, r0
 8009398:	0002      	movs	r2, r0
 800939a:	231f      	movs	r3, #31
 800939c:	401a      	ands	r2, r3
 800939e:	4218      	tst	r0, r3
 80093a0:	d047      	beq.n	8009432 <_dtoa_r+0x936>
 80093a2:	3301      	adds	r3, #1
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	dd3f      	ble.n	800942a <_dtoa_r+0x92e>
 80093aa:	231c      	movs	r3, #28
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b0:	18e4      	adds	r4, r4, r3
 80093b2:	18d2      	adds	r2, r2, r3
 80093b4:	920a      	str	r2, [sp, #40]	; 0x28
 80093b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b8:	18d3      	adds	r3, r2, r3
 80093ba:	930c      	str	r3, [sp, #48]	; 0x30
 80093bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dd05      	ble.n	80093ce <_dtoa_r+0x8d2>
 80093c2:	001a      	movs	r2, r3
 80093c4:	9905      	ldr	r1, [sp, #20]
 80093c6:	9804      	ldr	r0, [sp, #16]
 80093c8:	f7fd fd18 	bl	8006dfc <__lshift>
 80093cc:	9005      	str	r0, [sp, #20]
 80093ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dd05      	ble.n	80093e0 <_dtoa_r+0x8e4>
 80093d4:	0031      	movs	r1, r6
 80093d6:	001a      	movs	r2, r3
 80093d8:	9804      	ldr	r0, [sp, #16]
 80093da:	f7fd fd0f 	bl	8006dfc <__lshift>
 80093de:	0006      	movs	r6, r0
 80093e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d027      	beq.n	8009436 <_dtoa_r+0x93a>
 80093e6:	0031      	movs	r1, r6
 80093e8:	9805      	ldr	r0, [sp, #20]
 80093ea:	f7fd fd75 	bl	8006ed8 <__mcmp>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	da21      	bge.n	8009436 <_dtoa_r+0x93a>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	220a      	movs	r2, #10
 80093f6:	3b01      	subs	r3, #1
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	9905      	ldr	r1, [sp, #20]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9804      	ldr	r0, [sp, #16]
 8009400:	f7fd fb66 	bl	8006ad0 <__multadd>
 8009404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009406:	9005      	str	r0, [sp, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d100      	bne.n	800940e <_dtoa_r+0x912>
 800940c:	e15d      	b.n	80096ca <_dtoa_r+0xbce>
 800940e:	2300      	movs	r3, #0
 8009410:	0039      	movs	r1, r7
 8009412:	220a      	movs	r2, #10
 8009414:	9804      	ldr	r0, [sp, #16]
 8009416:	f7fd fb5b 	bl	8006ad0 <__multadd>
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	0007      	movs	r7, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	dc49      	bgt.n	80094b6 <_dtoa_r+0x9ba>
 8009422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009424:	2b02      	cmp	r3, #2
 8009426:	dc0e      	bgt.n	8009446 <_dtoa_r+0x94a>
 8009428:	e045      	b.n	80094b6 <_dtoa_r+0x9ba>
 800942a:	2b04      	cmp	r3, #4
 800942c:	d0c6      	beq.n	80093bc <_dtoa_r+0x8c0>
 800942e:	331c      	adds	r3, #28
 8009430:	e7bd      	b.n	80093ae <_dtoa_r+0x8b2>
 8009432:	0013      	movs	r3, r2
 8009434:	e7fb      	b.n	800942e <_dtoa_r+0x932>
 8009436:	9b07      	ldr	r3, [sp, #28]
 8009438:	2b00      	cmp	r3, #0
 800943a:	dc36      	bgt.n	80094aa <_dtoa_r+0x9ae>
 800943c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800943e:	2b02      	cmp	r3, #2
 8009440:	dd33      	ble.n	80094aa <_dtoa_r+0x9ae>
 8009442:	9b07      	ldr	r3, [sp, #28]
 8009444:	930b      	str	r3, [sp, #44]	; 0x2c
 8009446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10c      	bne.n	8009466 <_dtoa_r+0x96a>
 800944c:	0031      	movs	r1, r6
 800944e:	2205      	movs	r2, #5
 8009450:	9804      	ldr	r0, [sp, #16]
 8009452:	f7fd fb3d 	bl	8006ad0 <__multadd>
 8009456:	0006      	movs	r6, r0
 8009458:	0001      	movs	r1, r0
 800945a:	9805      	ldr	r0, [sp, #20]
 800945c:	f7fd fd3c 	bl	8006ed8 <__mcmp>
 8009460:	2800      	cmp	r0, #0
 8009462:	dd00      	ble.n	8009466 <_dtoa_r+0x96a>
 8009464:	e59f      	b.n	8008fa6 <_dtoa_r+0x4aa>
 8009466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009468:	43db      	mvns	r3, r3
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	9b06      	ldr	r3, [sp, #24]
 800946e:	9308      	str	r3, [sp, #32]
 8009470:	2500      	movs	r5, #0
 8009472:	0031      	movs	r1, r6
 8009474:	9804      	ldr	r0, [sp, #16]
 8009476:	f7fd fb21 	bl	8006abc <_Bfree>
 800947a:	2f00      	cmp	r7, #0
 800947c:	d100      	bne.n	8009480 <_dtoa_r+0x984>
 800947e:	e6a3      	b.n	80091c8 <_dtoa_r+0x6cc>
 8009480:	2d00      	cmp	r5, #0
 8009482:	d005      	beq.n	8009490 <_dtoa_r+0x994>
 8009484:	42bd      	cmp	r5, r7
 8009486:	d003      	beq.n	8009490 <_dtoa_r+0x994>
 8009488:	0029      	movs	r1, r5
 800948a:	9804      	ldr	r0, [sp, #16]
 800948c:	f7fd fb16 	bl	8006abc <_Bfree>
 8009490:	0039      	movs	r1, r7
 8009492:	9804      	ldr	r0, [sp, #16]
 8009494:	f7fd fb12 	bl	8006abc <_Bfree>
 8009498:	e696      	b.n	80091c8 <_dtoa_r+0x6cc>
 800949a:	2600      	movs	r6, #0
 800949c:	0037      	movs	r7, r6
 800949e:	e7e2      	b.n	8009466 <_dtoa_r+0x96a>
 80094a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80094a4:	9303      	str	r3, [sp, #12]
 80094a6:	0037      	movs	r7, r6
 80094a8:	e57d      	b.n	8008fa6 <_dtoa_r+0x4aa>
 80094aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d100      	bne.n	80094b2 <_dtoa_r+0x9b6>
 80094b0:	e0c3      	b.n	800963a <_dtoa_r+0xb3e>
 80094b2:	9b07      	ldr	r3, [sp, #28]
 80094b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80094b6:	2c00      	cmp	r4, #0
 80094b8:	dd05      	ble.n	80094c6 <_dtoa_r+0x9ca>
 80094ba:	0039      	movs	r1, r7
 80094bc:	0022      	movs	r2, r4
 80094be:	9804      	ldr	r0, [sp, #16]
 80094c0:	f7fd fc9c 	bl	8006dfc <__lshift>
 80094c4:	0007      	movs	r7, r0
 80094c6:	0038      	movs	r0, r7
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	d024      	beq.n	8009516 <_dtoa_r+0xa1a>
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	9804      	ldr	r0, [sp, #16]
 80094d0:	f7fd facc 	bl	8006a6c <_Balloc>
 80094d4:	1e04      	subs	r4, r0, #0
 80094d6:	d111      	bne.n	80094fc <_dtoa_r+0xa00>
 80094d8:	0022      	movs	r2, r4
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <_dtoa_r+0x9f4>)
 80094dc:	4805      	ldr	r0, [pc, #20]	; (80094f4 <_dtoa_r+0x9f8>)
 80094de:	4906      	ldr	r1, [pc, #24]	; (80094f8 <_dtoa_r+0x9fc>)
 80094e0:	e43c      	b.n	8008d5c <_dtoa_r+0x260>
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	40240000 	.word	0x40240000
 80094e8:	00000433 	.word	0x00000433
 80094ec:	7ff00000 	.word	0x7ff00000
 80094f0:	0800b0c3 	.word	0x0800b0c3
 80094f4:	0800b2c9 	.word	0x0800b2c9
 80094f8:	000002ef 	.word	0x000002ef
 80094fc:	0039      	movs	r1, r7
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	310c      	adds	r1, #12
 8009502:	3202      	adds	r2, #2
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	300c      	adds	r0, #12
 8009508:	f7fd f97b 	bl	8006802 <memcpy>
 800950c:	2201      	movs	r2, #1
 800950e:	0021      	movs	r1, r4
 8009510:	9804      	ldr	r0, [sp, #16]
 8009512:	f7fd fc73 	bl	8006dfc <__lshift>
 8009516:	9b06      	ldr	r3, [sp, #24]
 8009518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800951a:	9307      	str	r3, [sp, #28]
 800951c:	3b01      	subs	r3, #1
 800951e:	189b      	adds	r3, r3, r2
 8009520:	2201      	movs	r2, #1
 8009522:	003d      	movs	r5, r7
 8009524:	0007      	movs	r7, r0
 8009526:	930e      	str	r3, [sp, #56]	; 0x38
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	4013      	ands	r3, r2
 800952c:	930d      	str	r3, [sp, #52]	; 0x34
 800952e:	0031      	movs	r1, r6
 8009530:	9805      	ldr	r0, [sp, #20]
 8009532:	f7ff fa53 	bl	80089dc <quorem>
 8009536:	0029      	movs	r1, r5
 8009538:	0004      	movs	r4, r0
 800953a:	900b      	str	r0, [sp, #44]	; 0x2c
 800953c:	9805      	ldr	r0, [sp, #20]
 800953e:	f7fd fccb 	bl	8006ed8 <__mcmp>
 8009542:	003a      	movs	r2, r7
 8009544:	900c      	str	r0, [sp, #48]	; 0x30
 8009546:	0031      	movs	r1, r6
 8009548:	9804      	ldr	r0, [sp, #16]
 800954a:	f7fd fce1 	bl	8006f10 <__mdiff>
 800954e:	2201      	movs	r2, #1
 8009550:	68c3      	ldr	r3, [r0, #12]
 8009552:	3430      	adds	r4, #48	; 0x30
 8009554:	9008      	str	r0, [sp, #32]
 8009556:	920a      	str	r2, [sp, #40]	; 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <_dtoa_r+0xa6a>
 800955c:	0001      	movs	r1, r0
 800955e:	9805      	ldr	r0, [sp, #20]
 8009560:	f7fd fcba 	bl	8006ed8 <__mcmp>
 8009564:	900a      	str	r0, [sp, #40]	; 0x28
 8009566:	9908      	ldr	r1, [sp, #32]
 8009568:	9804      	ldr	r0, [sp, #16]
 800956a:	f7fd faa7 	bl	8006abc <_Bfree>
 800956e:	9b07      	ldr	r3, [sp, #28]
 8009570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009572:	3301      	adds	r3, #1
 8009574:	9308      	str	r3, [sp, #32]
 8009576:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009578:	4313      	orrs	r3, r2
 800957a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800957c:	4313      	orrs	r3, r2
 800957e:	d109      	bne.n	8009594 <_dtoa_r+0xa98>
 8009580:	2c39      	cmp	r4, #57	; 0x39
 8009582:	d022      	beq.n	80095ca <_dtoa_r+0xace>
 8009584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd01      	ble.n	800958e <_dtoa_r+0xa92>
 800958a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800958c:	3431      	adds	r4, #49	; 0x31
 800958e:	9b07      	ldr	r3, [sp, #28]
 8009590:	701c      	strb	r4, [r3, #0]
 8009592:	e76e      	b.n	8009472 <_dtoa_r+0x976>
 8009594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009596:	2b00      	cmp	r3, #0
 8009598:	db04      	blt.n	80095a4 <_dtoa_r+0xaa8>
 800959a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800959c:	4313      	orrs	r3, r2
 800959e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095a0:	4313      	orrs	r3, r2
 80095a2:	d11e      	bne.n	80095e2 <_dtoa_r+0xae6>
 80095a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	ddf1      	ble.n	800958e <_dtoa_r+0xa92>
 80095aa:	9905      	ldr	r1, [sp, #20]
 80095ac:	2201      	movs	r2, #1
 80095ae:	9804      	ldr	r0, [sp, #16]
 80095b0:	f7fd fc24 	bl	8006dfc <__lshift>
 80095b4:	0031      	movs	r1, r6
 80095b6:	9005      	str	r0, [sp, #20]
 80095b8:	f7fd fc8e 	bl	8006ed8 <__mcmp>
 80095bc:	2800      	cmp	r0, #0
 80095be:	dc02      	bgt.n	80095c6 <_dtoa_r+0xaca>
 80095c0:	d1e5      	bne.n	800958e <_dtoa_r+0xa92>
 80095c2:	07e3      	lsls	r3, r4, #31
 80095c4:	d5e3      	bpl.n	800958e <_dtoa_r+0xa92>
 80095c6:	2c39      	cmp	r4, #57	; 0x39
 80095c8:	d1df      	bne.n	800958a <_dtoa_r+0xa8e>
 80095ca:	2339      	movs	r3, #57	; 0x39
 80095cc:	9a07      	ldr	r2, [sp, #28]
 80095ce:	7013      	strb	r3, [r2, #0]
 80095d0:	9b08      	ldr	r3, [sp, #32]
 80095d2:	9308      	str	r3, [sp, #32]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	2a39      	cmp	r2, #57	; 0x39
 80095da:	d063      	beq.n	80096a4 <_dtoa_r+0xba8>
 80095dc:	3201      	adds	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	e747      	b.n	8009472 <_dtoa_r+0x976>
 80095e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd03      	ble.n	80095f0 <_dtoa_r+0xaf4>
 80095e8:	2c39      	cmp	r4, #57	; 0x39
 80095ea:	d0ee      	beq.n	80095ca <_dtoa_r+0xace>
 80095ec:	3401      	adds	r4, #1
 80095ee:	e7ce      	b.n	800958e <_dtoa_r+0xa92>
 80095f0:	9b07      	ldr	r3, [sp, #28]
 80095f2:	9a07      	ldr	r2, [sp, #28]
 80095f4:	701c      	strb	r4, [r3, #0]
 80095f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d03e      	beq.n	800967a <_dtoa_r+0xb7e>
 80095fc:	2300      	movs	r3, #0
 80095fe:	220a      	movs	r2, #10
 8009600:	9905      	ldr	r1, [sp, #20]
 8009602:	9804      	ldr	r0, [sp, #16]
 8009604:	f7fd fa64 	bl	8006ad0 <__multadd>
 8009608:	2300      	movs	r3, #0
 800960a:	9005      	str	r0, [sp, #20]
 800960c:	220a      	movs	r2, #10
 800960e:	0029      	movs	r1, r5
 8009610:	9804      	ldr	r0, [sp, #16]
 8009612:	42bd      	cmp	r5, r7
 8009614:	d106      	bne.n	8009624 <_dtoa_r+0xb28>
 8009616:	f7fd fa5b 	bl	8006ad0 <__multadd>
 800961a:	0005      	movs	r5, r0
 800961c:	0007      	movs	r7, r0
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	9307      	str	r3, [sp, #28]
 8009622:	e784      	b.n	800952e <_dtoa_r+0xa32>
 8009624:	f7fd fa54 	bl	8006ad0 <__multadd>
 8009628:	0039      	movs	r1, r7
 800962a:	0005      	movs	r5, r0
 800962c:	2300      	movs	r3, #0
 800962e:	220a      	movs	r2, #10
 8009630:	9804      	ldr	r0, [sp, #16]
 8009632:	f7fd fa4d 	bl	8006ad0 <__multadd>
 8009636:	0007      	movs	r7, r0
 8009638:	e7f1      	b.n	800961e <_dtoa_r+0xb22>
 800963a:	9b07      	ldr	r3, [sp, #28]
 800963c:	930b      	str	r3, [sp, #44]	; 0x2c
 800963e:	2500      	movs	r5, #0
 8009640:	0031      	movs	r1, r6
 8009642:	9805      	ldr	r0, [sp, #20]
 8009644:	f7ff f9ca 	bl	80089dc <quorem>
 8009648:	9b06      	ldr	r3, [sp, #24]
 800964a:	3030      	adds	r0, #48	; 0x30
 800964c:	5558      	strb	r0, [r3, r5]
 800964e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009650:	3501      	adds	r5, #1
 8009652:	0004      	movs	r4, r0
 8009654:	42ab      	cmp	r3, r5
 8009656:	dd07      	ble.n	8009668 <_dtoa_r+0xb6c>
 8009658:	2300      	movs	r3, #0
 800965a:	220a      	movs	r2, #10
 800965c:	9905      	ldr	r1, [sp, #20]
 800965e:	9804      	ldr	r0, [sp, #16]
 8009660:	f7fd fa36 	bl	8006ad0 <__multadd>
 8009664:	9005      	str	r0, [sp, #20]
 8009666:	e7eb      	b.n	8009640 <_dtoa_r+0xb44>
 8009668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800966a:	2301      	movs	r3, #1
 800966c:	2a00      	cmp	r2, #0
 800966e:	dd00      	ble.n	8009672 <_dtoa_r+0xb76>
 8009670:	0013      	movs	r3, r2
 8009672:	2500      	movs	r5, #0
 8009674:	9a06      	ldr	r2, [sp, #24]
 8009676:	18d3      	adds	r3, r2, r3
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	9905      	ldr	r1, [sp, #20]
 800967c:	2201      	movs	r2, #1
 800967e:	9804      	ldr	r0, [sp, #16]
 8009680:	f7fd fbbc 	bl	8006dfc <__lshift>
 8009684:	0031      	movs	r1, r6
 8009686:	9005      	str	r0, [sp, #20]
 8009688:	f7fd fc26 	bl	8006ed8 <__mcmp>
 800968c:	2800      	cmp	r0, #0
 800968e:	dc9f      	bgt.n	80095d0 <_dtoa_r+0xad4>
 8009690:	d101      	bne.n	8009696 <_dtoa_r+0xb9a>
 8009692:	07e4      	lsls	r4, r4, #31
 8009694:	d49c      	bmi.n	80095d0 <_dtoa_r+0xad4>
 8009696:	9b08      	ldr	r3, [sp, #32]
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	3b01      	subs	r3, #1
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	2a30      	cmp	r2, #48	; 0x30
 80096a0:	d0fa      	beq.n	8009698 <_dtoa_r+0xb9c>
 80096a2:	e6e6      	b.n	8009472 <_dtoa_r+0x976>
 80096a4:	9a06      	ldr	r2, [sp, #24]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d193      	bne.n	80095d2 <_dtoa_r+0xad6>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	9303      	str	r3, [sp, #12]
 80096b0:	2331      	movs	r3, #49	; 0x31
 80096b2:	7013      	strb	r3, [r2, #0]
 80096b4:	e6dd      	b.n	8009472 <_dtoa_r+0x976>
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_dtoa_r+0xbe0>)
 80096b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <_dtoa_r+0xbe4>)
 80096be:	2a00      	cmp	r2, #0
 80096c0:	d001      	beq.n	80096c6 <_dtoa_r+0xbca>
 80096c2:	f7ff fa4c 	bl	8008b5e <_dtoa_r+0x62>
 80096c6:	f7ff fa4c 	bl	8008b62 <_dtoa_r+0x66>
 80096ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dcb6      	bgt.n	800963e <_dtoa_r+0xb42>
 80096d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	dd00      	ble.n	80096d8 <_dtoa_r+0xbdc>
 80096d6:	e6b6      	b.n	8009446 <_dtoa_r+0x94a>
 80096d8:	e7b1      	b.n	800963e <_dtoa_r+0xb42>
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	0800b2bc 	.word	0x0800b2bc
 80096e0:	0800b2c4 	.word	0x0800b2c4

080096e4 <_realloc_r>:
 80096e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e6:	b087      	sub	sp, #28
 80096e8:	1e0c      	subs	r4, r1, #0
 80096ea:	9001      	str	r0, [sp, #4]
 80096ec:	9205      	str	r2, [sp, #20]
 80096ee:	d106      	bne.n	80096fe <_realloc_r+0x1a>
 80096f0:	0011      	movs	r1, r2
 80096f2:	f7fc fbcd 	bl	8005e90 <_malloc_r>
 80096f6:	0007      	movs	r7, r0
 80096f8:	0038      	movs	r0, r7
 80096fa:	b007      	add	sp, #28
 80096fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fe:	9801      	ldr	r0, [sp, #4]
 8009700:	f7fc fdda 	bl	80062b8 <__malloc_lock>
 8009704:	0023      	movs	r3, r4
 8009706:	3b08      	subs	r3, #8
 8009708:	685f      	ldr	r7, [r3, #4]
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	9b05      	ldr	r3, [sp, #20]
 800970e:	330b      	adds	r3, #11
 8009710:	2b16      	cmp	r3, #22
 8009712:	d908      	bls.n	8009726 <_realloc_r+0x42>
 8009714:	2207      	movs	r2, #7
 8009716:	4393      	bics	r3, r2
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	d506      	bpl.n	800972a <_realloc_r+0x46>
 800971c:	230c      	movs	r3, #12
 800971e:	9a01      	ldr	r2, [sp, #4]
 8009720:	2700      	movs	r7, #0
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	e7e8      	b.n	80096f8 <_realloc_r+0x14>
 8009726:	2310      	movs	r3, #16
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	9b00      	ldr	r3, [sp, #0]
 800972c:	9a05      	ldr	r2, [sp, #20]
 800972e:	4293      	cmp	r3, r2
 8009730:	d3f4      	bcc.n	800971c <_realloc_r+0x38>
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	003a      	movs	r2, r7
 8009736:	9302      	str	r3, [sp, #8]
 8009738:	2303      	movs	r3, #3
 800973a:	439a      	bics	r2, r3
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	9203      	str	r2, [sp, #12]
 8009740:	4293      	cmp	r3, r2
 8009742:	dc00      	bgt.n	8009746 <_realloc_r+0x62>
 8009744:	e169      	b.n	8009a1a <_realloc_r+0x336>
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	48b8      	ldr	r0, [pc, #736]	; (8009a2c <_realloc_r+0x348>)
 800974a:	189b      	adds	r3, r3, r2
 800974c:	6882      	ldr	r2, [r0, #8]
 800974e:	4694      	mov	ip, r2
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	459c      	cmp	ip, r3
 8009754:	d006      	beq.n	8009764 <_realloc_r+0x80>
 8009756:	2501      	movs	r5, #1
 8009758:	0011      	movs	r1, r2
 800975a:	43a9      	bics	r1, r5
 800975c:	1859      	adds	r1, r3, r1
 800975e:	6849      	ldr	r1, [r1, #4]
 8009760:	4229      	tst	r1, r5
 8009762:	d144      	bne.n	80097ee <_realloc_r+0x10a>
 8009764:	2103      	movs	r1, #3
 8009766:	438a      	bics	r2, r1
 8009768:	9903      	ldr	r1, [sp, #12]
 800976a:	188e      	adds	r6, r1, r2
 800976c:	9900      	ldr	r1, [sp, #0]
 800976e:	459c      	cmp	ip, r3
 8009770:	d117      	bne.n	80097a2 <_realloc_r+0xbe>
 8009772:	3110      	adds	r1, #16
 8009774:	42b1      	cmp	r1, r6
 8009776:	dc3c      	bgt.n	80097f2 <_realloc_r+0x10e>
 8009778:	9a00      	ldr	r2, [sp, #0]
 800977a:	2101      	movs	r1, #1
 800977c:	4694      	mov	ip, r2
 800977e:	1ab6      	subs	r6, r6, r2
 8009780:	0022      	movs	r2, r4
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	430e      	orrs	r6, r1
 8009786:	4463      	add	r3, ip
 8009788:	6083      	str	r3, [r0, #8]
 800978a:	3a08      	subs	r2, #8
 800978c:	605e      	str	r6, [r3, #4]
 800978e:	6853      	ldr	r3, [r2, #4]
 8009790:	9801      	ldr	r0, [sp, #4]
 8009792:	400b      	ands	r3, r1
 8009794:	4661      	mov	r1, ip
 8009796:	430b      	orrs	r3, r1
 8009798:	6053      	str	r3, [r2, #4]
 800979a:	f7fc fd95 	bl	80062c8 <__malloc_unlock>
 800979e:	0027      	movs	r7, r4
 80097a0:	e7aa      	b.n	80096f8 <_realloc_r+0x14>
 80097a2:	42b1      	cmp	r1, r6
 80097a4:	dc25      	bgt.n	80097f2 <_realloc_r+0x10e>
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	60da      	str	r2, [r3, #12]
 80097ac:	6093      	str	r3, [r2, #8]
 80097ae:	9b00      	ldr	r3, [sp, #0]
 80097b0:	9a02      	ldr	r2, [sp, #8]
 80097b2:	1af4      	subs	r4, r6, r3
 80097b4:	9b02      	ldr	r3, [sp, #8]
 80097b6:	1992      	adds	r2, r2, r6
 80097b8:	6858      	ldr	r0, [r3, #4]
 80097ba:	2301      	movs	r3, #1
 80097bc:	4018      	ands	r0, r3
 80097be:	2c0f      	cmp	r4, #15
 80097c0:	d800      	bhi.n	80097c4 <_realloc_r+0xe0>
 80097c2:	e12c      	b.n	8009a1e <_realloc_r+0x33a>
 80097c4:	9d00      	ldr	r5, [sp, #0]
 80097c6:	9902      	ldr	r1, [sp, #8]
 80097c8:	4328      	orrs	r0, r5
 80097ca:	1949      	adds	r1, r1, r5
 80097cc:	9d02      	ldr	r5, [sp, #8]
 80097ce:	431c      	orrs	r4, r3
 80097d0:	6068      	str	r0, [r5, #4]
 80097d2:	604c      	str	r4, [r1, #4]
 80097d4:	6850      	ldr	r0, [r2, #4]
 80097d6:	3108      	adds	r1, #8
 80097d8:	4303      	orrs	r3, r0
 80097da:	6053      	str	r3, [r2, #4]
 80097dc:	9801      	ldr	r0, [sp, #4]
 80097de:	f7fd f881 	bl	80068e4 <_free_r>
 80097e2:	9801      	ldr	r0, [sp, #4]
 80097e4:	f7fc fd70 	bl	80062c8 <__malloc_unlock>
 80097e8:	9f02      	ldr	r7, [sp, #8]
 80097ea:	3708      	adds	r7, #8
 80097ec:	e784      	b.n	80096f8 <_realloc_r+0x14>
 80097ee:	2200      	movs	r2, #0
 80097f0:	0013      	movs	r3, r2
 80097f2:	07ff      	lsls	r7, r7, #31
 80097f4:	d500      	bpl.n	80097f8 <_realloc_r+0x114>
 80097f6:	e0c6      	b.n	8009986 <_realloc_r+0x2a2>
 80097f8:	0021      	movs	r1, r4
 80097fa:	2003      	movs	r0, #3
 80097fc:	3908      	subs	r1, #8
 80097fe:	680d      	ldr	r5, [r1, #0]
 8009800:	9904      	ldr	r1, [sp, #16]
 8009802:	1b4d      	subs	r5, r1, r5
 8009804:	6869      	ldr	r1, [r5, #4]
 8009806:	4381      	bics	r1, r0
 8009808:	9803      	ldr	r0, [sp, #12]
 800980a:	180f      	adds	r7, r1, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d100      	bne.n	8009812 <_realloc_r+0x12e>
 8009810:	e084      	b.n	800991c <_realloc_r+0x238>
 8009812:	19d6      	adds	r6, r2, r7
 8009814:	459c      	cmp	ip, r3
 8009816:	d148      	bne.n	80098aa <_realloc_r+0x1c6>
 8009818:	9b00      	ldr	r3, [sp, #0]
 800981a:	3310      	adds	r3, #16
 800981c:	42b3      	cmp	r3, r6
 800981e:	dc7d      	bgt.n	800991c <_realloc_r+0x238>
 8009820:	68aa      	ldr	r2, [r5, #8]
 8009822:	68eb      	ldr	r3, [r5, #12]
 8009824:	002f      	movs	r7, r5
 8009826:	60d3      	str	r3, [r2, #12]
 8009828:	609a      	str	r2, [r3, #8]
 800982a:	0002      	movs	r2, r0
 800982c:	3a04      	subs	r2, #4
 800982e:	3708      	adds	r7, #8
 8009830:	2a24      	cmp	r2, #36	; 0x24
 8009832:	d835      	bhi.n	80098a0 <_realloc_r+0x1bc>
 8009834:	003b      	movs	r3, r7
 8009836:	2a13      	cmp	r2, #19
 8009838:	d908      	bls.n	800984c <_realloc_r+0x168>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	60ab      	str	r3, [r5, #8]
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	60eb      	str	r3, [r5, #12]
 8009842:	2a1b      	cmp	r2, #27
 8009844:	d81a      	bhi.n	800987c <_realloc_r+0x198>
 8009846:	002b      	movs	r3, r5
 8009848:	3408      	adds	r4, #8
 800984a:	3310      	adds	r3, #16
 800984c:	6822      	ldr	r2, [r4, #0]
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	6862      	ldr	r2, [r4, #4]
 8009852:	605a      	str	r2, [r3, #4]
 8009854:	68a2      	ldr	r2, [r4, #8]
 8009856:	609a      	str	r2, [r3, #8]
 8009858:	9b00      	ldr	r3, [sp, #0]
 800985a:	4a74      	ldr	r2, [pc, #464]	; (8009a2c <_realloc_r+0x348>)
 800985c:	18eb      	adds	r3, r5, r3
 800985e:	6093      	str	r3, [r2, #8]
 8009860:	9a00      	ldr	r2, [sp, #0]
 8009862:	1ab6      	subs	r6, r6, r2
 8009864:	2201      	movs	r2, #1
 8009866:	4316      	orrs	r6, r2
 8009868:	605e      	str	r6, [r3, #4]
 800986a:	686b      	ldr	r3, [r5, #4]
 800986c:	4013      	ands	r3, r2
 800986e:	9a00      	ldr	r2, [sp, #0]
 8009870:	4313      	orrs	r3, r2
 8009872:	606b      	str	r3, [r5, #4]
 8009874:	9801      	ldr	r0, [sp, #4]
 8009876:	f7fc fd27 	bl	80062c8 <__malloc_unlock>
 800987a:	e73d      	b.n	80096f8 <_realloc_r+0x14>
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	612b      	str	r3, [r5, #16]
 8009880:	68e3      	ldr	r3, [r4, #12]
 8009882:	616b      	str	r3, [r5, #20]
 8009884:	2a24      	cmp	r2, #36	; 0x24
 8009886:	d003      	beq.n	8009890 <_realloc_r+0x1ac>
 8009888:	002b      	movs	r3, r5
 800988a:	3410      	adds	r4, #16
 800988c:	3318      	adds	r3, #24
 800988e:	e7dd      	b.n	800984c <_realloc_r+0x168>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	61ab      	str	r3, [r5, #24]
 8009894:	002b      	movs	r3, r5
 8009896:	6962      	ldr	r2, [r4, #20]
 8009898:	3320      	adds	r3, #32
 800989a:	61ea      	str	r2, [r5, #28]
 800989c:	3418      	adds	r4, #24
 800989e:	e7d5      	b.n	800984c <_realloc_r+0x168>
 80098a0:	0021      	movs	r1, r4
 80098a2:	0038      	movs	r0, r7
 80098a4:	f001 f8c7 	bl	800aa36 <memmove>
 80098a8:	e7d6      	b.n	8009858 <_realloc_r+0x174>
 80098aa:	9a00      	ldr	r2, [sp, #0]
 80098ac:	42b2      	cmp	r2, r6
 80098ae:	dc35      	bgt.n	800991c <_realloc_r+0x238>
 80098b0:	0028      	movs	r0, r5
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	3008      	adds	r0, #8
 80098b8:	60da      	str	r2, [r3, #12]
 80098ba:	6093      	str	r3, [r2, #8]
 80098bc:	68aa      	ldr	r2, [r5, #8]
 80098be:	68eb      	ldr	r3, [r5, #12]
 80098c0:	60d3      	str	r3, [r2, #12]
 80098c2:	609a      	str	r2, [r3, #8]
 80098c4:	9a03      	ldr	r2, [sp, #12]
 80098c6:	3a04      	subs	r2, #4
 80098c8:	2a24      	cmp	r2, #36	; 0x24
 80098ca:	d823      	bhi.n	8009914 <_realloc_r+0x230>
 80098cc:	2a13      	cmp	r2, #19
 80098ce:	d907      	bls.n	80098e0 <_realloc_r+0x1fc>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	60ab      	str	r3, [r5, #8]
 80098d4:	6863      	ldr	r3, [r4, #4]
 80098d6:	60eb      	str	r3, [r5, #12]
 80098d8:	2a1b      	cmp	r2, #27
 80098da:	d809      	bhi.n	80098f0 <_realloc_r+0x20c>
 80098dc:	3408      	adds	r4, #8
 80098de:	3008      	adds	r0, #8
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	6003      	str	r3, [r0, #0]
 80098e4:	6863      	ldr	r3, [r4, #4]
 80098e6:	6043      	str	r3, [r0, #4]
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	6083      	str	r3, [r0, #8]
 80098ec:	9502      	str	r5, [sp, #8]
 80098ee:	e75e      	b.n	80097ae <_realloc_r+0xca>
 80098f0:	68a3      	ldr	r3, [r4, #8]
 80098f2:	612b      	str	r3, [r5, #16]
 80098f4:	68e3      	ldr	r3, [r4, #12]
 80098f6:	616b      	str	r3, [r5, #20]
 80098f8:	2a24      	cmp	r2, #36	; 0x24
 80098fa:	d003      	beq.n	8009904 <_realloc_r+0x220>
 80098fc:	0028      	movs	r0, r5
 80098fe:	3410      	adds	r4, #16
 8009900:	3018      	adds	r0, #24
 8009902:	e7ed      	b.n	80098e0 <_realloc_r+0x1fc>
 8009904:	0028      	movs	r0, r5
 8009906:	6923      	ldr	r3, [r4, #16]
 8009908:	3020      	adds	r0, #32
 800990a:	61ab      	str	r3, [r5, #24]
 800990c:	6963      	ldr	r3, [r4, #20]
 800990e:	3418      	adds	r4, #24
 8009910:	61eb      	str	r3, [r5, #28]
 8009912:	e7e5      	b.n	80098e0 <_realloc_r+0x1fc>
 8009914:	0021      	movs	r1, r4
 8009916:	f001 f88e 	bl	800aa36 <memmove>
 800991a:	e7e7      	b.n	80098ec <_realloc_r+0x208>
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	42bb      	cmp	r3, r7
 8009920:	dc31      	bgt.n	8009986 <_realloc_r+0x2a2>
 8009922:	0028      	movs	r0, r5
 8009924:	68aa      	ldr	r2, [r5, #8]
 8009926:	68eb      	ldr	r3, [r5, #12]
 8009928:	3008      	adds	r0, #8
 800992a:	60d3      	str	r3, [r2, #12]
 800992c:	609a      	str	r2, [r3, #8]
 800992e:	9a03      	ldr	r2, [sp, #12]
 8009930:	3a04      	subs	r2, #4
 8009932:	2a24      	cmp	r2, #36	; 0x24
 8009934:	d823      	bhi.n	800997e <_realloc_r+0x29a>
 8009936:	2a13      	cmp	r2, #19
 8009938:	d907      	bls.n	800994a <_realloc_r+0x266>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	60ab      	str	r3, [r5, #8]
 800993e:	6863      	ldr	r3, [r4, #4]
 8009940:	60eb      	str	r3, [r5, #12]
 8009942:	2a1b      	cmp	r2, #27
 8009944:	d809      	bhi.n	800995a <_realloc_r+0x276>
 8009946:	3408      	adds	r4, #8
 8009948:	3008      	adds	r0, #8
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	6863      	ldr	r3, [r4, #4]
 8009950:	6043      	str	r3, [r0, #4]
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	6083      	str	r3, [r0, #8]
 8009956:	003e      	movs	r6, r7
 8009958:	e7c8      	b.n	80098ec <_realloc_r+0x208>
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	612b      	str	r3, [r5, #16]
 800995e:	68e3      	ldr	r3, [r4, #12]
 8009960:	616b      	str	r3, [r5, #20]
 8009962:	2a24      	cmp	r2, #36	; 0x24
 8009964:	d003      	beq.n	800996e <_realloc_r+0x28a>
 8009966:	0028      	movs	r0, r5
 8009968:	3410      	adds	r4, #16
 800996a:	3018      	adds	r0, #24
 800996c:	e7ed      	b.n	800994a <_realloc_r+0x266>
 800996e:	0028      	movs	r0, r5
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	3020      	adds	r0, #32
 8009974:	61ab      	str	r3, [r5, #24]
 8009976:	6963      	ldr	r3, [r4, #20]
 8009978:	3418      	adds	r4, #24
 800997a:	61eb      	str	r3, [r5, #28]
 800997c:	e7e5      	b.n	800994a <_realloc_r+0x266>
 800997e:	0021      	movs	r1, r4
 8009980:	f001 f859 	bl	800aa36 <memmove>
 8009984:	e7e7      	b.n	8009956 <_realloc_r+0x272>
 8009986:	9905      	ldr	r1, [sp, #20]
 8009988:	9801      	ldr	r0, [sp, #4]
 800998a:	f7fc fa81 	bl	8005e90 <_malloc_r>
 800998e:	1e07      	subs	r7, r0, #0
 8009990:	d100      	bne.n	8009994 <_realloc_r+0x2b0>
 8009992:	e76f      	b.n	8009874 <_realloc_r+0x190>
 8009994:	0023      	movs	r3, r4
 8009996:	2201      	movs	r2, #1
 8009998:	3b08      	subs	r3, #8
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	4393      	bics	r3, r2
 800999e:	9a04      	ldr	r2, [sp, #16]
 80099a0:	18d3      	adds	r3, r2, r3
 80099a2:	0002      	movs	r2, r0
 80099a4:	3a08      	subs	r2, #8
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d105      	bne.n	80099b6 <_realloc_r+0x2d2>
 80099aa:	685e      	ldr	r6, [r3, #4]
 80099ac:	2303      	movs	r3, #3
 80099ae:	439e      	bics	r6, r3
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	18f6      	adds	r6, r6, r3
 80099b4:	e6fb      	b.n	80097ae <_realloc_r+0xca>
 80099b6:	9a03      	ldr	r2, [sp, #12]
 80099b8:	3a04      	subs	r2, #4
 80099ba:	2a24      	cmp	r2, #36	; 0x24
 80099bc:	d829      	bhi.n	8009a12 <_realloc_r+0x32e>
 80099be:	0003      	movs	r3, r0
 80099c0:	0021      	movs	r1, r4
 80099c2:	2a13      	cmp	r2, #19
 80099c4:	d908      	bls.n	80099d8 <_realloc_r+0x2f4>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	6043      	str	r3, [r0, #4]
 80099ce:	2a1b      	cmp	r2, #27
 80099d0:	d80d      	bhi.n	80099ee <_realloc_r+0x30a>
 80099d2:	0003      	movs	r3, r0
 80099d4:	3108      	adds	r1, #8
 80099d6:	3308      	adds	r3, #8
 80099d8:	680a      	ldr	r2, [r1, #0]
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	684a      	ldr	r2, [r1, #4]
 80099de:	605a      	str	r2, [r3, #4]
 80099e0:	688a      	ldr	r2, [r1, #8]
 80099e2:	609a      	str	r2, [r3, #8]
 80099e4:	0021      	movs	r1, r4
 80099e6:	9801      	ldr	r0, [sp, #4]
 80099e8:	f7fc ff7c 	bl	80068e4 <_free_r>
 80099ec:	e742      	b.n	8009874 <_realloc_r+0x190>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	6083      	str	r3, [r0, #8]
 80099f2:	68e3      	ldr	r3, [r4, #12]
 80099f4:	60c3      	str	r3, [r0, #12]
 80099f6:	2a24      	cmp	r2, #36	; 0x24
 80099f8:	d003      	beq.n	8009a02 <_realloc_r+0x31e>
 80099fa:	0003      	movs	r3, r0
 80099fc:	3110      	adds	r1, #16
 80099fe:	3310      	adds	r3, #16
 8009a00:	e7ea      	b.n	80099d8 <_realloc_r+0x2f4>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	3118      	adds	r1, #24
 8009a06:	6103      	str	r3, [r0, #16]
 8009a08:	0003      	movs	r3, r0
 8009a0a:	6962      	ldr	r2, [r4, #20]
 8009a0c:	3318      	adds	r3, #24
 8009a0e:	6142      	str	r2, [r0, #20]
 8009a10:	e7e2      	b.n	80099d8 <_realloc_r+0x2f4>
 8009a12:	0021      	movs	r1, r4
 8009a14:	f001 f80f 	bl	800aa36 <memmove>
 8009a18:	e7e4      	b.n	80099e4 <_realloc_r+0x300>
 8009a1a:	9e03      	ldr	r6, [sp, #12]
 8009a1c:	e6c7      	b.n	80097ae <_realloc_r+0xca>
 8009a1e:	9902      	ldr	r1, [sp, #8]
 8009a20:	4306      	orrs	r6, r0
 8009a22:	604e      	str	r6, [r1, #4]
 8009a24:	6851      	ldr	r1, [r2, #4]
 8009a26:	430b      	orrs	r3, r1
 8009a28:	6053      	str	r3, [r2, #4]
 8009a2a:	e6da      	b.n	80097e2 <_realloc_r+0xfe>
 8009a2c:	2000003c 	.word	0x2000003c

08009a30 <fiprintf>:
 8009a30:	b40e      	push	{r1, r2, r3}
 8009a32:	b517      	push	{r0, r1, r2, r4, lr}
 8009a34:	4c05      	ldr	r4, [pc, #20]	; (8009a4c <fiprintf+0x1c>)
 8009a36:	ab05      	add	r3, sp, #20
 8009a38:	cb04      	ldmia	r3!, {r2}
 8009a3a:	0001      	movs	r1, r0
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	f000 f8be 	bl	8009bc0 <_vfiprintf_r>
 8009a44:	bc1e      	pop	{r1, r2, r3, r4}
 8009a46:	bc08      	pop	{r3}
 8009a48:	b003      	add	sp, #12
 8009a4a:	4718      	bx	r3
 8009a4c:	200006e8 	.word	0x200006e8

08009a50 <__ssprint_r>:
 8009a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a52:	6813      	ldr	r3, [r2, #0]
 8009a54:	b087      	sub	sp, #28
 8009a56:	0017      	movs	r7, r2
 8009a58:	9303      	str	r3, [sp, #12]
 8009a5a:	6893      	ldr	r3, [r2, #8]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	000c      	movs	r4, r1
 8009a60:	9005      	str	r0, [sp, #20]
 8009a62:	9202      	str	r2, [sp, #8]
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d10d      	bne.n	8009a86 <__ssprint_r+0x36>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	b007      	add	sp, #28
 8009a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	9302      	str	r3, [sp, #8]
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	3308      	adds	r3, #8
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	9a01      	ldr	r2, [sp, #4]
 8009a88:	68a6      	ldr	r6, [r4, #8]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d0f1      	beq.n	8009a74 <__ssprint_r+0x24>
 8009a90:	42b2      	cmp	r2, r6
 8009a92:	d32e      	bcc.n	8009af2 <__ssprint_r+0xa2>
 8009a94:	2190      	movs	r1, #144	; 0x90
 8009a96:	89a2      	ldrh	r2, [r4, #12]
 8009a98:	00c9      	lsls	r1, r1, #3
 8009a9a:	420a      	tst	r2, r1
 8009a9c:	d029      	beq.n	8009af2 <__ssprint_r+0xa2>
 8009a9e:	2003      	movs	r0, #3
 8009aa0:	6921      	ldr	r1, [r4, #16]
 8009aa2:	1a5b      	subs	r3, r3, r1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	6963      	ldr	r3, [r4, #20]
 8009aa8:	4343      	muls	r3, r0
 8009aaa:	0fdd      	lsrs	r5, r3, #31
 8009aac:	18ed      	adds	r5, r5, r3
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	9801      	ldr	r0, [sp, #4]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	181b      	adds	r3, r3, r0
 8009ab6:	106d      	asrs	r5, r5, #1
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	d900      	bls.n	8009abe <__ssprint_r+0x6e>
 8009abc:	001d      	movs	r5, r3
 8009abe:	0552      	lsls	r2, r2, #21
 8009ac0:	d532      	bpl.n	8009b28 <__ssprint_r+0xd8>
 8009ac2:	0029      	movs	r1, r5
 8009ac4:	9805      	ldr	r0, [sp, #20]
 8009ac6:	f7fc f9e3 	bl	8005e90 <_malloc_r>
 8009aca:	1e06      	subs	r6, r0, #0
 8009acc:	d036      	beq.n	8009b3c <__ssprint_r+0xec>
 8009ace:	9a04      	ldr	r2, [sp, #16]
 8009ad0:	6921      	ldr	r1, [r4, #16]
 8009ad2:	f7fc fe96 	bl	8006802 <memcpy>
 8009ad6:	89a2      	ldrh	r2, [r4, #12]
 8009ad8:	4b1e      	ldr	r3, [pc, #120]	; (8009b54 <__ssprint_r+0x104>)
 8009ada:	401a      	ands	r2, r3
 8009adc:	2380      	movs	r3, #128	; 0x80
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	9b04      	ldr	r3, [sp, #16]
 8009ae4:	6126      	str	r6, [r4, #16]
 8009ae6:	18f6      	adds	r6, r6, r3
 8009ae8:	6026      	str	r6, [r4, #0]
 8009aea:	6165      	str	r5, [r4, #20]
 8009aec:	9e01      	ldr	r6, [sp, #4]
 8009aee:	1aed      	subs	r5, r5, r3
 8009af0:	60a5      	str	r5, [r4, #8]
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	429e      	cmp	r6, r3
 8009af6:	d900      	bls.n	8009afa <__ssprint_r+0xaa>
 8009af8:	001e      	movs	r6, r3
 8009afa:	0032      	movs	r2, r6
 8009afc:	9902      	ldr	r1, [sp, #8]
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	f000 ff99 	bl	800aa36 <memmove>
 8009b04:	9a01      	ldr	r2, [sp, #4]
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	4694      	mov	ip, r2
 8009b0a:	1b9b      	subs	r3, r3, r6
 8009b0c:	60a3      	str	r3, [r4, #8]
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	199b      	adds	r3, r3, r6
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	9b02      	ldr	r3, [sp, #8]
 8009b16:	4463      	add	r3, ip
 8009b18:	9302      	str	r3, [sp, #8]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	60bb      	str	r3, [r7, #8]
 8009b20:	d0a3      	beq.n	8009a6a <__ssprint_r+0x1a>
 8009b22:	2300      	movs	r3, #0
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	e7ae      	b.n	8009a86 <__ssprint_r+0x36>
 8009b28:	002a      	movs	r2, r5
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	f7ff fdda 	bl	80096e4 <_realloc_r>
 8009b30:	1e06      	subs	r6, r0, #0
 8009b32:	d1d6      	bne.n	8009ae2 <__ssprint_r+0x92>
 8009b34:	6921      	ldr	r1, [r4, #16]
 8009b36:	9805      	ldr	r0, [sp, #20]
 8009b38:	f7fc fed4 	bl	80068e4 <_free_r>
 8009b3c:	230c      	movs	r3, #12
 8009b3e:	9a05      	ldr	r2, [sp, #20]
 8009b40:	2001      	movs	r0, #1
 8009b42:	6013      	str	r3, [r2, #0]
 8009b44:	89a2      	ldrh	r2, [r4, #12]
 8009b46:	3334      	adds	r3, #52	; 0x34
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4240      	negs	r0, r0
 8009b50:	60bb      	str	r3, [r7, #8]
 8009b52:	e78b      	b.n	8009a6c <__ssprint_r+0x1c>
 8009b54:	fffffb7f 	.word	0xfffffb7f

08009b58 <__sprint_r>:
 8009b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5a:	6893      	ldr	r3, [r2, #8]
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	9001      	str	r0, [sp, #4]
 8009b60:	000d      	movs	r5, r1
 8009b62:	0014      	movs	r4, r2
 8009b64:	1e18      	subs	r0, r3, #0
 8009b66:	d018      	beq.n	8009b9a <__sprint_r+0x42>
 8009b68:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009b6a:	049b      	lsls	r3, r3, #18
 8009b6c:	d524      	bpl.n	8009bb8 <__sprint_r+0x60>
 8009b6e:	6817      	ldr	r7, [r2, #0]
 8009b70:	2600      	movs	r6, #0
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	9302      	str	r3, [sp, #8]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	089b      	lsrs	r3, r3, #2
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	42b3      	cmp	r3, r6
 8009b82:	dc0e      	bgt.n	8009ba2 <__sprint_r+0x4a>
 8009b84:	2203      	movs	r2, #3
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	68a0      	ldr	r0, [r4, #8]
 8009b8a:	4393      	bics	r3, r2
 8009b8c:	1ac0      	subs	r0, r0, r3
 8009b8e:	60a0      	str	r0, [r4, #8]
 8009b90:	3708      	adds	r7, #8
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d1ec      	bne.n	8009b70 <__sprint_r+0x18>
 8009b96:	2300      	movs	r3, #0
 8009b98:	60a3      	str	r3, [r4, #8]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	b005      	add	sp, #20
 8009ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba2:	9902      	ldr	r1, [sp, #8]
 8009ba4:	00b3      	lsls	r3, r6, #2
 8009ba6:	58c9      	ldr	r1, [r1, r3]
 8009ba8:	002a      	movs	r2, r5
 8009baa:	9801      	ldr	r0, [sp, #4]
 8009bac:	f000 ff1a 	bl	800a9e4 <_fputwc_r>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d0f0      	beq.n	8009b96 <__sprint_r+0x3e>
 8009bb4:	3601      	adds	r6, #1
 8009bb6:	e7e2      	b.n	8009b7e <__sprint_r+0x26>
 8009bb8:	9801      	ldr	r0, [sp, #4]
 8009bba:	f000 fd13 	bl	800a5e4 <__sfvwrite_r>
 8009bbe:	e7ea      	b.n	8009b96 <__sprint_r+0x3e>

08009bc0 <_vfiprintf_r>:
 8009bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bc2:	b0c1      	sub	sp, #260	; 0x104
 8009bc4:	001c      	movs	r4, r3
 8009bc6:	001f      	movs	r7, r3
 8009bc8:	9006      	str	r0, [sp, #24]
 8009bca:	9103      	str	r1, [sp, #12]
 8009bcc:	9207      	str	r2, [sp, #28]
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d004      	beq.n	8009bdc <_vfiprintf_r+0x1c>
 8009bd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <_vfiprintf_r+0x1c>
 8009bd8:	f7fc fca0 	bl	800651c <__sinit>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009be0:	07db      	lsls	r3, r3, #31
 8009be2:	d407      	bmi.n	8009bf4 <_vfiprintf_r+0x34>
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	899b      	ldrh	r3, [r3, #12]
 8009be8:	059b      	lsls	r3, r3, #22
 8009bea:	d403      	bmi.n	8009bf4 <_vfiprintf_r+0x34>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009bf0:	f7fc fdfa 	bl	80067e8 <__retarget_lock_acquire_recursive>
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	220c      	movs	r2, #12
 8009bf8:	5e9a      	ldrsh	r2, [r3, r2]
 8009bfa:	2380      	movs	r3, #128	; 0x80
 8009bfc:	019b      	lsls	r3, r3, #6
 8009bfe:	421a      	tst	r2, r3
 8009c00:	d107      	bne.n	8009c12 <_vfiprintf_r+0x52>
 8009c02:	4313      	orrs	r3, r2
 8009c04:	9a03      	ldr	r2, [sp, #12]
 8009c06:	8193      	strh	r3, [r2, #12]
 8009c08:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009c0a:	4aa3      	ldr	r2, [pc, #652]	; (8009e98 <_vfiprintf_r+0x2d8>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	9a03      	ldr	r2, [sp, #12]
 8009c10:	6653      	str	r3, [r2, #100]	; 0x64
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	899b      	ldrh	r3, [r3, #12]
 8009c16:	071b      	lsls	r3, r3, #28
 8009c18:	d503      	bpl.n	8009c22 <_vfiprintf_r+0x62>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d118      	bne.n	8009c54 <_vfiprintf_r+0x94>
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	9806      	ldr	r0, [sp, #24]
 8009c26:	f000 fe3b 	bl	800a8a0 <__swsetup_r>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d012      	beq.n	8009c54 <_vfiprintf_r+0x94>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c32:	07db      	lsls	r3, r3, #31
 8009c34:	d505      	bpl.n	8009c42 <_vfiprintf_r+0x82>
 8009c36:	2301      	movs	r3, #1
 8009c38:	425b      	negs	r3, r3
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	9808      	ldr	r0, [sp, #32]
 8009c3e:	b041      	add	sp, #260	; 0x104
 8009c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	899b      	ldrh	r3, [r3, #12]
 8009c46:	059b      	lsls	r3, r3, #22
 8009c48:	d4f5      	bmi.n	8009c36 <_vfiprintf_r+0x76>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009c4e:	f7fc fdcc 	bl	80067ea <__retarget_lock_release_recursive>
 8009c52:	e7f0      	b.n	8009c36 <_vfiprintf_r+0x76>
 8009c54:	221a      	movs	r2, #26
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	899b      	ldrh	r3, [r3, #12]
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	2a0a      	cmp	r2, #10
 8009c5e:	d116      	bne.n	8009c8e <_vfiprintf_r+0xce>
 8009c60:	9a03      	ldr	r2, [sp, #12]
 8009c62:	210e      	movs	r1, #14
 8009c64:	5e52      	ldrsh	r2, [r2, r1]
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	db11      	blt.n	8009c8e <_vfiprintf_r+0xce>
 8009c6a:	9a03      	ldr	r2, [sp, #12]
 8009c6c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009c6e:	07d2      	lsls	r2, r2, #31
 8009c70:	d405      	bmi.n	8009c7e <_vfiprintf_r+0xbe>
 8009c72:	059b      	lsls	r3, r3, #22
 8009c74:	d403      	bmi.n	8009c7e <_vfiprintf_r+0xbe>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009c7a:	f7fc fdb6 	bl	80067ea <__retarget_lock_release_recursive>
 8009c7e:	0023      	movs	r3, r4
 8009c80:	9a07      	ldr	r2, [sp, #28]
 8009c82:	9903      	ldr	r1, [sp, #12]
 8009c84:	9806      	ldr	r0, [sp, #24]
 8009c86:	f000 fc69 	bl	800a55c <__sbprintf>
 8009c8a:	9008      	str	r0, [sp, #32]
 8009c8c:	e7d6      	b.n	8009c3c <_vfiprintf_r+0x7c>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	ad17      	add	r5, sp, #92	; 0x5c
 8009c92:	9514      	str	r5, [sp, #80]	; 0x50
 8009c94:	9316      	str	r3, [sp, #88]	; 0x58
 8009c96:	9315      	str	r3, [sp, #84]	; 0x54
 8009c98:	930c      	str	r3, [sp, #48]	; 0x30
 8009c9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca0:	9308      	str	r3, [sp, #32]
 8009ca2:	9c07      	ldr	r4, [sp, #28]
 8009ca4:	7823      	ldrb	r3, [r4, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <_vfiprintf_r+0xf0>
 8009caa:	2b25      	cmp	r3, #37	; 0x25
 8009cac:	d000      	beq.n	8009cb0 <_vfiprintf_r+0xf0>
 8009cae:	e08d      	b.n	8009dcc <_vfiprintf_r+0x20c>
 8009cb0:	9b07      	ldr	r3, [sp, #28]
 8009cb2:	1ae6      	subs	r6, r4, r3
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	d016      	beq.n	8009ce6 <_vfiprintf_r+0x126>
 8009cb8:	602b      	str	r3, [r5, #0]
 8009cba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009cbc:	606e      	str	r6, [r5, #4]
 8009cbe:	199b      	adds	r3, r3, r6
 8009cc0:	9316      	str	r3, [sp, #88]	; 0x58
 8009cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cc4:	3508      	adds	r5, #8
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	9315      	str	r3, [sp, #84]	; 0x54
 8009cca:	2b07      	cmp	r3, #7
 8009ccc:	dd08      	ble.n	8009ce0 <_vfiprintf_r+0x120>
 8009cce:	9903      	ldr	r1, [sp, #12]
 8009cd0:	9806      	ldr	r0, [sp, #24]
 8009cd2:	aa14      	add	r2, sp, #80	; 0x50
 8009cd4:	f7ff ff40 	bl	8009b58 <__sprint_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d000      	beq.n	8009cde <_vfiprintf_r+0x11e>
 8009cdc:	e3d9      	b.n	800a492 <_vfiprintf_r+0x8d2>
 8009cde:	ad17      	add	r5, sp, #92	; 0x5c
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	199b      	adds	r3, r3, r6
 8009ce4:	9308      	str	r3, [sp, #32]
 8009ce6:	7823      	ldrb	r3, [r4, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <_vfiprintf_r+0x130>
 8009cec:	f000 fbf6 	bl	800a4dc <_vfiprintf_r+0x91c>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	a912      	add	r1, sp, #72	; 0x48
 8009cf4:	70ca      	strb	r2, [r1, #3]
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	1c63      	adds	r3, r4, #1
 8009cfa:	0014      	movs	r4, r2
 8009cfc:	4249      	negs	r1, r1
 8009cfe:	9105      	str	r1, [sp, #20]
 8009d00:	9209      	str	r2, [sp, #36]	; 0x24
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	9207      	str	r2, [sp, #28]
 8009d08:	0018      	movs	r0, r3
 8009d0a:	3820      	subs	r0, #32
 8009d0c:	285a      	cmp	r0, #90	; 0x5a
 8009d0e:	d900      	bls.n	8009d12 <_vfiprintf_r+0x152>
 8009d10:	e362      	b.n	800a3d8 <_vfiprintf_r+0x818>
 8009d12:	f7f6 fa09 	bl	8000128 <__gnu_thumb1_case_uhi>
 8009d16:	0078      	.short	0x0078
 8009d18:	03610361 	.word	0x03610361
 8009d1c:	03610081 	.word	0x03610081
 8009d20:	03610361 	.word	0x03610361
 8009d24:	0361005d 	.word	0x0361005d
 8009d28:	00830361 	.word	0x00830361
 8009d2c:	0361008b 	.word	0x0361008b
 8009d30:	008f0089 	.word	0x008f0089
 8009d34:	00ad0361 	.word	0x00ad0361
 8009d38:	00af00af 	.word	0x00af00af
 8009d3c:	00af00af 	.word	0x00af00af
 8009d40:	00af00af 	.word	0x00af00af
 8009d44:	00af00af 	.word	0x00af00af
 8009d48:	036100af 	.word	0x036100af
 8009d4c:	03610361 	.word	0x03610361
 8009d50:	03610361 	.word	0x03610361
 8009d54:	03610361 	.word	0x03610361
 8009d58:	03610361 	.word	0x03610361
 8009d5c:	00e600da 	.word	0x00e600da
 8009d60:	03610361 	.word	0x03610361
 8009d64:	03610361 	.word	0x03610361
 8009d68:	03610361 	.word	0x03610361
 8009d6c:	03610361 	.word	0x03610361
 8009d70:	03610361 	.word	0x03610361
 8009d74:	03610143 	.word	0x03610143
 8009d78:	03610361 	.word	0x03610361
 8009d7c:	03610182 	.word	0x03610182
 8009d80:	0361027c 	.word	0x0361027c
 8009d84:	02ae0361 	.word	0x02ae0361
 8009d88:	03610361 	.word	0x03610361
 8009d8c:	03610361 	.word	0x03610361
 8009d90:	03610361 	.word	0x03610361
 8009d94:	03610361 	.word	0x03610361
 8009d98:	03610361 	.word	0x03610361
 8009d9c:	00e800da 	.word	0x00e800da
 8009da0:	03610361 	.word	0x03610361
 8009da4:	00c30361 	.word	0x00c30361
 8009da8:	00d600e8 	.word	0x00d600e8
 8009dac:	00cf0361 	.word	0x00cf0361
 8009db0:	01260361 	.word	0x01260361
 8009db4:	01740145 	.word	0x01740145
 8009db8:	036100d6 	.word	0x036100d6
 8009dbc:	007f0182 	.word	0x007f0182
 8009dc0:	0361027e 	.word	0x0361027e
 8009dc4:	02cd0361 	.word	0x02cd0361
 8009dc8:	007f0361 	.word	0x007f0361
 8009dcc:	3401      	adds	r4, #1
 8009dce:	e769      	b.n	8009ca4 <_vfiprintf_r+0xe4>
 8009dd0:	9806      	ldr	r0, [sp, #24]
 8009dd2:	f7fe fd01 	bl	80087d8 <_localeconv_r>
 8009dd6:	6843      	ldr	r3, [r0, #4]
 8009dd8:	0018      	movs	r0, r3
 8009dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ddc:	f7f6 f992 	bl	8000104 <strlen>
 8009de0:	900e      	str	r0, [sp, #56]	; 0x38
 8009de2:	9806      	ldr	r0, [sp, #24]
 8009de4:	f7fe fcf8 	bl	80087d8 <_localeconv_r>
 8009de8:	6883      	ldr	r3, [r0, #8]
 8009dea:	930d      	str	r3, [sp, #52]	; 0x34
 8009dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d010      	beq.n	8009e14 <_vfiprintf_r+0x254>
 8009df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00d      	beq.n	8009e14 <_vfiprintf_r+0x254>
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <_vfiprintf_r+0x254>
 8009dfe:	2380      	movs	r3, #128	; 0x80
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	431c      	orrs	r4, r3
 8009e04:	e006      	b.n	8009e14 <_vfiprintf_r+0x254>
 8009e06:	ab12      	add	r3, sp, #72	; 0x48
 8009e08:	78da      	ldrb	r2, [r3, #3]
 8009e0a:	3303      	adds	r3, #3
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	d101      	bne.n	8009e14 <_vfiprintf_r+0x254>
 8009e10:	3220      	adds	r2, #32
 8009e12:	701a      	strb	r2, [r3, #0]
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	e774      	b.n	8009d02 <_vfiprintf_r+0x142>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e7f2      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009e1c:	cf08      	ldmia	r7!, {r3}
 8009e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	daf7      	bge.n	8009e14 <_vfiprintf_r+0x254>
 8009e24:	425b      	negs	r3, r3
 8009e26:	9309      	str	r3, [sp, #36]	; 0x24
 8009e28:	2304      	movs	r3, #4
 8009e2a:	e7ea      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009e2c:	222b      	movs	r2, #43	; 0x2b
 8009e2e:	ab12      	add	r3, sp, #72	; 0x48
 8009e30:	70da      	strb	r2, [r3, #3]
 8009e32:	e7ef      	b.n	8009e14 <_vfiprintf_r+0x254>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3c:	d00f      	beq.n	8009e5e <_vfiprintf_r+0x29e>
 8009e3e:	2100      	movs	r1, #0
 8009e40:	9105      	str	r1, [sp, #20]
 8009e42:	0019      	movs	r1, r3
 8009e44:	3930      	subs	r1, #48	; 0x30
 8009e46:	9207      	str	r2, [sp, #28]
 8009e48:	2909      	cmp	r1, #9
 8009e4a:	d900      	bls.n	8009e4e <_vfiprintf_r+0x28e>
 8009e4c:	e75c      	b.n	8009d08 <_vfiprintf_r+0x148>
 8009e4e:	200a      	movs	r0, #10
 8009e50:	9b05      	ldr	r3, [sp, #20]
 8009e52:	4343      	muls	r3, r0
 8009e54:	185b      	adds	r3, r3, r1
 8009e56:	9305      	str	r3, [sp, #20]
 8009e58:	7813      	ldrb	r3, [r2, #0]
 8009e5a:	3201      	adds	r2, #1
 8009e5c:	e7f1      	b.n	8009e42 <_vfiprintf_r+0x282>
 8009e5e:	cf08      	ldmia	r7!, {r3}
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	da02      	bge.n	8009e6c <_vfiprintf_r+0x2ac>
 8009e66:	2301      	movs	r3, #1
 8009e68:	425b      	negs	r3, r3
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	9207      	str	r2, [sp, #28]
 8009e6e:	e7d1      	b.n	8009e14 <_vfiprintf_r+0x254>
 8009e70:	2380      	movs	r3, #128	; 0x80
 8009e72:	e7c6      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009e74:	2100      	movs	r1, #0
 8009e76:	9a07      	ldr	r2, [sp, #28]
 8009e78:	9109      	str	r1, [sp, #36]	; 0x24
 8009e7a:	200a      	movs	r0, #10
 8009e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e7e:	3b30      	subs	r3, #48	; 0x30
 8009e80:	4341      	muls	r1, r0
 8009e82:	185b      	adds	r3, r3, r1
 8009e84:	9309      	str	r3, [sp, #36]	; 0x24
 8009e86:	0013      	movs	r3, r2
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	3201      	adds	r2, #1
 8009e8c:	0019      	movs	r1, r3
 8009e8e:	3930      	subs	r1, #48	; 0x30
 8009e90:	9207      	str	r2, [sp, #28]
 8009e92:	2909      	cmp	r1, #9
 8009e94:	d9f1      	bls.n	8009e7a <_vfiprintf_r+0x2ba>
 8009e96:	e737      	b.n	8009d08 <_vfiprintf_r+0x148>
 8009e98:	ffffdfff 	.word	0xffffdfff
 8009e9c:	9b07      	ldr	r3, [sp, #28]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b68      	cmp	r3, #104	; 0x68
 8009ea2:	d105      	bne.n	8009eb0 <_vfiprintf_r+0x2f0>
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	9307      	str	r3, [sp, #28]
 8009eaa:	2380      	movs	r3, #128	; 0x80
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	e7a8      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	e7a6      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b6c      	cmp	r3, #108	; 0x6c
 8009eba:	d104      	bne.n	8009ec6 <_vfiprintf_r+0x306>
 8009ebc:	9b07      	ldr	r3, [sp, #28]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	9307      	str	r3, [sp, #28]
 8009ec2:	2320      	movs	r3, #32
 8009ec4:	e79d      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009ec6:	2310      	movs	r3, #16
 8009ec8:	e79b      	b.n	8009e02 <_vfiprintf_r+0x242>
 8009eca:	003a      	movs	r2, r7
 8009ecc:	ca08      	ldmia	r2!, {r3}
 8009ece:	ae27      	add	r6, sp, #156	; 0x9c
 8009ed0:	7033      	strb	r3, [r6, #0]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9204      	str	r2, [sp, #16]
 8009ed6:	aa12      	add	r2, sp, #72	; 0x48
 8009ed8:	70d3      	strb	r3, [r2, #3]
 8009eda:	2201      	movs	r2, #1
 8009edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ede:	9205      	str	r2, [sp, #20]
 8009ee0:	e0b0      	b.n	800a044 <_vfiprintf_r+0x484>
 8009ee2:	2310      	movs	r3, #16
 8009ee4:	431c      	orrs	r4, r3
 8009ee6:	06a3      	lsls	r3, r4, #26
 8009ee8:	d52a      	bpl.n	8009f40 <_vfiprintf_r+0x380>
 8009eea:	2307      	movs	r3, #7
 8009eec:	3707      	adds	r7, #7
 8009eee:	439f      	bics	r7, r3
 8009ef0:	0039      	movs	r1, r7
 8009ef2:	c90c      	ldmia	r1!, {r2, r3}
 8009ef4:	9200      	str	r2, [sp, #0]
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	9104      	str	r1, [sp, #16]
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	2301      	movs	r3, #1
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	da09      	bge.n	8009f16 <_vfiprintf_r+0x356>
 8009f02:	9e00      	ldr	r6, [sp, #0]
 8009f04:	9f01      	ldr	r7, [sp, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	4271      	negs	r1, r6
 8009f0a:	41ba      	sbcs	r2, r7
 8009f0c:	9100      	str	r1, [sp, #0]
 8009f0e:	9201      	str	r2, [sp, #4]
 8009f10:	212d      	movs	r1, #45	; 0x2d
 8009f12:	aa12      	add	r2, sp, #72	; 0x48
 8009f14:	70d1      	strb	r1, [r2, #3]
 8009f16:	9901      	ldr	r1, [sp, #4]
 8009f18:	9a00      	ldr	r2, [sp, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	9905      	ldr	r1, [sp, #20]
 8009f1e:	3101      	adds	r1, #1
 8009f20:	d100      	bne.n	8009f24 <_vfiprintf_r+0x364>
 8009f22:	e2e9      	b.n	800a4f8 <_vfiprintf_r+0x938>
 8009f24:	2180      	movs	r1, #128	; 0x80
 8009f26:	0027      	movs	r7, r4
 8009f28:	438f      	bics	r7, r1
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d000      	beq.n	8009f30 <_vfiprintf_r+0x370>
 8009f2e:	e2e7      	b.n	800a500 <_vfiprintf_r+0x940>
 8009f30:	9a05      	ldr	r2, [sp, #20]
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	d100      	bne.n	8009f38 <_vfiprintf_r+0x378>
 8009f36:	e243      	b.n	800a3c0 <_vfiprintf_r+0x800>
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d000      	beq.n	8009f3e <_vfiprintf_r+0x37e>
 8009f3c:	e2e3      	b.n	800a506 <_vfiprintf_r+0x946>
 8009f3e:	e1e7      	b.n	800a310 <_vfiprintf_r+0x750>
 8009f40:	003a      	movs	r2, r7
 8009f42:	ca08      	ldmia	r2!, {r3}
 8009f44:	9204      	str	r2, [sp, #16]
 8009f46:	06e2      	lsls	r2, r4, #27
 8009f48:	d503      	bpl.n	8009f52 <_vfiprintf_r+0x392>
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	17db      	asrs	r3, r3, #31
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	e7d3      	b.n	8009efa <_vfiprintf_r+0x33a>
 8009f52:	0662      	lsls	r2, r4, #25
 8009f54:	d501      	bpl.n	8009f5a <_vfiprintf_r+0x39a>
 8009f56:	b21b      	sxth	r3, r3
 8009f58:	e7f7      	b.n	8009f4a <_vfiprintf_r+0x38a>
 8009f5a:	05a2      	lsls	r2, r4, #22
 8009f5c:	d5f5      	bpl.n	8009f4a <_vfiprintf_r+0x38a>
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	e7f3      	b.n	8009f4a <_vfiprintf_r+0x38a>
 8009f62:	1d3b      	adds	r3, r7, #4
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	06a3      	lsls	r3, r4, #26
 8009f68:	d506      	bpl.n	8009f78 <_vfiprintf_r+0x3b8>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	9a08      	ldr	r2, [sp, #32]
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	17d2      	asrs	r2, r2, #31
 8009f72:	605a      	str	r2, [r3, #4]
 8009f74:	9f04      	ldr	r7, [sp, #16]
 8009f76:	e694      	b.n	8009ca2 <_vfiprintf_r+0xe2>
 8009f78:	06e3      	lsls	r3, r4, #27
 8009f7a:	d503      	bpl.n	8009f84 <_vfiprintf_r+0x3c4>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	9a08      	ldr	r2, [sp, #32]
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	e7f7      	b.n	8009f74 <_vfiprintf_r+0x3b4>
 8009f84:	0663      	lsls	r3, r4, #25
 8009f86:	d503      	bpl.n	8009f90 <_vfiprintf_r+0x3d0>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	9a08      	ldr	r2, [sp, #32]
 8009f8c:	801a      	strh	r2, [r3, #0]
 8009f8e:	e7f1      	b.n	8009f74 <_vfiprintf_r+0x3b4>
 8009f90:	05a4      	lsls	r4, r4, #22
 8009f92:	d5f3      	bpl.n	8009f7c <_vfiprintf_r+0x3bc>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	9a08      	ldr	r2, [sp, #32]
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e7eb      	b.n	8009f74 <_vfiprintf_r+0x3b4>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	431c      	orrs	r4, r3
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	0020      	movs	r0, r4
 8009fa4:	4018      	ands	r0, r3
 8009fa6:	421c      	tst	r4, r3
 8009fa8:	d00d      	beq.n	8009fc6 <_vfiprintf_r+0x406>
 8009faa:	3b19      	subs	r3, #25
 8009fac:	3707      	adds	r7, #7
 8009fae:	439f      	bics	r7, r3
 8009fb0:	0039      	movs	r1, r7
 8009fb2:	c90c      	ldmia	r1!, {r2, r3}
 8009fb4:	9200      	str	r2, [sp, #0]
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	9104      	str	r1, [sp, #16]
 8009fba:	4bcc      	ldr	r3, [pc, #816]	; (800a2ec <_vfiprintf_r+0x72c>)
 8009fbc:	401c      	ands	r4, r3
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	aa12      	add	r2, sp, #72	; 0x48
 8009fc4:	e7a6      	b.n	8009f14 <_vfiprintf_r+0x354>
 8009fc6:	003a      	movs	r2, r7
 8009fc8:	ca08      	ldmia	r2!, {r3}
 8009fca:	0021      	movs	r1, r4
 8009fcc:	9204      	str	r2, [sp, #16]
 8009fce:	2210      	movs	r2, #16
 8009fd0:	4011      	ands	r1, r2
 8009fd2:	4214      	tst	r4, r2
 8009fd4:	d002      	beq.n	8009fdc <_vfiprintf_r+0x41c>
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	9001      	str	r0, [sp, #4]
 8009fda:	e7ee      	b.n	8009fba <_vfiprintf_r+0x3fa>
 8009fdc:	2240      	movs	r2, #64	; 0x40
 8009fde:	0020      	movs	r0, r4
 8009fe0:	4010      	ands	r0, r2
 8009fe2:	4214      	tst	r4, r2
 8009fe4:	d003      	beq.n	8009fee <_vfiprintf_r+0x42e>
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	9101      	str	r1, [sp, #4]
 8009fec:	e7e5      	b.n	8009fba <_vfiprintf_r+0x3fa>
 8009fee:	2280      	movs	r2, #128	; 0x80
 8009ff0:	0021      	movs	r1, r4
 8009ff2:	0092      	lsls	r2, r2, #2
 8009ff4:	4011      	ands	r1, r2
 8009ff6:	4214      	tst	r4, r2
 8009ff8:	d0f6      	beq.n	8009fe8 <_vfiprintf_r+0x428>
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	e7eb      	b.n	8009fd6 <_vfiprintf_r+0x416>
 8009ffe:	003b      	movs	r3, r7
 800a000:	cb04      	ldmia	r3!, {r2}
 800a002:	49bb      	ldr	r1, [pc, #748]	; (800a2f0 <_vfiprintf_r+0x730>)
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	2300      	movs	r3, #0
 800a008:	9200      	str	r2, [sp, #0]
 800a00a:	aa13      	add	r2, sp, #76	; 0x4c
 800a00c:	8011      	strh	r1, [r2, #0]
 800a00e:	4ab9      	ldr	r2, [pc, #740]	; (800a2f4 <_vfiprintf_r+0x734>)
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	3302      	adds	r3, #2
 800a014:	431c      	orrs	r4, r3
 800a016:	920c      	str	r2, [sp, #48]	; 0x30
 800a018:	e7d2      	b.n	8009fc0 <_vfiprintf_r+0x400>
 800a01a:	003b      	movs	r3, r7
 800a01c:	2700      	movs	r7, #0
 800a01e:	cb40      	ldmia	r3!, {r6}
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	ab12      	add	r3, sp, #72	; 0x48
 800a024:	70df      	strb	r7, [r3, #3]
 800a026:	9b05      	ldr	r3, [sp, #20]
 800a028:	3301      	adds	r3, #1
 800a02a:	d100      	bne.n	800a02e <_vfiprintf_r+0x46e>
 800a02c:	e0ea      	b.n	800a204 <_vfiprintf_r+0x644>
 800a02e:	0039      	movs	r1, r7
 800a030:	0030      	movs	r0, r6
 800a032:	9a05      	ldr	r2, [sp, #20]
 800a034:	f7fe fbe8 	bl	8008808 <memchr>
 800a038:	900b      	str	r0, [sp, #44]	; 0x2c
 800a03a:	42b8      	cmp	r0, r7
 800a03c:	d002      	beq.n	800a044 <_vfiprintf_r+0x484>
 800a03e:	1b83      	subs	r3, r0, r6
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	970b      	str	r7, [sp, #44]	; 0x2c
 800a044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a046:	9a05      	ldr	r2, [sp, #20]
 800a048:	930a      	str	r3, [sp, #40]	; 0x28
 800a04a:	4293      	cmp	r3, r2
 800a04c:	da00      	bge.n	800a050 <_vfiprintf_r+0x490>
 800a04e:	920a      	str	r2, [sp, #40]	; 0x28
 800a050:	ab12      	add	r3, sp, #72	; 0x48
 800a052:	3303      	adds	r3, #3
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	1e5a      	subs	r2, r3, #1
 800a058:	4193      	sbcs	r3, r2
 800a05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a05c:	18d3      	adds	r3, r2, r3
 800a05e:	930a      	str	r3, [sp, #40]	; 0x28
 800a060:	0022      	movs	r2, r4
 800a062:	2302      	movs	r3, #2
 800a064:	401a      	ands	r2, r3
 800a066:	9210      	str	r2, [sp, #64]	; 0x40
 800a068:	421c      	tst	r4, r3
 800a06a:	d002      	beq.n	800a072 <_vfiprintf_r+0x4b2>
 800a06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06e:	3302      	adds	r3, #2
 800a070:	930a      	str	r3, [sp, #40]	; 0x28
 800a072:	2384      	movs	r3, #132	; 0x84
 800a074:	0022      	movs	r2, r4
 800a076:	401a      	ands	r2, r3
 800a078:	9211      	str	r2, [sp, #68]	; 0x44
 800a07a:	421c      	tst	r4, r3
 800a07c:	d11e      	bne.n	800a0bc <_vfiprintf_r+0x4fc>
 800a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a082:	1a9f      	subs	r7, r3, r2
 800a084:	2f00      	cmp	r7, #0
 800a086:	dd19      	ble.n	800a0bc <_vfiprintf_r+0x4fc>
 800a088:	0029      	movs	r1, r5
 800a08a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a08c:	489a      	ldr	r0, [pc, #616]	; (800a2f8 <_vfiprintf_r+0x738>)
 800a08e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a090:	3301      	adds	r3, #1
 800a092:	3108      	adds	r1, #8
 800a094:	6028      	str	r0, [r5, #0]
 800a096:	2f10      	cmp	r7, #16
 800a098:	dd00      	ble.n	800a09c <_vfiprintf_r+0x4dc>
 800a09a:	e1a7      	b.n	800a3ec <_vfiprintf_r+0x82c>
 800a09c:	606f      	str	r7, [r5, #4]
 800a09e:	18bf      	adds	r7, r7, r2
 800a0a0:	000d      	movs	r5, r1
 800a0a2:	9716      	str	r7, [sp, #88]	; 0x58
 800a0a4:	9315      	str	r3, [sp, #84]	; 0x54
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	dd08      	ble.n	800a0bc <_vfiprintf_r+0x4fc>
 800a0aa:	9903      	ldr	r1, [sp, #12]
 800a0ac:	9806      	ldr	r0, [sp, #24]
 800a0ae:	aa14      	add	r2, sp, #80	; 0x50
 800a0b0:	f7ff fd52 	bl	8009b58 <__sprint_r>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d000      	beq.n	800a0ba <_vfiprintf_r+0x4fa>
 800a0b8:	e1eb      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a0ba:	ad17      	add	r5, sp, #92	; 0x5c
 800a0bc:	a912      	add	r1, sp, #72	; 0x48
 800a0be:	78c8      	ldrb	r0, [r1, #3]
 800a0c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0c4:	3103      	adds	r1, #3
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d012      	beq.n	800a0f0 <_vfiprintf_r+0x530>
 800a0ca:	6029      	str	r1, [r5, #0]
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	1852      	adds	r2, r2, r1
 800a0d2:	6069      	str	r1, [r5, #4]
 800a0d4:	9216      	str	r2, [sp, #88]	; 0x58
 800a0d6:	9315      	str	r3, [sp, #84]	; 0x54
 800a0d8:	3508      	adds	r5, #8
 800a0da:	2b07      	cmp	r3, #7
 800a0dc:	dd08      	ble.n	800a0f0 <_vfiprintf_r+0x530>
 800a0de:	9903      	ldr	r1, [sp, #12]
 800a0e0:	9806      	ldr	r0, [sp, #24]
 800a0e2:	aa14      	add	r2, sp, #80	; 0x50
 800a0e4:	f7ff fd38 	bl	8009b58 <__sprint_r>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d000      	beq.n	800a0ee <_vfiprintf_r+0x52e>
 800a0ec:	e1d1      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a0ee:	ad17      	add	r5, sp, #92	; 0x5c
 800a0f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a0f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d013      	beq.n	800a122 <_vfiprintf_r+0x562>
 800a0fa:	a913      	add	r1, sp, #76	; 0x4c
 800a0fc:	6029      	str	r1, [r5, #0]
 800a0fe:	2102      	movs	r1, #2
 800a100:	3301      	adds	r3, #1
 800a102:	1852      	adds	r2, r2, r1
 800a104:	6069      	str	r1, [r5, #4]
 800a106:	9216      	str	r2, [sp, #88]	; 0x58
 800a108:	9315      	str	r3, [sp, #84]	; 0x54
 800a10a:	3508      	adds	r5, #8
 800a10c:	2b07      	cmp	r3, #7
 800a10e:	dd08      	ble.n	800a122 <_vfiprintf_r+0x562>
 800a110:	9903      	ldr	r1, [sp, #12]
 800a112:	9806      	ldr	r0, [sp, #24]
 800a114:	aa14      	add	r2, sp, #80	; 0x50
 800a116:	f7ff fd1f 	bl	8009b58 <__sprint_r>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d000      	beq.n	800a120 <_vfiprintf_r+0x560>
 800a11e:	e1b8      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a120:	ad17      	add	r5, sp, #92	; 0x5c
 800a122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a124:	2b80      	cmp	r3, #128	; 0x80
 800a126:	d11e      	bne.n	800a166 <_vfiprintf_r+0x5a6>
 800a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a12c:	1a9f      	subs	r7, r3, r2
 800a12e:	2f00      	cmp	r7, #0
 800a130:	dd19      	ble.n	800a166 <_vfiprintf_r+0x5a6>
 800a132:	0029      	movs	r1, r5
 800a134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a136:	4871      	ldr	r0, [pc, #452]	; (800a2fc <_vfiprintf_r+0x73c>)
 800a138:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a13a:	3301      	adds	r3, #1
 800a13c:	3108      	adds	r1, #8
 800a13e:	6028      	str	r0, [r5, #0]
 800a140:	2f10      	cmp	r7, #16
 800a142:	dd00      	ble.n	800a146 <_vfiprintf_r+0x586>
 800a144:	e164      	b.n	800a410 <_vfiprintf_r+0x850>
 800a146:	606f      	str	r7, [r5, #4]
 800a148:	18bf      	adds	r7, r7, r2
 800a14a:	000d      	movs	r5, r1
 800a14c:	9716      	str	r7, [sp, #88]	; 0x58
 800a14e:	9315      	str	r3, [sp, #84]	; 0x54
 800a150:	2b07      	cmp	r3, #7
 800a152:	dd08      	ble.n	800a166 <_vfiprintf_r+0x5a6>
 800a154:	9903      	ldr	r1, [sp, #12]
 800a156:	9806      	ldr	r0, [sp, #24]
 800a158:	aa14      	add	r2, sp, #80	; 0x50
 800a15a:	f7ff fcfd 	bl	8009b58 <__sprint_r>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d000      	beq.n	800a164 <_vfiprintf_r+0x5a4>
 800a162:	e196      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a164:	ad17      	add	r5, sp, #92	; 0x5c
 800a166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a168:	9a05      	ldr	r2, [sp, #20]
 800a16a:	1a9f      	subs	r7, r3, r2
 800a16c:	2f00      	cmp	r7, #0
 800a16e:	dd19      	ble.n	800a1a4 <_vfiprintf_r+0x5e4>
 800a170:	0029      	movs	r1, r5
 800a172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a174:	4861      	ldr	r0, [pc, #388]	; (800a2fc <_vfiprintf_r+0x73c>)
 800a176:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a178:	3301      	adds	r3, #1
 800a17a:	3108      	adds	r1, #8
 800a17c:	6028      	str	r0, [r5, #0]
 800a17e:	2f10      	cmp	r7, #16
 800a180:	dd00      	ble.n	800a184 <_vfiprintf_r+0x5c4>
 800a182:	e157      	b.n	800a434 <_vfiprintf_r+0x874>
 800a184:	606f      	str	r7, [r5, #4]
 800a186:	18bf      	adds	r7, r7, r2
 800a188:	000d      	movs	r5, r1
 800a18a:	9716      	str	r7, [sp, #88]	; 0x58
 800a18c:	9315      	str	r3, [sp, #84]	; 0x54
 800a18e:	2b07      	cmp	r3, #7
 800a190:	dd08      	ble.n	800a1a4 <_vfiprintf_r+0x5e4>
 800a192:	9903      	ldr	r1, [sp, #12]
 800a194:	9806      	ldr	r0, [sp, #24]
 800a196:	aa14      	add	r2, sp, #80	; 0x50
 800a198:	f7ff fcde 	bl	8009b58 <__sprint_r>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d000      	beq.n	800a1a2 <_vfiprintf_r+0x5e2>
 800a1a0:	e177      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a1a2:	ad17      	add	r5, sp, #92	; 0x5c
 800a1a4:	9b05      	ldr	r3, [sp, #20]
 800a1a6:	9a05      	ldr	r2, [sp, #20]
 800a1a8:	606b      	str	r3, [r5, #4]
 800a1aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1ac:	602e      	str	r6, [r5, #0]
 800a1ae:	189b      	adds	r3, r3, r2
 800a1b0:	9316      	str	r3, [sp, #88]	; 0x58
 800a1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1b4:	3508      	adds	r5, #8
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800a1ba:	2b07      	cmp	r3, #7
 800a1bc:	dd08      	ble.n	800a1d0 <_vfiprintf_r+0x610>
 800a1be:	9903      	ldr	r1, [sp, #12]
 800a1c0:	9806      	ldr	r0, [sp, #24]
 800a1c2:	aa14      	add	r2, sp, #80	; 0x50
 800a1c4:	f7ff fcc8 	bl	8009b58 <__sprint_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d000      	beq.n	800a1ce <_vfiprintf_r+0x60e>
 800a1cc:	e161      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a1ce:	ad17      	add	r5, sp, #92	; 0x5c
 800a1d0:	0764      	lsls	r4, r4, #29
 800a1d2:	d500      	bpl.n	800a1d6 <_vfiprintf_r+0x616>
 800a1d4:	e140      	b.n	800a458 <_vfiprintf_r+0x898>
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	da00      	bge.n	800a1e0 <_vfiprintf_r+0x620>
 800a1de:	0013      	movs	r3, r2
 800a1e0:	9a08      	ldr	r2, [sp, #32]
 800a1e2:	18d3      	adds	r3, r2, r3
 800a1e4:	9308      	str	r3, [sp, #32]
 800a1e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d007      	beq.n	800a1fc <_vfiprintf_r+0x63c>
 800a1ec:	9903      	ldr	r1, [sp, #12]
 800a1ee:	9806      	ldr	r0, [sp, #24]
 800a1f0:	aa14      	add	r2, sp, #80	; 0x50
 800a1f2:	f7ff fcb1 	bl	8009b58 <__sprint_r>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d000      	beq.n	800a1fc <_vfiprintf_r+0x63c>
 800a1fa:	e14a      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	ad17      	add	r5, sp, #92	; 0x5c
 800a200:	9315      	str	r3, [sp, #84]	; 0x54
 800a202:	e6b7      	b.n	8009f74 <_vfiprintf_r+0x3b4>
 800a204:	0030      	movs	r0, r6
 800a206:	f7f5 ff7d 	bl	8000104 <strlen>
 800a20a:	9005      	str	r0, [sp, #20]
 800a20c:	e719      	b.n	800a042 <_vfiprintf_r+0x482>
 800a20e:	2310      	movs	r3, #16
 800a210:	431c      	orrs	r4, r3
 800a212:	2320      	movs	r3, #32
 800a214:	0020      	movs	r0, r4
 800a216:	4018      	ands	r0, r3
 800a218:	421c      	tst	r4, r3
 800a21a:	d009      	beq.n	800a230 <_vfiprintf_r+0x670>
 800a21c:	3b19      	subs	r3, #25
 800a21e:	3707      	adds	r7, #7
 800a220:	439f      	bics	r7, r3
 800a222:	0039      	movs	r1, r7
 800a224:	c90c      	ldmia	r1!, {r2, r3}
 800a226:	9200      	str	r2, [sp, #0]
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	9104      	str	r1, [sp, #16]
 800a22c:	2301      	movs	r3, #1
 800a22e:	e6c7      	b.n	8009fc0 <_vfiprintf_r+0x400>
 800a230:	003b      	movs	r3, r7
 800a232:	cb04      	ldmia	r3!, {r2}
 800a234:	0021      	movs	r1, r4
 800a236:	9304      	str	r3, [sp, #16]
 800a238:	2310      	movs	r3, #16
 800a23a:	4019      	ands	r1, r3
 800a23c:	421c      	tst	r4, r3
 800a23e:	d003      	beq.n	800a248 <_vfiprintf_r+0x688>
 800a240:	9200      	str	r2, [sp, #0]
 800a242:	9001      	str	r0, [sp, #4]
 800a244:	3b0f      	subs	r3, #15
 800a246:	e6bb      	b.n	8009fc0 <_vfiprintf_r+0x400>
 800a248:	2340      	movs	r3, #64	; 0x40
 800a24a:	0020      	movs	r0, r4
 800a24c:	4018      	ands	r0, r3
 800a24e:	421c      	tst	r4, r3
 800a250:	d003      	beq.n	800a25a <_vfiprintf_r+0x69a>
 800a252:	b293      	uxth	r3, r2
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	9101      	str	r1, [sp, #4]
 800a258:	e7e8      	b.n	800a22c <_vfiprintf_r+0x66c>
 800a25a:	2380      	movs	r3, #128	; 0x80
 800a25c:	0021      	movs	r1, r4
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4019      	ands	r1, r3
 800a262:	421c      	tst	r4, r3
 800a264:	d003      	beq.n	800a26e <_vfiprintf_r+0x6ae>
 800a266:	b2d3      	uxtb	r3, r2
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	9001      	str	r0, [sp, #4]
 800a26c:	e7de      	b.n	800a22c <_vfiprintf_r+0x66c>
 800a26e:	9200      	str	r2, [sp, #0]
 800a270:	e7f1      	b.n	800a256 <_vfiprintf_r+0x696>
 800a272:	4a23      	ldr	r2, [pc, #140]	; (800a300 <_vfiprintf_r+0x740>)
 800a274:	0020      	movs	r0, r4
 800a276:	920c      	str	r2, [sp, #48]	; 0x30
 800a278:	2220      	movs	r2, #32
 800a27a:	4010      	ands	r0, r2
 800a27c:	4214      	tst	r4, r2
 800a27e:	d019      	beq.n	800a2b4 <_vfiprintf_r+0x6f4>
 800a280:	3a19      	subs	r2, #25
 800a282:	3707      	adds	r7, #7
 800a284:	4397      	bics	r7, r2
 800a286:	0038      	movs	r0, r7
 800a288:	c806      	ldmia	r0!, {r1, r2}
 800a28a:	9100      	str	r1, [sp, #0]
 800a28c:	9201      	str	r2, [sp, #4]
 800a28e:	9004      	str	r0, [sp, #16]
 800a290:	07e2      	lsls	r2, r4, #31
 800a292:	d509      	bpl.n	800a2a8 <_vfiprintf_r+0x6e8>
 800a294:	9a00      	ldr	r2, [sp, #0]
 800a296:	9901      	ldr	r1, [sp, #4]
 800a298:	430a      	orrs	r2, r1
 800a29a:	d005      	beq.n	800a2a8 <_vfiprintf_r+0x6e8>
 800a29c:	aa13      	add	r2, sp, #76	; 0x4c
 800a29e:	2130      	movs	r1, #48	; 0x30
 800a2a0:	7053      	strb	r3, [r2, #1]
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	7011      	strb	r1, [r2, #0]
 800a2a6:	431c      	orrs	r4, r3
 800a2a8:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <_vfiprintf_r+0x72c>)
 800a2aa:	401c      	ands	r4, r3
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e687      	b.n	8009fc0 <_vfiprintf_r+0x400>
 800a2b0:	4a10      	ldr	r2, [pc, #64]	; (800a2f4 <_vfiprintf_r+0x734>)
 800a2b2:	e7df      	b.n	800a274 <_vfiprintf_r+0x6b4>
 800a2b4:	0039      	movs	r1, r7
 800a2b6:	c904      	ldmia	r1!, {r2}
 800a2b8:	0026      	movs	r6, r4
 800a2ba:	9104      	str	r1, [sp, #16]
 800a2bc:	2110      	movs	r1, #16
 800a2be:	400e      	ands	r6, r1
 800a2c0:	420c      	tst	r4, r1
 800a2c2:	d002      	beq.n	800a2ca <_vfiprintf_r+0x70a>
 800a2c4:	9200      	str	r2, [sp, #0]
 800a2c6:	9001      	str	r0, [sp, #4]
 800a2c8:	e7e2      	b.n	800a290 <_vfiprintf_r+0x6d0>
 800a2ca:	2140      	movs	r1, #64	; 0x40
 800a2cc:	0020      	movs	r0, r4
 800a2ce:	4008      	ands	r0, r1
 800a2d0:	420c      	tst	r4, r1
 800a2d2:	d003      	beq.n	800a2dc <_vfiprintf_r+0x71c>
 800a2d4:	b292      	uxth	r2, r2
 800a2d6:	9200      	str	r2, [sp, #0]
 800a2d8:	9601      	str	r6, [sp, #4]
 800a2da:	e7d9      	b.n	800a290 <_vfiprintf_r+0x6d0>
 800a2dc:	2180      	movs	r1, #128	; 0x80
 800a2de:	0026      	movs	r6, r4
 800a2e0:	0089      	lsls	r1, r1, #2
 800a2e2:	400e      	ands	r6, r1
 800a2e4:	420c      	tst	r4, r1
 800a2e6:	d0f6      	beq.n	800a2d6 <_vfiprintf_r+0x716>
 800a2e8:	b2d2      	uxtb	r2, r2
 800a2ea:	e7eb      	b.n	800a2c4 <_vfiprintf_r+0x704>
 800a2ec:	fffffbff 	.word	0xfffffbff
 800a2f0:	00007830 	.word	0x00007830
 800a2f4:	0800b23c 	.word	0x0800b23c
 800a2f8:	0800b321 	.word	0x0800b321
 800a2fc:	0800b331 	.word	0x0800b331
 800a300:	0800b24d 	.word	0x0800b24d
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <_vfiprintf_r+0x75e>
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	2b09      	cmp	r3, #9
 800a30e:	d806      	bhi.n	800a31e <_vfiprintf_r+0x75e>
 800a310:	26b7      	movs	r6, #183	; 0xb7
 800a312:	ab12      	add	r3, sp, #72	; 0x48
 800a314:	18f6      	adds	r6, r6, r3
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	3330      	adds	r3, #48	; 0x30
 800a31a:	7033      	strb	r3, [r6, #0]
 800a31c:	e115      	b.n	800a54a <_vfiprintf_r+0x98a>
 800a31e:	2380      	movs	r3, #128	; 0x80
 800a320:	2400      	movs	r4, #0
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	403b      	ands	r3, r7
 800a326:	ae40      	add	r6, sp, #256	; 0x100
 800a328:	930a      	str	r3, [sp, #40]	; 0x28
 800a32a:	220a      	movs	r2, #10
 800a32c:	9800      	ldr	r0, [sp, #0]
 800a32e:	9901      	ldr	r1, [sp, #4]
 800a330:	2300      	movs	r3, #0
 800a332:	f7f6 f8b7 	bl	80004a4 <__aeabi_uldivmod>
 800a336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a338:	3e01      	subs	r6, #1
 800a33a:	3230      	adds	r2, #48	; 0x30
 800a33c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a33e:	9110      	str	r1, [sp, #64]	; 0x40
 800a340:	7032      	strb	r2, [r6, #0]
 800a342:	3401      	adds	r4, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01a      	beq.n	800a37e <_vfiprintf_r+0x7be>
 800a348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	d116      	bne.n	800a37e <_vfiprintf_r+0x7be>
 800a350:	2cff      	cmp	r4, #255	; 0xff
 800a352:	d014      	beq.n	800a37e <_vfiprintf_r+0x7be>
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <_vfiprintf_r+0x7a0>
 800a35a:	9b00      	ldr	r3, [sp, #0]
 800a35c:	2b09      	cmp	r3, #9
 800a35e:	d90e      	bls.n	800a37e <_vfiprintf_r+0x7be>
 800a360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a362:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a364:	1af6      	subs	r6, r6, r3
 800a366:	001a      	movs	r2, r3
 800a368:	0030      	movs	r0, r6
 800a36a:	f7fc f97f 	bl	800666c <strncpy>
 800a36e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a370:	2400      	movs	r4, #0
 800a372:	785b      	ldrb	r3, [r3, #1]
 800a374:	1e5a      	subs	r2, r3, #1
 800a376:	4193      	sbcs	r3, r2
 800a378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a37a:	18d3      	adds	r3, r2, r3
 800a37c:	930d      	str	r3, [sp, #52]	; 0x34
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d103      	bne.n	800a38c <_vfiprintf_r+0x7cc>
 800a384:	9b00      	ldr	r3, [sp, #0]
 800a386:	2b09      	cmp	r3, #9
 800a388:	d800      	bhi.n	800a38c <_vfiprintf_r+0x7cc>
 800a38a:	e0de      	b.n	800a54a <_vfiprintf_r+0x98a>
 800a38c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	e7c9      	b.n	800a32a <_vfiprintf_r+0x76a>
 800a396:	200f      	movs	r0, #15
 800a398:	9b00      	ldr	r3, [sp, #0]
 800a39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39c:	4003      	ands	r3, r0
 800a39e:	5cd3      	ldrb	r3, [r2, r3]
 800a3a0:	3e01      	subs	r6, #1
 800a3a2:	7033      	strb	r3, [r6, #0]
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	0719      	lsls	r1, r3, #28
 800a3a8:	9b00      	ldr	r3, [sp, #0]
 800a3aa:	091a      	lsrs	r2, r3, #4
 800a3ac:	9b01      	ldr	r3, [sp, #4]
 800a3ae:	4311      	orrs	r1, r2
 800a3b0:	091b      	lsrs	r3, r3, #4
 800a3b2:	9301      	str	r3, [sp, #4]
 800a3b4:	000b      	movs	r3, r1
 800a3b6:	9a01      	ldr	r2, [sp, #4]
 800a3b8:	9100      	str	r1, [sp, #0]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	d1ec      	bne.n	800a398 <_vfiprintf_r+0x7d8>
 800a3be:	e0c4      	b.n	800a54a <_vfiprintf_r+0x98a>
 800a3c0:	ae40      	add	r6, sp, #256	; 0x100
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d000      	beq.n	800a3c8 <_vfiprintf_r+0x808>
 800a3c6:	e0c0      	b.n	800a54a <_vfiprintf_r+0x98a>
 800a3c8:	07e4      	lsls	r4, r4, #31
 800a3ca:	d400      	bmi.n	800a3ce <_vfiprintf_r+0x80e>
 800a3cc:	e0bd      	b.n	800a54a <_vfiprintf_r+0x98a>
 800a3ce:	26b7      	movs	r6, #183	; 0xb7
 800a3d0:	ab12      	add	r3, sp, #72	; 0x48
 800a3d2:	18f6      	adds	r6, r6, r3
 800a3d4:	2330      	movs	r3, #48	; 0x30
 800a3d6:	e7a0      	b.n	800a31a <_vfiprintf_r+0x75a>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d100      	bne.n	800a3de <_vfiprintf_r+0x81e>
 800a3dc:	e07e      	b.n	800a4dc <_vfiprintf_r+0x91c>
 800a3de:	ae27      	add	r6, sp, #156	; 0x9c
 800a3e0:	7033      	strb	r3, [r6, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	aa12      	add	r2, sp, #72	; 0x48
 800a3e6:	70d3      	strb	r3, [r2, #3]
 800a3e8:	9704      	str	r7, [sp, #16]
 800a3ea:	e576      	b.n	8009eda <_vfiprintf_r+0x31a>
 800a3ec:	2010      	movs	r0, #16
 800a3ee:	1812      	adds	r2, r2, r0
 800a3f0:	6068      	str	r0, [r5, #4]
 800a3f2:	9216      	str	r2, [sp, #88]	; 0x58
 800a3f4:	9315      	str	r3, [sp, #84]	; 0x54
 800a3f6:	2b07      	cmp	r3, #7
 800a3f8:	dd07      	ble.n	800a40a <_vfiprintf_r+0x84a>
 800a3fa:	9903      	ldr	r1, [sp, #12]
 800a3fc:	9806      	ldr	r0, [sp, #24]
 800a3fe:	aa14      	add	r2, sp, #80	; 0x50
 800a400:	f7ff fbaa 	bl	8009b58 <__sprint_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	d144      	bne.n	800a492 <_vfiprintf_r+0x8d2>
 800a408:	a917      	add	r1, sp, #92	; 0x5c
 800a40a:	000d      	movs	r5, r1
 800a40c:	3f10      	subs	r7, #16
 800a40e:	e63b      	b.n	800a088 <_vfiprintf_r+0x4c8>
 800a410:	2010      	movs	r0, #16
 800a412:	1812      	adds	r2, r2, r0
 800a414:	6068      	str	r0, [r5, #4]
 800a416:	9216      	str	r2, [sp, #88]	; 0x58
 800a418:	9315      	str	r3, [sp, #84]	; 0x54
 800a41a:	2b07      	cmp	r3, #7
 800a41c:	dd07      	ble.n	800a42e <_vfiprintf_r+0x86e>
 800a41e:	9903      	ldr	r1, [sp, #12]
 800a420:	9806      	ldr	r0, [sp, #24]
 800a422:	aa14      	add	r2, sp, #80	; 0x50
 800a424:	f7ff fb98 	bl	8009b58 <__sprint_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d132      	bne.n	800a492 <_vfiprintf_r+0x8d2>
 800a42c:	a917      	add	r1, sp, #92	; 0x5c
 800a42e:	000d      	movs	r5, r1
 800a430:	3f10      	subs	r7, #16
 800a432:	e67e      	b.n	800a132 <_vfiprintf_r+0x572>
 800a434:	2010      	movs	r0, #16
 800a436:	1812      	adds	r2, r2, r0
 800a438:	6068      	str	r0, [r5, #4]
 800a43a:	9216      	str	r2, [sp, #88]	; 0x58
 800a43c:	9315      	str	r3, [sp, #84]	; 0x54
 800a43e:	2b07      	cmp	r3, #7
 800a440:	dd07      	ble.n	800a452 <_vfiprintf_r+0x892>
 800a442:	9903      	ldr	r1, [sp, #12]
 800a444:	9806      	ldr	r0, [sp, #24]
 800a446:	aa14      	add	r2, sp, #80	; 0x50
 800a448:	f7ff fb86 	bl	8009b58 <__sprint_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d120      	bne.n	800a492 <_vfiprintf_r+0x8d2>
 800a450:	a917      	add	r1, sp, #92	; 0x5c
 800a452:	000d      	movs	r5, r1
 800a454:	3f10      	subs	r7, #16
 800a456:	e68b      	b.n	800a170 <_vfiprintf_r+0x5b0>
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a45c:	2610      	movs	r6, #16
 800a45e:	1a9c      	subs	r4, r3, r2
 800a460:	2c00      	cmp	r4, #0
 800a462:	dc00      	bgt.n	800a466 <_vfiprintf_r+0x8a6>
 800a464:	e6b7      	b.n	800a1d6 <_vfiprintf_r+0x616>
 800a466:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a468:	4a3b      	ldr	r2, [pc, #236]	; (800a558 <_vfiprintf_r+0x998>)
 800a46a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a46c:	3101      	adds	r1, #1
 800a46e:	602a      	str	r2, [r5, #0]
 800a470:	2c10      	cmp	r4, #16
 800a472:	dc22      	bgt.n	800a4ba <_vfiprintf_r+0x8fa>
 800a474:	606c      	str	r4, [r5, #4]
 800a476:	18e4      	adds	r4, r4, r3
 800a478:	9416      	str	r4, [sp, #88]	; 0x58
 800a47a:	9115      	str	r1, [sp, #84]	; 0x54
 800a47c:	2907      	cmp	r1, #7
 800a47e:	dc00      	bgt.n	800a482 <_vfiprintf_r+0x8c2>
 800a480:	e6a9      	b.n	800a1d6 <_vfiprintf_r+0x616>
 800a482:	9903      	ldr	r1, [sp, #12]
 800a484:	9806      	ldr	r0, [sp, #24]
 800a486:	aa14      	add	r2, sp, #80	; 0x50
 800a488:	f7ff fb66 	bl	8009b58 <__sprint_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d100      	bne.n	800a492 <_vfiprintf_r+0x8d2>
 800a490:	e6a1      	b.n	800a1d6 <_vfiprintf_r+0x616>
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a496:	07db      	lsls	r3, r3, #31
 800a498:	d407      	bmi.n	800a4aa <_vfiprintf_r+0x8ea>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	899b      	ldrh	r3, [r3, #12]
 800a49e:	059b      	lsls	r3, r3, #22
 800a4a0:	d403      	bmi.n	800a4aa <_vfiprintf_r+0x8ea>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a4a6:	f7fc f9a0 	bl	80067ea <__retarget_lock_release_recursive>
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	899b      	ldrh	r3, [r3, #12]
 800a4ae:	065b      	lsls	r3, r3, #25
 800a4b0:	d401      	bmi.n	800a4b6 <_vfiprintf_r+0x8f6>
 800a4b2:	f7ff fbc3 	bl	8009c3c <_vfiprintf_r+0x7c>
 800a4b6:	f7ff fbbe 	bl	8009c36 <_vfiprintf_r+0x76>
 800a4ba:	3310      	adds	r3, #16
 800a4bc:	606e      	str	r6, [r5, #4]
 800a4be:	9316      	str	r3, [sp, #88]	; 0x58
 800a4c0:	9115      	str	r1, [sp, #84]	; 0x54
 800a4c2:	3508      	adds	r5, #8
 800a4c4:	2907      	cmp	r1, #7
 800a4c6:	dd07      	ble.n	800a4d8 <_vfiprintf_r+0x918>
 800a4c8:	9903      	ldr	r1, [sp, #12]
 800a4ca:	9806      	ldr	r0, [sp, #24]
 800a4cc:	aa14      	add	r2, sp, #80	; 0x50
 800a4ce:	f7ff fb43 	bl	8009b58 <__sprint_r>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d1dd      	bne.n	800a492 <_vfiprintf_r+0x8d2>
 800a4d6:	ad17      	add	r5, sp, #92	; 0x5c
 800a4d8:	3c10      	subs	r4, #16
 800a4da:	e7c4      	b.n	800a466 <_vfiprintf_r+0x8a6>
 800a4dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <_vfiprintf_r+0x928>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9315      	str	r3, [sp, #84]	; 0x54
 800a4e6:	e7d4      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a4e8:	9903      	ldr	r1, [sp, #12]
 800a4ea:	9806      	ldr	r0, [sp, #24]
 800a4ec:	aa14      	add	r2, sp, #80	; 0x50
 800a4ee:	f7ff fb33 	bl	8009b58 <__sprint_r>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d0f5      	beq.n	800a4e2 <_vfiprintf_r+0x922>
 800a4f6:	e7cc      	b.n	800a492 <_vfiprintf_r+0x8d2>
 800a4f8:	0027      	movs	r7, r4
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	d100      	bne.n	800a500 <_vfiprintf_r+0x940>
 800a4fe:	e51b      	b.n	8009f38 <_vfiprintf_r+0x378>
 800a500:	2b01      	cmp	r3, #1
 800a502:	d100      	bne.n	800a506 <_vfiprintf_r+0x946>
 800a504:	e6fe      	b.n	800a304 <_vfiprintf_r+0x744>
 800a506:	ae40      	add	r6, sp, #256	; 0x100
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d100      	bne.n	800a50e <_vfiprintf_r+0x94e>
 800a50c:	e743      	b.n	800a396 <_vfiprintf_r+0x7d6>
 800a50e:	2307      	movs	r3, #7
 800a510:	469c      	mov	ip, r3
 800a512:	4663      	mov	r3, ip
 800a514:	9900      	ldr	r1, [sp, #0]
 800a516:	0032      	movs	r2, r6
 800a518:	400b      	ands	r3, r1
 800a51a:	9901      	ldr	r1, [sp, #4]
 800a51c:	3e01      	subs	r6, #1
 800a51e:	074c      	lsls	r4, r1, #29
 800a520:	9900      	ldr	r1, [sp, #0]
 800a522:	3330      	adds	r3, #48	; 0x30
 800a524:	08c8      	lsrs	r0, r1, #3
 800a526:	9901      	ldr	r1, [sp, #4]
 800a528:	4304      	orrs	r4, r0
 800a52a:	08c9      	lsrs	r1, r1, #3
 800a52c:	9101      	str	r1, [sp, #4]
 800a52e:	0021      	movs	r1, r4
 800a530:	9801      	ldr	r0, [sp, #4]
 800a532:	7033      	strb	r3, [r6, #0]
 800a534:	9400      	str	r4, [sp, #0]
 800a536:	4301      	orrs	r1, r0
 800a538:	d1eb      	bne.n	800a512 <_vfiprintf_r+0x952>
 800a53a:	07f9      	lsls	r1, r7, #31
 800a53c:	d505      	bpl.n	800a54a <_vfiprintf_r+0x98a>
 800a53e:	2b30      	cmp	r3, #48	; 0x30
 800a540:	d003      	beq.n	800a54a <_vfiprintf_r+0x98a>
 800a542:	2330      	movs	r3, #48	; 0x30
 800a544:	3e01      	subs	r6, #1
 800a546:	7033      	strb	r3, [r6, #0]
 800a548:	1e96      	subs	r6, r2, #2
 800a54a:	9b05      	ldr	r3, [sp, #20]
 800a54c:	003c      	movs	r4, r7
 800a54e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a550:	ab40      	add	r3, sp, #256	; 0x100
 800a552:	1b9b      	subs	r3, r3, r6
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	e575      	b.n	800a044 <_vfiprintf_r+0x484>
 800a558:	0800b321 	.word	0x0800b321

0800a55c <__sbprintf>:
 800a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55e:	0015      	movs	r5, r2
 800a560:	2202      	movs	r2, #2
 800a562:	4c1e      	ldr	r4, [pc, #120]	; (800a5dc <__sbprintf+0x80>)
 800a564:	001f      	movs	r7, r3
 800a566:	898b      	ldrh	r3, [r1, #12]
 800a568:	44a5      	add	sp, r4
 800a56a:	4393      	bics	r3, r2
 800a56c:	466a      	mov	r2, sp
 800a56e:	8193      	strh	r3, [r2, #12]
 800a570:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a572:	0006      	movs	r6, r0
 800a574:	9319      	str	r3, [sp, #100]	; 0x64
 800a576:	89cb      	ldrh	r3, [r1, #14]
 800a578:	a816      	add	r0, sp, #88	; 0x58
 800a57a:	81d3      	strh	r3, [r2, #14]
 800a57c:	69cb      	ldr	r3, [r1, #28]
 800a57e:	000c      	movs	r4, r1
 800a580:	9307      	str	r3, [sp, #28]
 800a582:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	ab1a      	add	r3, sp, #104	; 0x68
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	2300      	movs	r3, #0
 800a596:	9306      	str	r3, [sp, #24]
 800a598:	f7fc f924 	bl	80067e4 <__retarget_lock_init_recursive>
 800a59c:	002a      	movs	r2, r5
 800a59e:	003b      	movs	r3, r7
 800a5a0:	4669      	mov	r1, sp
 800a5a2:	0030      	movs	r0, r6
 800a5a4:	f7ff fb0c 	bl	8009bc0 <_vfiprintf_r>
 800a5a8:	1e05      	subs	r5, r0, #0
 800a5aa:	db07      	blt.n	800a5bc <__sbprintf+0x60>
 800a5ac:	4669      	mov	r1, sp
 800a5ae:	0030      	movs	r0, r6
 800a5b0:	f7fe f8ec 	bl	800878c <_fflush_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d001      	beq.n	800a5bc <__sbprintf+0x60>
 800a5b8:	2501      	movs	r5, #1
 800a5ba:	426d      	negs	r5, r5
 800a5bc:	466b      	mov	r3, sp
 800a5be:	899a      	ldrh	r2, [r3, #12]
 800a5c0:	2340      	movs	r3, #64	; 0x40
 800a5c2:	421a      	tst	r2, r3
 800a5c4:	d002      	beq.n	800a5cc <__sbprintf+0x70>
 800a5c6:	89a2      	ldrh	r2, [r4, #12]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a5ce:	f7fc f90a 	bl	80067e6 <__retarget_lock_close_recursive>
 800a5d2:	0028      	movs	r0, r5
 800a5d4:	4b02      	ldr	r3, [pc, #8]	; (800a5e0 <__sbprintf+0x84>)
 800a5d6:	449d      	add	sp, r3
 800a5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	fffffb94 	.word	0xfffffb94
 800a5e0:	0000046c 	.word	0x0000046c

0800a5e4 <__sfvwrite_r>:
 800a5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e6:	6893      	ldr	r3, [r2, #8]
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	000c      	movs	r4, r1
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	9204      	str	r2, [sp, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <__sfvwrite_r+0x16>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	b007      	add	sp, #28
 800a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5fa:	898b      	ldrh	r3, [r1, #12]
 800a5fc:	071b      	lsls	r3, r3, #28
 800a5fe:	d557      	bpl.n	800a6b0 <__sfvwrite_r+0xcc>
 800a600:	690b      	ldr	r3, [r1, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d054      	beq.n	800a6b0 <__sfvwrite_r+0xcc>
 800a606:	9b04      	ldr	r3, [sp, #16]
 800a608:	2202      	movs	r2, #2
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	001f      	movs	r7, r3
 800a612:	4017      	ands	r7, r2
 800a614:	4213      	tst	r3, r2
 800a616:	d171      	bne.n	800a6fc <__sfvwrite_r+0x118>
 800a618:	2201      	movs	r2, #1
 800a61a:	2101      	movs	r1, #1
 800a61c:	401a      	ands	r2, r3
 800a61e:	420b      	tst	r3, r1
 800a620:	d100      	bne.n	800a624 <__sfvwrite_r+0x40>
 800a622:	e0a5      	b.n	800a770 <__sfvwrite_r+0x18c>
 800a624:	0038      	movs	r0, r7
 800a626:	003e      	movs	r6, r7
 800a628:	9703      	str	r7, [sp, #12]
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d100      	bne.n	800a632 <__sfvwrite_r+0x4e>
 800a630:	e10b      	b.n	800a84a <__sfvwrite_r+0x266>
 800a632:	2800      	cmp	r0, #0
 800a634:	d10a      	bne.n	800a64c <__sfvwrite_r+0x68>
 800a636:	001a      	movs	r2, r3
 800a638:	210a      	movs	r1, #10
 800a63a:	0030      	movs	r0, r6
 800a63c:	f7fe f8e4 	bl	8008808 <memchr>
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	1c5f      	adds	r7, r3, #1
 800a644:	2800      	cmp	r0, #0
 800a646:	d001      	beq.n	800a64c <__sfvwrite_r+0x68>
 800a648:	3001      	adds	r0, #1
 800a64a:	1b87      	subs	r7, r0, r6
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	9705      	str	r7, [sp, #20]
 800a650:	429f      	cmp	r7, r3
 800a652:	d900      	bls.n	800a656 <__sfvwrite_r+0x72>
 800a654:	9305      	str	r3, [sp, #20]
 800a656:	6820      	ldr	r0, [r4, #0]
 800a658:	6922      	ldr	r2, [r4, #16]
 800a65a:	68a5      	ldr	r5, [r4, #8]
 800a65c:	6963      	ldr	r3, [r4, #20]
 800a65e:	4290      	cmp	r0, r2
 800a660:	d800      	bhi.n	800a664 <__sfvwrite_r+0x80>
 800a662:	e0fb      	b.n	800a85c <__sfvwrite_r+0x278>
 800a664:	9a05      	ldr	r2, [sp, #20]
 800a666:	18ed      	adds	r5, r5, r3
 800a668:	42aa      	cmp	r2, r5
 800a66a:	dc00      	bgt.n	800a66e <__sfvwrite_r+0x8a>
 800a66c:	e0f6      	b.n	800a85c <__sfvwrite_r+0x278>
 800a66e:	0031      	movs	r1, r6
 800a670:	002a      	movs	r2, r5
 800a672:	f000 f9e0 	bl	800aa36 <memmove>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	0021      	movs	r1, r4
 800a67a:	195b      	adds	r3, r3, r5
 800a67c:	9802      	ldr	r0, [sp, #8]
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	f7fe f884 	bl	800878c <_fflush_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	d16e      	bne.n	800a766 <__sfvwrite_r+0x182>
 800a688:	2001      	movs	r0, #1
 800a68a:	1b7f      	subs	r7, r7, r5
 800a68c:	d105      	bne.n	800a69a <__sfvwrite_r+0xb6>
 800a68e:	0021      	movs	r1, r4
 800a690:	9802      	ldr	r0, [sp, #8]
 800a692:	f7fe f87b 	bl	800878c <_fflush_r>
 800a696:	2800      	cmp	r0, #0
 800a698:	d165      	bne.n	800a766 <__sfvwrite_r+0x182>
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	9a04      	ldr	r2, [sp, #16]
 800a69e:	1b5b      	subs	r3, r3, r5
 800a6a0:	9303      	str	r3, [sp, #12]
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	1976      	adds	r6, r6, r5
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	1b5b      	subs	r3, r3, r5
 800a6aa:	6093      	str	r3, [r2, #8]
 800a6ac:	d1bd      	bne.n	800a62a <__sfvwrite_r+0x46>
 800a6ae:	e7a1      	b.n	800a5f4 <__sfvwrite_r+0x10>
 800a6b0:	0021      	movs	r1, r4
 800a6b2:	9802      	ldr	r0, [sp, #8]
 800a6b4:	f000 f8f4 	bl	800a8a0 <__swsetup_r>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d0a4      	beq.n	800a606 <__sfvwrite_r+0x22>
 800a6bc:	2001      	movs	r0, #1
 800a6be:	4240      	negs	r0, r0
 800a6c0:	e799      	b.n	800a5f6 <__sfvwrite_r+0x12>
 800a6c2:	9b01      	ldr	r3, [sp, #4]
 800a6c4:	681e      	ldr	r6, [r3, #0]
 800a6c6:	685d      	ldr	r5, [r3, #4]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a6ce:	69e1      	ldr	r1, [r4, #28]
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	d0f6      	beq.n	800a6c2 <__sfvwrite_r+0xde>
 800a6d4:	4a6e      	ldr	r2, [pc, #440]	; (800a890 <__sfvwrite_r+0x2ac>)
 800a6d6:	002b      	movs	r3, r5
 800a6d8:	4295      	cmp	r5, r2
 800a6da:	d900      	bls.n	800a6de <__sfvwrite_r+0xfa>
 800a6dc:	0013      	movs	r3, r2
 800a6de:	0032      	movs	r2, r6
 800a6e0:	9802      	ldr	r0, [sp, #8]
 800a6e2:	47b8      	blx	r7
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	dd3e      	ble.n	800a766 <__sfvwrite_r+0x182>
 800a6e8:	9b04      	ldr	r3, [sp, #16]
 800a6ea:	9a04      	ldr	r2, [sp, #16]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	1836      	adds	r6, r6, r0
 800a6f0:	1a1b      	subs	r3, r3, r0
 800a6f2:	1a2d      	subs	r5, r5, r0
 800a6f4:	6093      	str	r3, [r2, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e8      	bne.n	800a6cc <__sfvwrite_r+0xe8>
 800a6fa:	e77b      	b.n	800a5f4 <__sfvwrite_r+0x10>
 800a6fc:	2600      	movs	r6, #0
 800a6fe:	0035      	movs	r5, r6
 800a700:	e7e4      	b.n	800a6cc <__sfvwrite_r+0xe8>
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	685d      	ldr	r5, [r3, #4]
 800a70c:	3308      	adds	r3, #8
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	220c      	movs	r2, #12
 800a712:	5ea3      	ldrsh	r3, [r4, r2]
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	68a6      	ldr	r6, [r4, #8]
 800a718:	2d00      	cmp	r5, #0
 800a71a:	d0f2      	beq.n	800a702 <__sfvwrite_r+0x11e>
 800a71c:	2180      	movs	r1, #128	; 0x80
 800a71e:	0089      	lsls	r1, r1, #2
 800a720:	b29a      	uxth	r2, r3
 800a722:	420b      	tst	r3, r1
 800a724:	d062      	beq.n	800a7ec <__sfvwrite_r+0x208>
 800a726:	42ae      	cmp	r6, r5
 800a728:	d837      	bhi.n	800a79a <__sfvwrite_r+0x1b6>
 800a72a:	2390      	movs	r3, #144	; 0x90
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	421a      	tst	r2, r3
 800a730:	d033      	beq.n	800a79a <__sfvwrite_r+0x1b6>
 800a732:	6921      	ldr	r1, [r4, #16]
 800a734:	1a43      	subs	r3, r0, r1
 800a736:	2003      	movs	r0, #3
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	6963      	ldr	r3, [r4, #20]
 800a73c:	4343      	muls	r3, r0
 800a73e:	0fdf      	lsrs	r7, r3, #31
 800a740:	18ff      	adds	r7, r7, r3
 800a742:	9b05      	ldr	r3, [sp, #20]
 800a744:	107f      	asrs	r7, r7, #1
 800a746:	3301      	adds	r3, #1
 800a748:	195b      	adds	r3, r3, r5
 800a74a:	42bb      	cmp	r3, r7
 800a74c:	d900      	bls.n	800a750 <__sfvwrite_r+0x16c>
 800a74e:	001f      	movs	r7, r3
 800a750:	0552      	lsls	r2, r2, #21
 800a752:	d53c      	bpl.n	800a7ce <__sfvwrite_r+0x1ea>
 800a754:	0039      	movs	r1, r7
 800a756:	9802      	ldr	r0, [sp, #8]
 800a758:	f7fb fb9a 	bl	8005e90 <_malloc_r>
 800a75c:	1e06      	subs	r6, r0, #0
 800a75e:	d10a      	bne.n	800a776 <__sfvwrite_r+0x192>
 800a760:	230c      	movs	r3, #12
 800a762:	9a02      	ldr	r2, [sp, #8]
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	2340      	movs	r3, #64	; 0x40
 800a768:	89a2      	ldrh	r2, [r4, #12]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	e7a5      	b.n	800a6bc <__sfvwrite_r+0xd8>
 800a770:	0015      	movs	r5, r2
 800a772:	9203      	str	r2, [sp, #12]
 800a774:	e7cc      	b.n	800a710 <__sfvwrite_r+0x12c>
 800a776:	9a05      	ldr	r2, [sp, #20]
 800a778:	6921      	ldr	r1, [r4, #16]
 800a77a:	f7fc f842 	bl	8006802 <memcpy>
 800a77e:	89a2      	ldrh	r2, [r4, #12]
 800a780:	4b44      	ldr	r3, [pc, #272]	; (800a894 <__sfvwrite_r+0x2b0>)
 800a782:	401a      	ands	r2, r3
 800a784:	2380      	movs	r3, #128	; 0x80
 800a786:	4313      	orrs	r3, r2
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	9b05      	ldr	r3, [sp, #20]
 800a78c:	6126      	str	r6, [r4, #16]
 800a78e:	18f6      	adds	r6, r6, r3
 800a790:	6026      	str	r6, [r4, #0]
 800a792:	002e      	movs	r6, r5
 800a794:	6167      	str	r7, [r4, #20]
 800a796:	1aff      	subs	r7, r7, r3
 800a798:	60a7      	str	r7, [r4, #8]
 800a79a:	002f      	movs	r7, r5
 800a79c:	42ae      	cmp	r6, r5
 800a79e:	d900      	bls.n	800a7a2 <__sfvwrite_r+0x1be>
 800a7a0:	002e      	movs	r6, r5
 800a7a2:	0032      	movs	r2, r6
 800a7a4:	9903      	ldr	r1, [sp, #12]
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	f000 f945 	bl	800aa36 <memmove>
 800a7ac:	68a3      	ldr	r3, [r4, #8]
 800a7ae:	1b9b      	subs	r3, r3, r6
 800a7b0:	60a3      	str	r3, [r4, #8]
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	199b      	adds	r3, r3, r6
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	9a04      	ldr	r2, [sp, #16]
 800a7bc:	19db      	adds	r3, r3, r7
 800a7be:	9303      	str	r3, [sp, #12]
 800a7c0:	9b04      	ldr	r3, [sp, #16]
 800a7c2:	1bed      	subs	r5, r5, r7
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	1bdb      	subs	r3, r3, r7
 800a7c8:	6093      	str	r3, [r2, #8]
 800a7ca:	d1a1      	bne.n	800a710 <__sfvwrite_r+0x12c>
 800a7cc:	e712      	b.n	800a5f4 <__sfvwrite_r+0x10>
 800a7ce:	003a      	movs	r2, r7
 800a7d0:	9802      	ldr	r0, [sp, #8]
 800a7d2:	f7fe ff87 	bl	80096e4 <_realloc_r>
 800a7d6:	1e06      	subs	r6, r0, #0
 800a7d8:	d1d7      	bne.n	800a78a <__sfvwrite_r+0x1a6>
 800a7da:	6921      	ldr	r1, [r4, #16]
 800a7dc:	9802      	ldr	r0, [sp, #8]
 800a7de:	f7fc f881 	bl	80068e4 <_free_r>
 800a7e2:	2280      	movs	r2, #128	; 0x80
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	4393      	bics	r3, r2
 800a7e8:	81a3      	strh	r3, [r4, #12]
 800a7ea:	e7b9      	b.n	800a760 <__sfvwrite_r+0x17c>
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	4283      	cmp	r3, r0
 800a7f0:	d302      	bcc.n	800a7f8 <__sfvwrite_r+0x214>
 800a7f2:	6967      	ldr	r7, [r4, #20]
 800a7f4:	42af      	cmp	r7, r5
 800a7f6:	d916      	bls.n	800a826 <__sfvwrite_r+0x242>
 800a7f8:	42ae      	cmp	r6, r5
 800a7fa:	d900      	bls.n	800a7fe <__sfvwrite_r+0x21a>
 800a7fc:	002e      	movs	r6, r5
 800a7fe:	0032      	movs	r2, r6
 800a800:	9903      	ldr	r1, [sp, #12]
 800a802:	f000 f918 	bl	800aa36 <memmove>
 800a806:	68a3      	ldr	r3, [r4, #8]
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	1b9b      	subs	r3, r3, r6
 800a80c:	1992      	adds	r2, r2, r6
 800a80e:	0037      	movs	r7, r6
 800a810:	60a3      	str	r3, [r4, #8]
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1cf      	bne.n	800a7b8 <__sfvwrite_r+0x1d4>
 800a818:	0021      	movs	r1, r4
 800a81a:	9802      	ldr	r0, [sp, #8]
 800a81c:	f7fd ffb6 	bl	800878c <_fflush_r>
 800a820:	2800      	cmp	r0, #0
 800a822:	d0c9      	beq.n	800a7b8 <__sfvwrite_r+0x1d4>
 800a824:	e79f      	b.n	800a766 <__sfvwrite_r+0x182>
 800a826:	4b1c      	ldr	r3, [pc, #112]	; (800a898 <__sfvwrite_r+0x2b4>)
 800a828:	0028      	movs	r0, r5
 800a82a:	429d      	cmp	r5, r3
 800a82c:	d900      	bls.n	800a830 <__sfvwrite_r+0x24c>
 800a82e:	481b      	ldr	r0, [pc, #108]	; (800a89c <__sfvwrite_r+0x2b8>)
 800a830:	0039      	movs	r1, r7
 800a832:	f7f5 fd0d 	bl	8000250 <__divsi3>
 800a836:	003b      	movs	r3, r7
 800a838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a83a:	4343      	muls	r3, r0
 800a83c:	9a03      	ldr	r2, [sp, #12]
 800a83e:	69e1      	ldr	r1, [r4, #28]
 800a840:	9802      	ldr	r0, [sp, #8]
 800a842:	47b0      	blx	r6
 800a844:	1e07      	subs	r7, r0, #0
 800a846:	dcb7      	bgt.n	800a7b8 <__sfvwrite_r+0x1d4>
 800a848:	e78d      	b.n	800a766 <__sfvwrite_r+0x182>
 800a84a:	9b01      	ldr	r3, [sp, #4]
 800a84c:	2000      	movs	r0, #0
 800a84e:	681e      	ldr	r6, [r3, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	3308      	adds	r3, #8
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	e6e6      	b.n	800a62a <__sfvwrite_r+0x46>
 800a85c:	9a05      	ldr	r2, [sp, #20]
 800a85e:	4293      	cmp	r3, r2
 800a860:	dc08      	bgt.n	800a874 <__sfvwrite_r+0x290>
 800a862:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a864:	0032      	movs	r2, r6
 800a866:	69e1      	ldr	r1, [r4, #28]
 800a868:	9802      	ldr	r0, [sp, #8]
 800a86a:	47a8      	blx	r5
 800a86c:	1e05      	subs	r5, r0, #0
 800a86e:	dd00      	ble.n	800a872 <__sfvwrite_r+0x28e>
 800a870:	e70a      	b.n	800a688 <__sfvwrite_r+0xa4>
 800a872:	e778      	b.n	800a766 <__sfvwrite_r+0x182>
 800a874:	9a05      	ldr	r2, [sp, #20]
 800a876:	0031      	movs	r1, r6
 800a878:	f000 f8dd 	bl	800aa36 <memmove>
 800a87c:	9a05      	ldr	r2, [sp, #20]
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	0015      	movs	r5, r2
 800a882:	1a9b      	subs	r3, r3, r2
 800a884:	60a3      	str	r3, [r4, #8]
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	189b      	adds	r3, r3, r2
 800a88a:	6023      	str	r3, [r4, #0]
 800a88c:	e6fc      	b.n	800a688 <__sfvwrite_r+0xa4>
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	7ffffc00 	.word	0x7ffffc00
 800a894:	fffffb7f 	.word	0xfffffb7f
 800a898:	7ffffffe 	.word	0x7ffffffe
 800a89c:	7fffffff 	.word	0x7fffffff

0800a8a0 <__swsetup_r>:
 800a8a0:	4b30      	ldr	r3, [pc, #192]	; (800a964 <__swsetup_r+0xc4>)
 800a8a2:	b570      	push	{r4, r5, r6, lr}
 800a8a4:	0005      	movs	r5, r0
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	000c      	movs	r4, r1
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d004      	beq.n	800a8b8 <__swsetup_r+0x18>
 800a8ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <__swsetup_r+0x18>
 800a8b4:	f7fb fe32 	bl	800651c <__sinit>
 800a8b8:	230c      	movs	r3, #12
 800a8ba:	5ee2      	ldrsh	r2, [r4, r3]
 800a8bc:	b293      	uxth	r3, r2
 800a8be:	0711      	lsls	r1, r2, #28
 800a8c0:	d423      	bmi.n	800a90a <__swsetup_r+0x6a>
 800a8c2:	06d9      	lsls	r1, r3, #27
 800a8c4:	d407      	bmi.n	800a8d6 <__swsetup_r+0x36>
 800a8c6:	2309      	movs	r3, #9
 800a8c8:	2001      	movs	r0, #1
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	3337      	adds	r3, #55	; 0x37
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	4240      	negs	r0, r0
 800a8d4:	bd70      	pop	{r4, r5, r6, pc}
 800a8d6:	075b      	lsls	r3, r3, #29
 800a8d8:	d513      	bpl.n	800a902 <__swsetup_r+0x62>
 800a8da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d008      	beq.n	800a8f2 <__swsetup_r+0x52>
 800a8e0:	0023      	movs	r3, r4
 800a8e2:	3340      	adds	r3, #64	; 0x40
 800a8e4:	4299      	cmp	r1, r3
 800a8e6:	d002      	beq.n	800a8ee <__swsetup_r+0x4e>
 800a8e8:	0028      	movs	r0, r5
 800a8ea:	f7fb fffb 	bl	80068e4 <_free_r>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f2:	2224      	movs	r2, #36	; 0x24
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	4393      	bics	r3, r2
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	6063      	str	r3, [r4, #4]
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	2308      	movs	r3, #8
 800a904:	89a2      	ldrh	r2, [r4, #12]
 800a906:	4313      	orrs	r3, r2
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10b      	bne.n	800a928 <__swsetup_r+0x88>
 800a910:	21a0      	movs	r1, #160	; 0xa0
 800a912:	2280      	movs	r2, #128	; 0x80
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	0089      	lsls	r1, r1, #2
 800a918:	0092      	lsls	r2, r2, #2
 800a91a:	400b      	ands	r3, r1
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <__swsetup_r+0x88>
 800a920:	0021      	movs	r1, r4
 800a922:	0028      	movs	r0, r5
 800a924:	f000 f8e8 	bl	800aaf8 <__smakebuf_r>
 800a928:	220c      	movs	r2, #12
 800a92a:	5ea3      	ldrsh	r3, [r4, r2]
 800a92c:	2001      	movs	r0, #1
 800a92e:	001a      	movs	r2, r3
 800a930:	b299      	uxth	r1, r3
 800a932:	4002      	ands	r2, r0
 800a934:	4203      	tst	r3, r0
 800a936:	d00f      	beq.n	800a958 <__swsetup_r+0xb8>
 800a938:	2200      	movs	r2, #0
 800a93a:	60a2      	str	r2, [r4, #8]
 800a93c:	6962      	ldr	r2, [r4, #20]
 800a93e:	4252      	negs	r2, r2
 800a940:	61a2      	str	r2, [r4, #24]
 800a942:	2000      	movs	r0, #0
 800a944:	6922      	ldr	r2, [r4, #16]
 800a946:	4282      	cmp	r2, r0
 800a948:	d1c4      	bne.n	800a8d4 <__swsetup_r+0x34>
 800a94a:	0609      	lsls	r1, r1, #24
 800a94c:	d5c2      	bpl.n	800a8d4 <__swsetup_r+0x34>
 800a94e:	2240      	movs	r2, #64	; 0x40
 800a950:	4313      	orrs	r3, r2
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	3801      	subs	r0, #1
 800a956:	e7bd      	b.n	800a8d4 <__swsetup_r+0x34>
 800a958:	0788      	lsls	r0, r1, #30
 800a95a:	d400      	bmi.n	800a95e <__swsetup_r+0xbe>
 800a95c:	6962      	ldr	r2, [r4, #20]
 800a95e:	60a2      	str	r2, [r4, #8]
 800a960:	e7ef      	b.n	800a942 <__swsetup_r+0xa2>
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	200006e8 	.word	0x200006e8

0800a968 <__fputwc>:
 800a968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96a:	b085      	sub	sp, #20
 800a96c:	000e      	movs	r6, r1
 800a96e:	0015      	movs	r5, r2
 800a970:	9001      	str	r0, [sp, #4]
 800a972:	f7fb fea5 	bl	80066c0 <__locale_mb_cur_max>
 800a976:	0004      	movs	r4, r0
 800a978:	2801      	cmp	r0, #1
 800a97a:	d119      	bne.n	800a9b0 <__fputwc+0x48>
 800a97c:	1e73      	subs	r3, r6, #1
 800a97e:	2bfe      	cmp	r3, #254	; 0xfe
 800a980:	d816      	bhi.n	800a9b0 <__fputwc+0x48>
 800a982:	ab02      	add	r3, sp, #8
 800a984:	711e      	strb	r6, [r3, #4]
 800a986:	2700      	movs	r7, #0
 800a988:	42a7      	cmp	r7, r4
 800a98a:	d020      	beq.n	800a9ce <__fputwc+0x66>
 800a98c:	ab03      	add	r3, sp, #12
 800a98e:	5dd9      	ldrb	r1, [r3, r7]
 800a990:	68ab      	ldr	r3, [r5, #8]
 800a992:	3b01      	subs	r3, #1
 800a994:	60ab      	str	r3, [r5, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da04      	bge.n	800a9a4 <__fputwc+0x3c>
 800a99a:	69aa      	ldr	r2, [r5, #24]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	db19      	blt.n	800a9d4 <__fputwc+0x6c>
 800a9a0:	290a      	cmp	r1, #10
 800a9a2:	d017      	beq.n	800a9d4 <__fputwc+0x6c>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	602a      	str	r2, [r5, #0]
 800a9aa:	7019      	strb	r1, [r3, #0]
 800a9ac:	3701      	adds	r7, #1
 800a9ae:	e7eb      	b.n	800a988 <__fputwc+0x20>
 800a9b0:	002b      	movs	r3, r5
 800a9b2:	0032      	movs	r2, r6
 800a9b4:	9801      	ldr	r0, [sp, #4]
 800a9b6:	335c      	adds	r3, #92	; 0x5c
 800a9b8:	a903      	add	r1, sp, #12
 800a9ba:	f000 f857 	bl	800aa6c <_wcrtomb_r>
 800a9be:	0004      	movs	r4, r0
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d1e0      	bne.n	800a986 <__fputwc+0x1e>
 800a9c4:	2340      	movs	r3, #64	; 0x40
 800a9c6:	0006      	movs	r6, r0
 800a9c8:	89aa      	ldrh	r2, [r5, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	81ab      	strh	r3, [r5, #12]
 800a9ce:	0030      	movs	r0, r6
 800a9d0:	b005      	add	sp, #20
 800a9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d4:	002a      	movs	r2, r5
 800a9d6:	9801      	ldr	r0, [sp, #4]
 800a9d8:	f000 f8cc 	bl	800ab74 <__swbuf_r>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d1e5      	bne.n	800a9ac <__fputwc+0x44>
 800a9e0:	0006      	movs	r6, r0
 800a9e2:	e7f4      	b.n	800a9ce <__fputwc+0x66>

0800a9e4 <_fputwc_r>:
 800a9e4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a9e6:	b570      	push	{r4, r5, r6, lr}
 800a9e8:	0005      	movs	r5, r0
 800a9ea:	000e      	movs	r6, r1
 800a9ec:	0014      	movs	r4, r2
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_fputwc_r+0x1a>
 800a9f2:	8993      	ldrh	r3, [r2, #12]
 800a9f4:	059b      	lsls	r3, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_fputwc_r+0x1a>
 800a9f8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800a9fa:	f7fb fef5 	bl	80067e8 <__retarget_lock_acquire_recursive>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	5ee2      	ldrsh	r2, [r4, r3]
 800aa02:	2380      	movs	r3, #128	; 0x80
 800aa04:	019b      	lsls	r3, r3, #6
 800aa06:	421a      	tst	r2, r3
 800aa08:	d104      	bne.n	800aa14 <_fputwc_r+0x30>
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	81a2      	strh	r2, [r4, #12]
 800aa0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa10:	4313      	orrs	r3, r2
 800aa12:	6663      	str	r3, [r4, #100]	; 0x64
 800aa14:	0028      	movs	r0, r5
 800aa16:	0022      	movs	r2, r4
 800aa18:	0031      	movs	r1, r6
 800aa1a:	f7ff ffa5 	bl	800a968 <__fputwc>
 800aa1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa20:	0005      	movs	r5, r0
 800aa22:	07db      	lsls	r3, r3, #31
 800aa24:	d405      	bmi.n	800aa32 <_fputwc_r+0x4e>
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	059b      	lsls	r3, r3, #22
 800aa2a:	d402      	bmi.n	800aa32 <_fputwc_r+0x4e>
 800aa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2e:	f7fb fedc 	bl	80067ea <__retarget_lock_release_recursive>
 800aa32:	0028      	movs	r0, r5
 800aa34:	bd70      	pop	{r4, r5, r6, pc}

0800aa36 <memmove>:
 800aa36:	b510      	push	{r4, lr}
 800aa38:	4288      	cmp	r0, r1
 800aa3a:	d902      	bls.n	800aa42 <memmove+0xc>
 800aa3c:	188b      	adds	r3, r1, r2
 800aa3e:	4298      	cmp	r0, r3
 800aa40:	d303      	bcc.n	800aa4a <memmove+0x14>
 800aa42:	2300      	movs	r3, #0
 800aa44:	e007      	b.n	800aa56 <memmove+0x20>
 800aa46:	5c8b      	ldrb	r3, [r1, r2]
 800aa48:	5483      	strb	r3, [r0, r2]
 800aa4a:	3a01      	subs	r2, #1
 800aa4c:	d2fb      	bcs.n	800aa46 <memmove+0x10>
 800aa4e:	bd10      	pop	{r4, pc}
 800aa50:	5ccc      	ldrb	r4, [r1, r3]
 800aa52:	54c4      	strb	r4, [r0, r3]
 800aa54:	3301      	adds	r3, #1
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d1fa      	bne.n	800aa50 <memmove+0x1a>
 800aa5a:	e7f8      	b.n	800aa4e <memmove+0x18>

0800aa5c <abort>:
 800aa5c:	2006      	movs	r0, #6
 800aa5e:	b510      	push	{r4, lr}
 800aa60:	f000 f906 	bl	800ac70 <raise>
 800aa64:	2001      	movs	r0, #1
 800aa66:	f7f8 f94f 	bl	8002d08 <_exit>
	...

0800aa6c <_wcrtomb_r>:
 800aa6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aa6e:	001d      	movs	r5, r3
 800aa70:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <_wcrtomb_r+0x2c>)
 800aa72:	0004      	movs	r4, r0
 800aa74:	33e0      	adds	r3, #224	; 0xe0
 800aa76:	681e      	ldr	r6, [r3, #0]
 800aa78:	002b      	movs	r3, r5
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	d101      	bne.n	800aa82 <_wcrtomb_r+0x16>
 800aa7e:	000a      	movs	r2, r1
 800aa80:	a901      	add	r1, sp, #4
 800aa82:	0020      	movs	r0, r4
 800aa84:	47b0      	blx	r6
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d103      	bne.n	800aa92 <_wcrtomb_r+0x26>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	338a      	adds	r3, #138	; 0x8a
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	b004      	add	sp, #16
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	20000458 	.word	0x20000458

0800aa9c <__swhatbuf_r>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	000e      	movs	r6, r1
 800aaa0:	001d      	movs	r5, r3
 800aaa2:	230e      	movs	r3, #14
 800aaa4:	5ec9      	ldrsh	r1, [r1, r3]
 800aaa6:	0014      	movs	r4, r2
 800aaa8:	b096      	sub	sp, #88	; 0x58
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	da09      	bge.n	800aac2 <__swhatbuf_r+0x26>
 800aaae:	89b2      	ldrh	r2, [r6, #12]
 800aab0:	2380      	movs	r3, #128	; 0x80
 800aab2:	0011      	movs	r1, r2
 800aab4:	4019      	ands	r1, r3
 800aab6:	421a      	tst	r2, r3
 800aab8:	d018      	beq.n	800aaec <__swhatbuf_r+0x50>
 800aaba:	2100      	movs	r1, #0
 800aabc:	3b40      	subs	r3, #64	; 0x40
 800aabe:	0008      	movs	r0, r1
 800aac0:	e010      	b.n	800aae4 <__swhatbuf_r+0x48>
 800aac2:	466a      	mov	r2, sp
 800aac4:	f000 f8de 	bl	800ac84 <_fstat_r>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	dbf0      	blt.n	800aaae <__swhatbuf_r+0x12>
 800aacc:	23f0      	movs	r3, #240	; 0xf0
 800aace:	9901      	ldr	r1, [sp, #4]
 800aad0:	021b      	lsls	r3, r3, #8
 800aad2:	4019      	ands	r1, r3
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <__swhatbuf_r+0x58>)
 800aad6:	2080      	movs	r0, #128	; 0x80
 800aad8:	18c9      	adds	r1, r1, r3
 800aada:	424b      	negs	r3, r1
 800aadc:	4159      	adcs	r1, r3
 800aade:	2380      	movs	r3, #128	; 0x80
 800aae0:	0100      	lsls	r0, r0, #4
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	6029      	str	r1, [r5, #0]
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	b016      	add	sp, #88	; 0x58
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	2380      	movs	r3, #128	; 0x80
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	e7e5      	b.n	800aabe <__swhatbuf_r+0x22>
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	ffffe000 	.word	0xffffe000

0800aaf8 <__smakebuf_r>:
 800aaf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aafa:	2602      	movs	r6, #2
 800aafc:	898b      	ldrh	r3, [r1, #12]
 800aafe:	0005      	movs	r5, r0
 800ab00:	000c      	movs	r4, r1
 800ab02:	4233      	tst	r3, r6
 800ab04:	d006      	beq.n	800ab14 <__smakebuf_r+0x1c>
 800ab06:	0023      	movs	r3, r4
 800ab08:	3343      	adds	r3, #67	; 0x43
 800ab0a:	6023      	str	r3, [r4, #0]
 800ab0c:	6123      	str	r3, [r4, #16]
 800ab0e:	2301      	movs	r3, #1
 800ab10:	6163      	str	r3, [r4, #20]
 800ab12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ab14:	466a      	mov	r2, sp
 800ab16:	ab01      	add	r3, sp, #4
 800ab18:	f7ff ffc0 	bl	800aa9c <__swhatbuf_r>
 800ab1c:	9900      	ldr	r1, [sp, #0]
 800ab1e:	0007      	movs	r7, r0
 800ab20:	0028      	movs	r0, r5
 800ab22:	f7fb f9b5 	bl	8005e90 <_malloc_r>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d108      	bne.n	800ab3c <__smakebuf_r+0x44>
 800ab2a:	220c      	movs	r2, #12
 800ab2c:	5ea3      	ldrsh	r3, [r4, r2]
 800ab2e:	059a      	lsls	r2, r3, #22
 800ab30:	d4ef      	bmi.n	800ab12 <__smakebuf_r+0x1a>
 800ab32:	2203      	movs	r2, #3
 800ab34:	4393      	bics	r3, r2
 800ab36:	431e      	orrs	r6, r3
 800ab38:	81a6      	strh	r6, [r4, #12]
 800ab3a:	e7e4      	b.n	800ab06 <__smakebuf_r+0xe>
 800ab3c:	2380      	movs	r3, #128	; 0x80
 800ab3e:	89a2      	ldrh	r2, [r4, #12]
 800ab40:	6020      	str	r0, [r4, #0]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	9b00      	ldr	r3, [sp, #0]
 800ab48:	6120      	str	r0, [r4, #16]
 800ab4a:	6163      	str	r3, [r4, #20]
 800ab4c:	9b01      	ldr	r3, [sp, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00c      	beq.n	800ab6c <__smakebuf_r+0x74>
 800ab52:	0028      	movs	r0, r5
 800ab54:	230e      	movs	r3, #14
 800ab56:	5ee1      	ldrsh	r1, [r4, r3]
 800ab58:	f000 f8a6 	bl	800aca8 <_isatty_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d005      	beq.n	800ab6c <__smakebuf_r+0x74>
 800ab60:	2303      	movs	r3, #3
 800ab62:	89a2      	ldrh	r2, [r4, #12]
 800ab64:	439a      	bics	r2, r3
 800ab66:	3b02      	subs	r3, #2
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	433b      	orrs	r3, r7
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	e7ce      	b.n	800ab12 <__smakebuf_r+0x1a>

0800ab74 <__swbuf_r>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	0006      	movs	r6, r0
 800ab78:	000d      	movs	r5, r1
 800ab7a:	0014      	movs	r4, r2
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d004      	beq.n	800ab8a <__swbuf_r+0x16>
 800ab80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <__swbuf_r+0x16>
 800ab86:	f7fb fcc9 	bl	800651c <__sinit>
 800ab8a:	69a3      	ldr	r3, [r4, #24]
 800ab8c:	60a3      	str	r3, [r4, #8]
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	071b      	lsls	r3, r3, #28
 800ab92:	d52e      	bpl.n	800abf2 <__swbuf_r+0x7e>
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d02b      	beq.n	800abf2 <__swbuf_r+0x7e>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	5ee2      	ldrsh	r2, [r4, r3]
 800ab9e:	2380      	movs	r3, #128	; 0x80
 800aba0:	019b      	lsls	r3, r3, #6
 800aba2:	b2ef      	uxtb	r7, r5
 800aba4:	b2ed      	uxtb	r5, r5
 800aba6:	421a      	tst	r2, r3
 800aba8:	d02c      	beq.n	800ac04 <__swbuf_r+0x90>
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	1ac0      	subs	r0, r0, r3
 800abb0:	6963      	ldr	r3, [r4, #20]
 800abb2:	4283      	cmp	r3, r0
 800abb4:	dc05      	bgt.n	800abc2 <__swbuf_r+0x4e>
 800abb6:	0021      	movs	r1, r4
 800abb8:	0030      	movs	r0, r6
 800abba:	f7fd fde7 	bl	800878c <_fflush_r>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d11d      	bne.n	800abfe <__swbuf_r+0x8a>
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	3001      	adds	r0, #1
 800abc6:	3b01      	subs	r3, #1
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	701f      	strb	r7, [r3, #0]
 800abd2:	6963      	ldr	r3, [r4, #20]
 800abd4:	4283      	cmp	r3, r0
 800abd6:	d004      	beq.n	800abe2 <__swbuf_r+0x6e>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	07db      	lsls	r3, r3, #31
 800abdc:	d507      	bpl.n	800abee <__swbuf_r+0x7a>
 800abde:	2d0a      	cmp	r5, #10
 800abe0:	d105      	bne.n	800abee <__swbuf_r+0x7a>
 800abe2:	0021      	movs	r1, r4
 800abe4:	0030      	movs	r0, r6
 800abe6:	f7fd fdd1 	bl	800878c <_fflush_r>
 800abea:	2800      	cmp	r0, #0
 800abec:	d107      	bne.n	800abfe <__swbuf_r+0x8a>
 800abee:	0028      	movs	r0, r5
 800abf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf2:	0021      	movs	r1, r4
 800abf4:	0030      	movs	r0, r6
 800abf6:	f7ff fe53 	bl	800a8a0 <__swsetup_r>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0cd      	beq.n	800ab9a <__swbuf_r+0x26>
 800abfe:	2501      	movs	r5, #1
 800ac00:	426d      	negs	r5, r5
 800ac02:	e7f4      	b.n	800abee <__swbuf_r+0x7a>
 800ac04:	4313      	orrs	r3, r2
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	4a02      	ldr	r2, [pc, #8]	; (800ac14 <__swbuf_r+0xa0>)
 800ac0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	6663      	str	r3, [r4, #100]	; 0x64
 800ac10:	e7cb      	b.n	800abaa <__swbuf_r+0x36>
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	ffffdfff 	.word	0xffffdfff

0800ac18 <_raise_r>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	0004      	movs	r4, r0
 800ac1c:	000d      	movs	r5, r1
 800ac1e:	291f      	cmp	r1, #31
 800ac20:	d904      	bls.n	800ac2c <_raise_r+0x14>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	2001      	movs	r0, #1
 800ac28:	4240      	negs	r0, r0
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	0003      	movs	r3, r0
 800ac2e:	33fc      	adds	r3, #252	; 0xfc
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d004      	beq.n	800ac40 <_raise_r+0x28>
 800ac36:	008a      	lsls	r2, r1, #2
 800ac38:	189b      	adds	r3, r3, r2
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d108      	bne.n	800ac52 <_raise_r+0x3a>
 800ac40:	0020      	movs	r0, r4
 800ac42:	f000 f855 	bl	800acf0 <_getpid_r>
 800ac46:	002a      	movs	r2, r5
 800ac48:	0001      	movs	r1, r0
 800ac4a:	0020      	movs	r0, r4
 800ac4c:	f000 f83e 	bl	800accc <_kill_r>
 800ac50:	e7eb      	b.n	800ac2a <_raise_r+0x12>
 800ac52:	2000      	movs	r0, #0
 800ac54:	2a01      	cmp	r2, #1
 800ac56:	d0e8      	beq.n	800ac2a <_raise_r+0x12>
 800ac58:	1c51      	adds	r1, r2, #1
 800ac5a:	d103      	bne.n	800ac64 <_raise_r+0x4c>
 800ac5c:	2316      	movs	r3, #22
 800ac5e:	3001      	adds	r0, #1
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	e7e2      	b.n	800ac2a <_raise_r+0x12>
 800ac64:	2400      	movs	r4, #0
 800ac66:	0028      	movs	r0, r5
 800ac68:	601c      	str	r4, [r3, #0]
 800ac6a:	4790      	blx	r2
 800ac6c:	0020      	movs	r0, r4
 800ac6e:	e7dc      	b.n	800ac2a <_raise_r+0x12>

0800ac70 <raise>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	4b03      	ldr	r3, [pc, #12]	; (800ac80 <raise+0x10>)
 800ac74:	0001      	movs	r1, r0
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	f7ff ffce 	bl	800ac18 <_raise_r>
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	200006e8 	.word	0x200006e8

0800ac84 <_fstat_r>:
 800ac84:	2300      	movs	r3, #0
 800ac86:	b570      	push	{r4, r5, r6, lr}
 800ac88:	4d06      	ldr	r5, [pc, #24]	; (800aca4 <_fstat_r+0x20>)
 800ac8a:	0004      	movs	r4, r0
 800ac8c:	0008      	movs	r0, r1
 800ac8e:	0011      	movs	r1, r2
 800ac90:	602b      	str	r3, [r5, #0]
 800ac92:	f7f8 f888 	bl	8002da6 <_fstat>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d103      	bne.n	800aca2 <_fstat_r+0x1e>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d000      	beq.n	800aca2 <_fstat_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	20000bf4 	.word	0x20000bf4

0800aca8 <_isatty_r>:
 800aca8:	2300      	movs	r3, #0
 800acaa:	b570      	push	{r4, r5, r6, lr}
 800acac:	4d06      	ldr	r5, [pc, #24]	; (800acc8 <_isatty_r+0x20>)
 800acae:	0004      	movs	r4, r0
 800acb0:	0008      	movs	r0, r1
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	f7f8 f885 	bl	8002dc2 <_isatty>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d103      	bne.n	800acc4 <_isatty_r+0x1c>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d000      	beq.n	800acc4 <_isatty_r+0x1c>
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	20000bf4 	.word	0x20000bf4

0800accc <_kill_r>:
 800accc:	2300      	movs	r3, #0
 800acce:	b570      	push	{r4, r5, r6, lr}
 800acd0:	4d06      	ldr	r5, [pc, #24]	; (800acec <_kill_r+0x20>)
 800acd2:	0004      	movs	r4, r0
 800acd4:	0008      	movs	r0, r1
 800acd6:	0011      	movs	r1, r2
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	f7f8 f805 	bl	8002ce8 <_kill>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d103      	bne.n	800acea <_kill_r+0x1e>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d000      	beq.n	800acea <_kill_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	20000bf4 	.word	0x20000bf4

0800acf0 <_getpid_r>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	f7f7 fff3 	bl	8002cdc <_getpid>
 800acf6:	bd10      	pop	{r4, pc}

0800acf8 <_init>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	46c0      	nop			; (mov r8, r8)
 800acfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfe:	bc08      	pop	{r3}
 800ad00:	469e      	mov	lr, r3
 800ad02:	4770      	bx	lr

0800ad04 <_fini>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0a:	bc08      	pop	{r3}
 800ad0c:	469e      	mov	lr, r3
 800ad0e:	4770      	bx	lr
