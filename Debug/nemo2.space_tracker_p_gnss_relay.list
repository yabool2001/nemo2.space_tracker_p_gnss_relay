
nemo2.space_tracker_p_gnss_relay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045ec  080045ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045f4  080045f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080045fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000068  08004664  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08004664  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a77  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002242  00000000  00000000  00030b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b94  00000000  00000000  00033c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6ce  00000000  00000000  000347dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d37  00000000  00000000  00050eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb7a0  00000000  00000000  00062be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a50  00000000  00000000  0011e384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00121dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004488 	.word	0x08004488

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08004488 	.word	0x08004488

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc19 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f881 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f987 	bl	8000960 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f903 	bl	800085c <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8000656:	f000 f94f 	bl	80008f8 <MX_USART5_UART_Init>
  MX_TIM6_Init();
 800065a:	f000 f8c1 	bl	80007e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay ( 5000 ) ;
 800065e:	4b33      	ldr	r3, [pc, #204]	; (800072c <main+0xec>)
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fc91 	bl	8000f88 <HAL_Delay>
  my_tim_init () ;
 8000666:	f000 fa53 	bl	8000b10 <my_tim_init>
  HAL_UART_Transmit ( &huart2 , hello , strlen ( hello ) , UART2_TX_TIMEOUT ) ;
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <main+0xf0>)
 800066c:	681c      	ldr	r4, [r3, #0]
 800066e:	4b30      	ldr	r3, [pc, #192]	; (8000730 <main+0xf0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff fd46 	bl	8000104 <strlen>
 8000678:	0003      	movs	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	23fa      	movs	r3, #250	; 0xfa
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	482c      	ldr	r0, [pc, #176]	; (8000734 <main+0xf4>)
 8000682:	0021      	movs	r1, r4
 8000684:	f002 fa2c 	bl	8002ae0 <HAL_UART_Transmit>
//  HAL_UART_Transmit ( &huart5 , res , len , UART2_TX_TIMEOUT ) ;
//  HAL_UART_Transmit ( &huart5 , save_nvram , strlen ( save_nvram ) , UART2_TX_TIMEOUT ) ;
//  HAL_UART_Transmit ( &huart5 , &terminal_rx_byte , 1 , UART2_TX_TIMEOUT ) ;


  char cscs = q1_check_xor ( get_nmea_br , strlen ( get_nmea_br ) ) ;
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <main+0xf8>)
 800068a:	681d      	ldr	r5, [r3, #0]
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <main+0xf8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff fd37 	bl	8000104 <strlen>
 8000696:	0003      	movs	r3, r0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	1dfc      	adds	r4, r7, #7
 800069c:	0019      	movs	r1, r3
 800069e:	0028      	movs	r0, r5
 80006a0:	f000 fa04 	bl	8000aac <q1_check_xor>
 80006a4:	0003      	movs	r3, r0
 80006a6:	7023      	strb	r3, [r4, #0]
  sprintf ( res , "$%s*%X\r\n\0" , get_nmea_br , cscs ) ;
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <main+0xf8>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4922      	ldr	r1, [pc, #136]	; (800073c <main+0xfc>)
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <main+0x100>)
 80006b4:	f003 fa42 	bl	8003b3c <siprintf>
  len = strlen ( (char*) res ) ;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <main+0x100>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fd22 	bl	8000104 <strlen>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <main+0x104>)
 80006c6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit ( &huart2 , res , len , UART2_TX_TIMEOUT ) ; // muszę dodać 6
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <main+0x104>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	23fa      	movs	r3, #250	; 0xfa
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	491b      	ldr	r1, [pc, #108]	; (8000740 <main+0x100>)
 80006d4:	4817      	ldr	r0, [pc, #92]	; (8000734 <main+0xf4>)
 80006d6:	f002 fa03 	bl	8002ae0 <HAL_UART_Transmit>
  my_gnss_sw_on() ;
 80006da:	f000 f9cd 	bl	8000a78 <my_gnss_sw_on>
  my_tim_start () ;
 80006de:	f000 fa23 	bl	8000b28 <my_tim_start>
  HAL_Delay ( 1000 ) ;
 80006e2:	23fa      	movs	r3, #250	; 0xfa
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fc4e 	bl	8000f88 <HAL_Delay>
  HAL_UART_Transmit ( &huart5 , res , len , UART2_TX_TIMEOUT ) ;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <main+0x104>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4912      	ldr	r1, [pc, #72]	; (8000740 <main+0x100>)
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <main+0x108>)
 80006fa:	f002 f9f1 	bl	8002ae0 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive ( &huart5 , &gnss_rx_byte , 1 , UART5_RX_TIMEOUT ) ;
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4912      	ldr	r1, [pc, #72]	; (800074c <main+0x10c>)
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <main+0x108>)
 8000706:	2201      	movs	r2, #1
 8000708:	f002 fa8e 	bl	8002c28 <HAL_UART_Receive>
	  if ( gnss_rx_byte )
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <main+0x10c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f4      	beq.n	80006fe <main+0xbe>
	  {
		  HAL_UART_Transmit ( &huart2 , &gnss_rx_byte , 1 , UART5_TX_TIMEOUT ) ;
 8000714:	23fa      	movs	r3, #250	; 0xfa
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	490c      	ldr	r1, [pc, #48]	; (800074c <main+0x10c>)
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <main+0xf4>)
 800071c:	2201      	movs	r2, #1
 800071e:	f002 f9df 	bl	8002ae0 <HAL_UART_Transmit>
		  gnss_rx_byte = 0 ;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <main+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive ( &huart5 , &gnss_rx_byte , 1 , UART5_RX_TIMEOUT ) ;
 8000728:	e7e9      	b.n	80006fe <main+0xbe>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	00001388 	.word	0x00001388
 8000730:	20000000 	.word	0x20000000
 8000734:	200000d0 	.word	0x200000d0
 8000738:	20000004 	.word	0x20000004
 800073c:	08004524 	.word	0x08004524
 8000740:	200001f8 	.word	0x200001f8
 8000744:	200002f3 	.word	0x200002f3
 8000748:	20000164 	.word	0x20000164
 800074c:	200002f2 	.word	0x200002f2

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b095      	sub	sp, #84	; 0x54
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	2414      	movs	r4, #20
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0018      	movs	r0, r3
 800075c:	233c      	movs	r3, #60	; 0x3c
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f003 fa0b 	bl	8003b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	0018      	movs	r0, r3
 800076a:	2310      	movs	r3, #16
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f003 fa04 	bl	8003b7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fea7 	bl	80014cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	0052      	lsls	r2, r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fef9 	bl	8001598 <HAL_RCC_OscConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007aa:	f000 f9ef 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2100      	movs	r1, #0
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fa44 	bl	8001c58 <HAL_RCC_ClockConfig>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007d4:	f000 f9da 	bl	8000b8c <Error_Handler>
  }
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b015      	add	sp, #84	; 0x54
 80007de:	bd90      	pop	{r4, r7, pc}

080007e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	0018      	movs	r0, r3
 80007ea:	230c      	movs	r3, #12
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f003 f9c4 	bl	8003b7c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_TIM6_Init+0x6c>)
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_TIM6_Init+0x70>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_TIM6_Init+0x6c>)
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_TIM6_Init+0x74>)
 80007fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_TIM6_Init+0x6c>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_TIM6_Init+0x6c>)
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_TIM6_Init+0x78>)
 800080a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_TIM6_Init+0x6c>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_TIM6_Init+0x6c>)
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fe05 	bl	8002424 <HAL_TIM_Base_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800081e:	f000 f9b5 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_TIM6_Init+0x6c>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f002 f86f 	bl	8002918 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800083e:	f000 f9a5 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000084 	.word	0x20000084
 8000850:	40001000 	.word	0x40001000
 8000854:	00003e7f 	.word	0x00003e7f
 8000858:	000003e7 	.word	0x000003e7

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000862:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <MX_USART2_UART_Init+0x98>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000868:	22e1      	movs	r2, #225	; 0xe1
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 f8c4 	bl	8002a34 <HAL_UART_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f96c 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	0018      	movs	r0, r3
 80008ba:	f003 f85f 	bl	800397c <HAL_UARTEx_SetTxFifoThreshold>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f963 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f003 f896 	bl	80039fc <HAL_UARTEx_SetRxFifoThreshold>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f95a 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_USART2_UART_Init+0x94>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f003 f814 	bl	8003908 <HAL_UARTEx_DisableFifoMode>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f952 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000d0 	.word	0x200000d0
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_USART5_UART_Init+0x60>)
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_USART5_UART_Init+0x64>)
 8000900:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000904:	2296      	movs	r2, #150	; 0x96
 8000906:	0192      	lsls	r2, r2, #6
 8000908:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART5_UART_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART5_UART_Init+0x60>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART5_UART_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_USART5_UART_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <MX_USART5_UART_Init+0x60>)
 8000942:	0018      	movs	r0, r3
 8000944:	f002 f876 	bl	8002a34 <HAL_UART_Init>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 f91e 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20000164 	.word	0x20000164
 800095c:	40005000 	.word	0x40005000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	240c      	movs	r4, #12
 8000968:	193b      	adds	r3, r7, r4
 800096a:	0018      	movs	r0, r3
 800096c:	2314      	movs	r3, #20
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f003 f903 	bl	8003b7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_GPIO_Init+0xac>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_GPIO_Init+0xac>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xac>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_GPIO_Init+0xac>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_GPIO_Init+0xac>)
 8000994:	2102      	movs	r1, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_GPIO_Init+0xac>)
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_SW_CTL1_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 80009a6:	23ac      	movs	r3, #172	; 0xac
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	4819      	ldr	r0, [pc, #100]	; (8000a10 <MX_GPIO_Init+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	0019      	movs	r1, r3
 80009b0:	f000 fd6e 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_SW_CTL1_Pin RF_SW_CTL2_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = RF_SW_CTL1_Pin|RF_SW_CTL2_Pin|GNSS_PWR_SW_Pin;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	228c      	movs	r2, #140	; 0x8c
 80009b8:	0212      	lsls	r2, r2, #8
 80009ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2201      	movs	r2, #1
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <MX_GPIO_Init+0xb0>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f000 fbef 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	0192      	lsls	r2, r2, #6
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2211      	movs	r2, #17
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <MX_GPIO_Init+0xb0>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	0010      	movs	r0, r2
 80009fe:	f000 fbdb 	bl	80011b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b009      	add	sp, #36	; 0x24
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	50000400 	.word	0x50000400

08000a14 <my_ant_sw_pos>:

/* USER CODE BEGIN 4 */

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d10e      	bne.n	8000a46 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <my_ant_sw_pos+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0019      	movs	r1, r3
 8000a32:	f000 fd2d 	bl	8001490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <my_ant_sw_pos+0x60>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	0019      	movs	r1, r3
 8000a40:	f000 fd26 	bl	8001490 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8000a44:	e011      	b.n	8000a6a <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d10d      	bne.n	8000a6a <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4808      	ldr	r0, [pc, #32]	; (8000a74 <my_ant_sw_pos+0x60>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	0019      	movs	r1, r3
 8000a58:	f000 fd1a 	bl	8001490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <my_ant_sw_pos+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	0019      	movs	r1, r3
 8000a66:	f000 fd13 	bl	8001490 <HAL_GPIO_WritePin>
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	50000400 	.word	0x50000400

08000a78 <my_gnss_sw_on>:

// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ffc9 	bl	8000a14 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <my_gnss_sw_on+0x30>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	f000 fd00 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	019b      	lsls	r3, r3, #6
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <my_gnss_sw_on+0x30>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f000 fcf9 	bl	8001490 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8000a9e:	f7ff ff2b 	bl	80008f8 <MX_USART5_UART_Init>
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	50000400 	.word	0x50000400

08000aac <q1_check_xor>:
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( &huart5 ) ;

}
unsigned char q1_check_xor ( const uint8_t *m , uint8_t l )
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	000a      	movs	r2, r1
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	701a      	strb	r2, [r3, #0]
	unsigned char result = 0 ;
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0 ;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]

	if ( ( NULL == m ) || ( l < 1 ) )
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <q1_check_xor+0x28>
 8000acc:	1cfb      	adds	r3, r7, #3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <q1_check_xor+0x2c>
	{
		return 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e017      	b.n	8000b08 <q1_check_xor+0x5c>
	}
	for ( i = 0 ; i < l ; i++ )
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	e00c      	b.n	8000af8 <q1_check_xor+0x4c>
	{
		result ^= *( m + i ) ;
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	18d3      	adds	r3, r2, r3
 8000ae4:	7819      	ldrb	r1, [r3, #0]
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	18bb      	adds	r3, r7, r2
 8000aea:	18ba      	adds	r2, r7, r2
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	404a      	eors	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < l ; i++ )
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	1cfb      	adds	r3, r7, #3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3ed      	bcc.n	8000ade <q1_check_xor+0x32>
	}
	return result ;
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <my_tim_init>:

void my_tim_init (void )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <my_tim_init+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	4252      	negs	r2, r2
 8000b1c:	611a      	str	r2, [r3, #16]
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000084 	.word	0x20000084

08000b28 <my_tim_start>:

void my_tim_start (void )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <my_tim_start+0x18>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <my_tim_start+0x1c>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 fccd 	bl	80024d4 <HAL_TIM_Base_Start_IT>
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200002f4 	.word	0x200002f4
 8000b44:	20000084 	.word	0x20000084

08000b48 <HAL_TIM_PeriodElapsedCallback>:
{
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10d      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b64:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > tim_seconds_ths_sys_shutdown )
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b68:	881a      	ldrh	r2, [r3, #0]
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d901      	bls.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  //HAL_NVIC_SystemReset () ;
			  HAL_PWREx_EnterSHUTDOWNMode () ;
 8000b72:	f000 fceb 	bl	800154c <HAL_PWREx_EnterSHUTDOWNMode>
		  }
	}
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40001000 	.word	0x40001000
 8000b84:	200002f4 	.word	0x200002f4
 8000b88:	20000008 	.word	0x20000008

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0549      	lsls	r1, r1, #21
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f9fa 	bl	8000fd0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_TIM_Base_MspInit+0x44>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d113      	bne.n	8000c22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_TIM_Base_MspInit+0x48>)
 8000bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_TIM_Base_MspInit+0x48>)
 8000c00:	2110      	movs	r1, #16
 8000c02:	430a      	orrs	r2, r1
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2103      	movs	r1, #3
 8000c16:	2011      	movs	r0, #17
 8000c18:	f000 fa9c 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f000 faae 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40001000 	.word	0x40001000
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b09f      	sub	sp, #124	; 0x7c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f002 ff98 	bl	8003b7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	2418      	movs	r4, #24
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	234c      	movs	r3, #76	; 0x4c
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 ff90 	bl	8003b7c <memset>
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d13f      	bne.n	8000ce6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2202      	movs	r2, #2
 8000c6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f999 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c7e:	f7ff ff85 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0289      	lsls	r1, r1, #10
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb6:	2164      	movs	r1, #100	; 0x64
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	187a      	adds	r2, r7, r1
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	0011      	movs	r1, r2
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fa6a 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000ce4:	e034      	b.n	8000d50 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART5)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_UART_MspInit+0x12c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d12f      	bne.n	8000d50 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0049      	lsls	r1, r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000d12:	2102      	movs	r1, #2
 8000d14:	430a      	orrs	r2, r1
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d24:	2164      	movs	r1, #100	; 0x64
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2218      	movs	r2, #24
 8000d2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2202      	movs	r2, #2
 8000d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2203      	movs	r2, #3
 8000d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_UART_MspInit+0x130>)
 8000d48:	0019      	movs	r1, r3
 8000d4a:	0010      	movs	r0, r2
 8000d4c:	f000 fa34 	bl	80011b8 <HAL_GPIO_Init>
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b01f      	add	sp, #124	; 0x7c
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40005000 	.word	0x40005000
 8000d64:	50000400 	.word	0x50000400

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8e0 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 fbfa 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	20000084 	.word	0x20000084

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	18d3      	adds	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 fed4 	bl	8003b8c <__errno>
 8000de4:	0003      	movs	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	425b      	negs	r3, r3
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	18d2      	adds	r2, r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b006      	add	sp, #24
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20024000 	.word	0x20024000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200002f8 	.word	0x200002f8
 8000e18:	20000448 	.word	0x20000448

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff fff6 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f002 fe9f 	bl	8003b98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e5a:	f7ff fbf1 	bl	8000640 <main>

08000e5e <LoopForever>:

LoopForever:
  b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e6c:	080045fc 	.word	0x080045fc
  ldr r2, =_sbss
 8000e70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e74:	20000448 	.word	0x20000448

08000e78 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_COMP_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	0049      	lsls	r1, r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f810 	bl	8000ebc <HAL_InitTick>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe76 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_InitTick+0x88>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d02b      	beq.n	8000f2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_InitTick+0x8c>)
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_InitTick+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	0019      	movs	r1, r3
 8000ede:	23fa      	movs	r3, #250	; 0xfa
 8000ee0:	0098      	lsls	r0, r3, #2
 8000ee2:	f7ff f921 	bl	8000128 <__udivsi3>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	0020      	movs	r0, r4
 8000eec:	f7ff f91c 	bl	8000128 <__udivsi3>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f953 	bl	800119e <HAL_SYSTICK_Config>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d112      	bne.n	8000f22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d80a      	bhi.n	8000f18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2301      	movs	r3, #1
 8000f06:	425b      	negs	r3, r3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 f922 	bl	8001154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_InitTick+0x90>)
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00d      	b.n	8000f34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e008      	b.n	8000f34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f22:	230f      	movs	r3, #15
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e003      	b.n	8000f34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b005      	add	sp, #20
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	20000014 	.word	0x20000014
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000010 	.word	0x20000010

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	18d2      	adds	r2, r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_IncTick+0x20>)
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000014 	.word	0x20000014
 8000f70:	200002fc 	.word	0x200002fc

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <HAL_GetTick+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	200002fc 	.word	0x200002fc

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fff0 	bl	8000f74 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	f7ff ffe0 	bl	8000f74 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	20000014 	.word	0x20000014

08000fd0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	fffff9ff 	.word	0xfffff9ff

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	0002      	movs	r2, r0
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b7f      	cmp	r3, #127	; 0x7f
 800100e:	d809      	bhi.n	8001024 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	231f      	movs	r3, #31
 8001018:	401a      	ands	r2, r3
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_EnableIRQ+0x30>)
 800101c:	2101      	movs	r1, #1
 800101e:	4091      	lsls	r1, r2
 8001020:	000a      	movs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	0002      	movs	r2, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b7f      	cmp	r3, #127	; 0x7f
 8001044:	d828      	bhi.n	8001098 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <__NVIC_SetPriority+0xd4>)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	33c0      	adds	r3, #192	; 0xc0
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	589b      	ldr	r3, [r3, r2]
 8001056:	1dfa      	adds	r2, r7, #7
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	0011      	movs	r1, r2
 800105c:	2203      	movs	r2, #3
 800105e:	400a      	ands	r2, r1
 8001060:	00d2      	lsls	r2, r2, #3
 8001062:	21ff      	movs	r1, #255	; 0xff
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	43d2      	mvns	r2, r2
 800106a:	401a      	ands	r2, r3
 800106c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	401a      	ands	r2, r3
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0018      	movs	r0, r3
 800107c:	2303      	movs	r3, #3
 800107e:	4003      	ands	r3, r0
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <__NVIC_SetPriority+0xd4>)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	430a      	orrs	r2, r1
 8001090:	33c0      	adds	r3, #192	; 0xc0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001096:	e031      	b.n	80010fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	0019      	movs	r1, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	400b      	ands	r3, r1
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3306      	adds	r3, #6
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	18d3      	adds	r3, r2, r3
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1dfa      	adds	r2, r7, #7
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	0011      	movs	r1, r2
 80010b8:	2203      	movs	r2, #3
 80010ba:	400a      	ands	r2, r1
 80010bc:	00d2      	lsls	r2, r2, #3
 80010be:	21ff      	movs	r1, #255	; 0xff
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	401a      	ands	r2, r3
 80010c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	401a      	ands	r2, r3
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0018      	movs	r0, r3
 80010d8:	2303      	movs	r3, #3
 80010da:	4003      	ands	r3, r0
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	001c      	movs	r4, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	4023      	ands	r3, r4
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	430a      	orrs	r2, r1
 80010f2:	3306      	adds	r3, #6
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	18c3      	adds	r3, r0, r3
 80010f8:	3304      	adds	r3, #4
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	045b      	lsls	r3, r3, #17
 800111c:	429a      	cmp	r2, r3
 800111e:	d301      	bcc.n	8001124 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001120:	2301      	movs	r3, #1
 8001122:	e010      	b.n	8001146 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SysTick_Config+0x44>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	3a01      	subs	r2, #1
 800112a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2103      	movs	r1, #3
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff ff7c 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x44>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x44>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	210f      	movs	r1, #15
 8001160:	187b      	adds	r3, r7, r1
 8001162:	1c02      	adds	r2, r0, #0
 8001164:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	187b      	adds	r3, r7, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25b      	sxtb	r3, r3
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	0002      	movs	r2, r0
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff33 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ffaf 	bl	800110c <SysTick_Config>
 80011ae:	0003      	movs	r3, r0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e14d      	b.n	8001464 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4091      	lsls	r1, r2
 80011d2:	000a      	movs	r2, r1
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <HAL_GPIO_Init+0x28>
 80011de:	e13e      	b.n	800145e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <HAL_GPIO_Init+0x40>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d130      	bne.n	800125a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	43da      	mvns	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	2201      	movs	r2, #1
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	2b03      	cmp	r3, #3
 8001264:	d017      	beq.n	8001296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2207      	movs	r2, #7
 80012b4:	4013      	ands	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2107      	movs	r1, #7
 80012ce:	400b      	ands	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	6939      	ldr	r1, [r7, #16]
 80012e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	401a      	ands	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_GPIO_Init+0x174>
 800132a:	e098      	b.n	800145e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800132c:	4a53      	ldr	r2, [pc, #332]	; (800147c <HAL_GPIO_Init+0x2c4>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3318      	adds	r3, #24
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	589b      	ldr	r3, [r3, r2]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2203      	movs	r2, #3
 800133e:	4013      	ands	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	220f      	movs	r2, #15
 8001344:	409a      	lsls	r2, r3
 8001346:	0013      	movs	r3, r2
 8001348:	43da      	mvns	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	429a      	cmp	r2, r3
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x1d6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2c8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1d2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_GPIO_Init+0x2cc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1ce>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1ca>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <HAL_GPIO_Init+0x2d4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1c6>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x1d8>
 800137e:	2305      	movs	r3, #5
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x1d8>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x1d8>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x1d8>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x1d8>
 800138e:	2300      	movs	r3, #0
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	2103      	movs	r1, #3
 8001394:	400a      	ands	r2, r1
 8001396:	00d2      	lsls	r2, r2, #3
 8001398:	4093      	lsls	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013a0:	4936      	ldr	r1, [pc, #216]	; (800147c <HAL_GPIO_Init+0x2c4>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3318      	adds	r3, #24
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_GPIO_Init+0x2c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	035b      	lsls	r3, r3, #13
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_GPIO_Init+0x2c4>)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_GPIO_Init+0x2c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	039b      	lsls	r3, r3, #14
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_GPIO_Init+0x2c4>)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_GPIO_Init+0x2c4>)
 8001404:	2384      	movs	r3, #132	; 0x84
 8001406:	58d3      	ldr	r3, [r2, r3]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001428:	4914      	ldr	r1, [pc, #80]	; (800147c <HAL_GPIO_Init+0x2c4>)
 800142a:	2284      	movs	r2, #132	; 0x84
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_GPIO_Init+0x2c4>)
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001456:	4909      	ldr	r1, [pc, #36]	; (800147c <HAL_GPIO_Init+0x2c4>)
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	40da      	lsrs	r2, r3
 800146c:	1e13      	subs	r3, r2, #0
 800146e:	d000      	beq.n	8001472 <HAL_GPIO_Init+0x2ba>
 8001470:	e6aa      	b.n	80011c8 <HAL_GPIO_Init+0x10>
  }
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b006      	add	sp, #24
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021800 	.word	0x40021800
 8001480:	50000400 	.word	0x50000400
 8001484:	50000800 	.word	0x50000800
 8001488:	50000c00 	.word	0x50000c00
 800148c:	50001000 	.word	0x50001000

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	0008      	movs	r0, r1
 800149a:	0011      	movs	r1, r2
 800149c:	1cbb      	adds	r3, r7, #2
 800149e:	1c02      	adds	r2, r0, #0
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	1c7b      	adds	r3, r7, #1
 80014a4:	1c0a      	adds	r2, r1, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	1c7b      	adds	r3, r7, #1
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b0:	1cbb      	adds	r3, r7, #2
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	1cbb      	adds	r3, r7, #2
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d11f      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	0013      	movs	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	189b      	adds	r3, r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4912      	ldr	r1, [pc, #72]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f7fe fe12 	bl	8000128 <__udivsi3>
 8001504:	0003      	movs	r3, r0
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150a:	e008      	b.n	800151e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3b01      	subs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e001      	b.n	800151e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e009      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	401a      	ands	r2, r3
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	429a      	cmp	r2, r3
 800152e:	d0ed      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40007000 	.word	0x40007000
 8001540:	fffff9ff 	.word	0xfffff9ff
 8001544:	2000000c 	.word	0x2000000c
 8001548:	000f4240 	.word	0x000f4240

0800154c <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2207      	movs	r2, #7
 8001556:	4393      	bics	r3, r2
 8001558:	001a      	movs	r2, r3
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800155c:	2104      	movs	r1, #4
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001568:	2104      	movs	r1, #4
 800156a:	430a      	orrs	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 800156e:	bf30      	wfi
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40007000 	.word	0x40007000
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	23e0      	movs	r3, #224	; 0xe0
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	4013      	ands	r3, r2
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 fb50 	bl	8001c4c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d100      	bne.n	80015b8 <HAL_RCC_OscConfig+0x20>
 80015b6:	e07c      	b.n	80016b2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4bc3      	ldr	r3, [pc, #780]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2238      	movs	r2, #56	; 0x38
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	4bc1      	ldr	r3, [pc, #772]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2203      	movs	r2, #3
 80015c8:	4013      	ands	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x40>
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d002      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4bba      	ldr	r3, [pc, #744]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d062      	beq.n	80016b0 <HAL_RCC_OscConfig+0x118>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d15e      	bne.n	80016b0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e32a      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	429a      	cmp	r2, r3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_OscConfig+0x7a>
 8001602:	4bb1      	ldr	r3, [pc, #708]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4bb0      	ldr	r3, [pc, #704]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0249      	lsls	r1, r1, #9
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e020      	b.n	8001654 <HAL_RCC_OscConfig+0xbc>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	02db      	lsls	r3, r3, #11
 800161a:	429a      	cmp	r2, r3
 800161c:	d10e      	bne.n	800163c <HAL_RCC_OscConfig+0xa4>
 800161e:	4baa      	ldr	r3, [pc, #680]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4ba9      	ldr	r3, [pc, #676]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	02c9      	lsls	r1, r1, #11
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	4ba6      	ldr	r3, [pc, #664]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4ba5      	ldr	r3, [pc, #660]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	0249      	lsls	r1, r1, #9
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163c:	4ba2      	ldr	r3, [pc, #648]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001642:	49a2      	ldr	r1, [pc, #648]	; (80018cc <HAL_RCC_OscConfig+0x334>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	4b9f      	ldr	r3, [pc, #636]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800164e:	49a0      	ldr	r1, [pc, #640]	; (80018d0 <HAL_RCC_OscConfig+0x338>)
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d014      	beq.n	8001686 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc8a 	bl	8000f74 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001666:	f7ff fc85 	bl	8000f74 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e2e9      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001678:	4b93      	ldr	r3, [pc, #588]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0xce>
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fc75 	bl	8000f74 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fc70 	bl	8000f74 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e2d4      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xf8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2202      	movs	r2, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x126>
 80016bc:	e099      	b.n	80017f2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2238      	movs	r2, #56	; 0x38
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	4b7f      	ldr	r3, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x146>
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d135      	bne.n	8001750 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4013      	ands	r3, r2
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x164>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e2a7      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a74      	ldr	r2, [pc, #464]	; (80018d4 <HAL_RCC_OscConfig+0x33c>)
 8001702:	4013      	ands	r3, r2
 8001704:	0019      	movs	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	021a      	lsls	r2, r3, #8
 800170c:	4b6e      	ldr	r3, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6e      	ldr	r2, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x340>)
 800171e:	4013      	ands	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800172c:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0adb      	lsrs	r3, r3, #11
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x344>)
 8001738:	40da      	lsrs	r2, r3
 800173a:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x348>)
 800173c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800173e:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <HAL_RCC_OscConfig+0x34c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff fbba 	bl	8000ebc <HAL_InitTick>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d051      	beq.n	80017f0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e27d      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d030      	beq.n	80017ba <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5e      	ldr	r2, [pc, #376]	; (80018d8 <HAL_RCC_OscConfig+0x340>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0049      	lsls	r1, r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fbfb 	bl	8000f74 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fbf6 	bl	8000f74 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e25a      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4013      	ands	r3, r2
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_RCC_OscConfig+0x33c>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	0019      	movs	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	021a      	lsls	r2, r3, #8
 80017b2:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80017c0:	4949      	ldr	r1, [pc, #292]	; (80018e8 <HAL_RCC_OscConfig+0x350>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fbd5 	bl	8000f74 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fbd0 	bl	8000f74 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e234      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x238>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2208      	movs	r2, #8
 80017f8:	4013      	ands	r3, r2
 80017fa:	d047      	beq.n	800188c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2238      	movs	r2, #56	; 0x38
 8001802:	4013      	ands	r3, r2
 8001804:	2b18      	cmp	r3, #24
 8001806:	d10a      	bne.n	800181e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d03c      	beq.n	800188c <HAL_RCC_OscConfig+0x2f4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d138      	bne.n	800188c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e216      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001828:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fb9f 	bl	8000f74 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fb9a 	bl	8000f74 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1fe      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0f1      	beq.n	800183c <HAL_RCC_OscConfig+0x2a4>
 8001858:	e018      	b.n	800188c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 800185c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001860:	2101      	movs	r1, #1
 8001862:	438a      	bics	r2, r1
 8001864:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fb85 	bl	8000f74 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fb80 	bl	8000f74 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1e4      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d1f1      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2204      	movs	r2, #4
 8001892:	4013      	ands	r3, r2
 8001894:	d100      	bne.n	8001898 <HAL_RCC_OscConfig+0x300>
 8001896:	e0c7      	b.n	8001a28 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001898:	231f      	movs	r3, #31
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2238      	movs	r2, #56	; 0x38
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d11f      	bne.n	80018ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_RCC_OscConfig+0x330>)
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d100      	bne.n	80018b8 <HAL_RCC_OscConfig+0x320>
 80018b6:	e0b7      	b.n	8001a28 <HAL_RCC_OscConfig+0x490>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d000      	beq.n	80018c2 <HAL_RCC_OscConfig+0x32a>
 80018c0:	e0b2      	b.n	8001a28 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e1c2      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	40021000 	.word	0x40021000
 80018cc:	fffeffff 	.word	0xfffeffff
 80018d0:	fffbffff 	.word	0xfffbffff
 80018d4:	ffff80ff 	.word	0xffff80ff
 80018d8:	ffffc7ff 	.word	0xffffc7ff
 80018dc:	00f42400 	.word	0x00f42400
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	20000010 	.word	0x20000010
 80018e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018ec:	4bb5      	ldr	r3, [pc, #724]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 80018ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	055b      	lsls	r3, r3, #21
 80018f4:	4013      	ands	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_OscConfig+0x364>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x366>
 80018fc:	2300      	movs	r3, #0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d011      	beq.n	8001926 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4bb0      	ldr	r3, [pc, #704]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001906:	4baf      	ldr	r3, [pc, #700]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	0549      	lsls	r1, r1, #21
 800190c:	430a      	orrs	r2, r1
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001910:	4bac      	ldr	r3, [pc, #688]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	055b      	lsls	r3, r3, #21
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800191e:	231f      	movs	r3, #31
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	4ba8      	ldr	r3, [pc, #672]	; (8001bc8 <HAL_RCC_OscConfig+0x630>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4013      	ands	r3, r2
 8001930:	d11a      	bne.n	8001968 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001932:	4ba5      	ldr	r3, [pc, #660]	; (8001bc8 <HAL_RCC_OscConfig+0x630>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4ba4      	ldr	r3, [pc, #656]	; (8001bc8 <HAL_RCC_OscConfig+0x630>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0049      	lsls	r1, r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001940:	f7ff fb18 	bl	8000f74 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff fb13 	bl	8000f74 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e177      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195c:	4b9a      	ldr	r3, [pc, #616]	; (8001bc8 <HAL_RCC_OscConfig+0x630>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4013      	ands	r3, r2
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x3e6>
 8001970:	4b94      	ldr	r3, [pc, #592]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001974:	4b93      	ldr	r3, [pc, #588]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x420>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x408>
 8001986:	4b8f      	ldr	r3, [pc, #572]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198a:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 800198c:	2104      	movs	r1, #4
 800198e:	430a      	orrs	r2, r1
 8001990:	65da      	str	r2, [r3, #92]	; 0x5c
 8001992:	4b8c      	ldr	r3, [pc, #560]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x420>
 80019a0:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 80019a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a4:	4b87      	ldr	r3, [pc, #540]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ac:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 80019ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b0:	4b84      	ldr	r3, [pc, #528]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 80019b2:	2104      	movs	r1, #4
 80019b4:	438a      	bics	r2, r1
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d014      	beq.n	80019ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fad8 	bl	8000f74 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff fad3 	bl	8000f74 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4a7d      	ldr	r2, [pc, #500]	; (8001bcc <HAL_RCC_OscConfig+0x634>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e136      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019de:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x432>
 80019e8:	e013      	b.n	8001a12 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff fac3 	bl	8000f74 <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f2:	e009      	b.n	8001a08 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff fabe 	bl	8000f74 <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a73      	ldr	r2, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x634>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e121      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a08:	4b6e      	ldr	r3, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a12:	231f      	movs	r3, #31
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b69      	ldr	r3, [pc, #420]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a22:	496b      	ldr	r1, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x638>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d039      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b61      	ldr	r3, [pc, #388]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	03c9      	lsls	r1, r1, #15
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fa94 	bl	8000f74 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a52:	f7ff fa8f 	bl	8000f74 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0f3      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a64:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4ba>
 8001a70:	e019      	b.n	8001aa6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a78:	4956      	ldr	r1, [pc, #344]	; (8001bd4 <HAL_RCC_OscConfig+0x63c>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fa79 	bl	8000f74 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a88:	f7ff fa74 	bl	8000f74 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0d8      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x518>
 8001aae:	e0cc      	b.n	8001c4a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2238      	movs	r2, #56	; 0x38
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d100      	bne.n	8001abe <HAL_RCC_OscConfig+0x526>
 8001abc:	e07b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d156      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001acc:	4942      	ldr	r1, [pc, #264]	; (8001bd8 <HAL_RCC_OscConfig+0x640>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa4f 	bl	8000f74 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fa4a 	bl	8000f74 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0ae      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	049b      	lsls	r3, r3, #18
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4a37      	ldr	r2, [pc, #220]	; (8001bdc <HAL_RCC_OscConfig+0x644>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	431a      	orrs	r2, r3
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0449      	lsls	r1, r1, #17
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0549      	lsls	r1, r1, #21
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fa13 	bl	8000f74 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fa0e 	bl	8000f74 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e072      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	049b      	lsls	r3, r3, #18
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x5bc>
 8001b72:	e06a      	b.n	8001c4a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b7a:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x640>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f9f8 	bl	8000f74 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff f9f3 	bl	8000f74 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e057      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	049b      	lsls	r3, r3, #18
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_OscConfig+0x62c>)
 8001bae:	490c      	ldr	r1, [pc, #48]	; (8001be0 <HAL_RCC_OscConfig+0x648>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e049      	b.n	8001c4a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d112      	bne.n	8001be4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e044      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	00001388 	.word	0x00001388
 8001bd0:	efffffff 	.word	0xefffffff
 8001bd4:	ffbfffff 	.word	0xffbfffff
 8001bd8:	feffffff 	.word	0xfeffffff
 8001bdc:	11c1808c 	.word	0x11c1808c
 8001be0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x6bc>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2203      	movs	r2, #3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d126      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2270      	movs	r2, #112	; 0x70
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d11f      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	23fe      	movs	r3, #254	; 0xfe
 8001c0a:	01db      	lsls	r3, r3, #7
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d116      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	23f8      	movs	r3, #248	; 0xf8
 8001c1c:	039b      	lsls	r3, r3, #14
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d10e      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	23e0      	movs	r3, #224	; 0xe0
 8001c2c:	051b      	lsls	r3, r3, #20
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0f5b      	lsrs	r3, r3, #29
 8001c3c:	075a      	lsls	r2, r3, #29
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b008      	add	sp, #32
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e9      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2207      	movs	r2, #7
 8001c72:	4013      	ands	r3, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d91e      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2207      	movs	r2, #7
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f972 	bl	8000f74 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c94:	e009      	b.n	8001caa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c96:	f7ff f96d 	bl	8000f74 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_RCC_ClockConfig+0x1f4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0ca      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d015      	beq.n	8001cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d006      	beq.n	8001cda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b5f      	ldr	r3, [pc, #380]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	21e0      	movs	r1, #224	; 0xe0
 8001cd4:	01c9      	lsls	r1, r1, #7
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <HAL_RCC_ClockConfig+0x1fc>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d057      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d12b      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e097      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	049b      	lsls	r3, r3, #18
 8001d20:	4013      	ands	r3, r2
 8001d22:	d11f      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e08b      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d113      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e07f      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d48:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e074      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e06d      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d78:	f7ff f8fc 	bl	8000f74 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff f8f7 	bl	8000f74 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a2f      	ldr	r2, [pc, #188]	; (8001e4c <HAL_RCC_ClockConfig+0x1f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2238      	movs	r2, #56	; 0x38
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1ec      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2207      	movs	r2, #7
 8001dae:	4013      	ands	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d21e      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2207      	movs	r2, #7
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f8d4 	bl	8000f74 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd0:	e009      	b.n	8001de6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7ff f8cf 	bl	8000f74 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_RCC_ClockConfig+0x1f4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e02c      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2207      	movs	r2, #7
 8001dec:	4013      	ands	r3, r2
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1ee      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <HAL_RCC_ClockConfig+0x200>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e12:	f000 f829 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e16:	0001      	movs	r1, r0
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	220f      	movs	r2, #15
 8001e20:	401a      	ands	r2, r3
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCC_ClockConfig+0x204>)
 8001e24:	0092      	lsls	r2, r2, #2
 8001e26:	58d3      	ldr	r3, [r2, r3]
 8001e28:	221f      	movs	r2, #31
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_ClockConfig+0x208>)
 8001e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x20c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff f83f 	bl	8000ebc <HAL_InitTick>
 8001e3e:	0003      	movs	r3, r0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	40021000 	.word	0x40021000
 8001e54:	fffff0ff 	.word	0xfffff0ff
 8001e58:	ffff8fff 	.word	0xffff8fff
 8001e5c:	08004530 	.word	0x08004530
 8001e60:	2000000c 	.word	0x2000000c
 8001e64:	20000010 	.word	0x20000010

08001e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2238      	movs	r2, #56	; 0x38
 8001e74:	4013      	ands	r3, r2
 8001e76:	d10f      	bne.n	8001e98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0adb      	lsrs	r3, r3, #11
 8001e7e:	2207      	movs	r2, #7
 8001e80:	4013      	ands	r3, r2
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	4835      	ldr	r0, [pc, #212]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e8e:	f7fe f94b 	bl	8000128 <__udivsi3>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e05d      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2238      	movs	r2, #56	; 0x38
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d102      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e054      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2238      	movs	r2, #56	; 0x38
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d138      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	4824      	ldr	r0, [pc, #144]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ed8:	f7fe f926 	bl	8000128 <__udivsi3>
 8001edc:	0003      	movs	r3, r0
 8001ede:	0019      	movs	r1, r3
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	227f      	movs	r2, #127	; 0x7f
 8001ee8:	4013      	ands	r3, r2
 8001eea:	434b      	muls	r3, r1
 8001eec:	617b      	str	r3, [r7, #20]
        break;
 8001eee:	e00d      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	481c      	ldr	r0, [pc, #112]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ef4:	f7fe f918 	bl	8000128 <__udivsi3>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	0019      	movs	r1, r3
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	227f      	movs	r2, #127	; 0x7f
 8001f04:	4013      	ands	r3, r2
 8001f06:	434b      	muls	r3, r1
 8001f08:	617b      	str	r3, [r7, #20]
        break;
 8001f0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0f5b      	lsrs	r3, r3, #29
 8001f12:	2207      	movs	r2, #7
 8001f14:	4013      	ands	r3, r2
 8001f16:	3301      	adds	r3, #1
 8001f18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6978      	ldr	r0, [r7, #20]
 8001f1e:	f7fe f903 	bl	8000128 <__udivsi3>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	e015      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2238      	movs	r2, #56	; 0x38
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d103      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2238      	movs	r2, #56	; 0x38
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b18      	cmp	r3, #24
 8001f46:	d103      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f48:	23fa      	movs	r3, #250	; 0xfa
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e001      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f54:	693b      	ldr	r3, [r7, #16]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b006      	add	sp, #24
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40021000 	.word	0x40021000
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	007a1200 	.word	0x007a1200

08001f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f84:	f7ff fff2 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f88:	0004      	movs	r4, r0
 8001f8a:	f7ff faf9 	bl	8001580 <LL_RCC_GetAPB1Prescaler>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	0b1a      	lsrs	r2, r3, #12
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	58d3      	ldr	r3, [r2, r3]
 8001f98:	221f      	movs	r2, #31
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	40dc      	lsrs	r4, r3
 8001f9e:	0023      	movs	r3, r4
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	08004570 	.word	0x08004570

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fb4:	2313      	movs	r3, #19
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fd0:	e0ad      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2011      	movs	r0, #17
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	055b      	lsls	r3, r3, #21
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d110      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	0549      	lsls	r1, r1, #21
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ff4:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	183b      	adds	r3, r7, r0
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0049      	lsls	r1, r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002016:	f7fe ffad 	bl	8000f74 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800201e:	e00b      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe ffa8 	bl	8000f74 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d904      	bls.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800202e:	2313      	movs	r3, #19
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2203      	movs	r2, #3
 8002034:	701a      	strb	r2, [r3, #0]
        break;
 8002036:	e005      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d0ed      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002044:	2313      	movs	r3, #19
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d15e      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4013      	ands	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d019      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	429a      	cmp	r2, r3
 8002068:	d014      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0249      	lsls	r1, r1, #9
 800207e:	430a      	orrs	r2, r1
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002088:	491e      	ldr	r1, [pc, #120]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800208a:	400a      	ands	r2, r1
 800208c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d016      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ff6a 	bl	8000f74 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	e00c      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe ff65 	bl	8000f74 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d904      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020b6:	2313      	movs	r3, #19
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2203      	movs	r2, #3
 80020bc:	701a      	strb	r2, [r3, #0]
            break;
 80020be:	e004      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0ed      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020ca:	2313      	movs	r3, #19
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e8:	e016      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ea:	2312      	movs	r3, #18
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2213      	movs	r2, #19
 80020f0:	18ba      	adds	r2, r7, r2
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	e00f      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	fffffcff 	.word	0xfffffcff
 8002104:	fffeffff 	.word	0xfffeffff
 8002108:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800210c:	2312      	movs	r3, #18
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2213      	movs	r2, #19
 8002112:	18ba      	adds	r2, r7, r2
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002118:	2311      	movs	r3, #17
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4bb6      	ldr	r3, [pc, #728]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002126:	4bb5      	ldr	r3, [pc, #724]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002128:	49b5      	ldr	r1, [pc, #724]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800212a:	400a      	ands	r2, r1
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002138:	4bb0      	ldr	r3, [pc, #704]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2203      	movs	r2, #3
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4bad      	ldr	r3, [pc, #692]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002148:	430a      	orrs	r2, r1
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002156:	4ba9      	ldr	r3, [pc, #676]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	220c      	movs	r2, #12
 800215c:	4393      	bics	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4ba5      	ldr	r3, [pc, #660]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002166:	430a      	orrs	r2, r1
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002174:	4ba1      	ldr	r3, [pc, #644]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	2230      	movs	r2, #48	; 0x30
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b9e      	ldr	r3, [pc, #632]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002184:	430a      	orrs	r2, r1
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2210      	movs	r2, #16
 800218e:	4013      	ands	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002192:	4b9a      	ldr	r3, [pc, #616]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	4a9b      	ldr	r2, [pc, #620]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	4b96      	ldr	r3, [pc, #600]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	015b      	lsls	r3, r3, #5
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021b2:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	4a94      	ldr	r2, [pc, #592]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	4b8e      	ldr	r3, [pc, #568]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d2:	4b8a      	ldr	r3, [pc, #552]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	4a8d      	ldr	r2, [pc, #564]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e0:	4b86      	ldr	r3, [pc, #536]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	4a86      	ldr	r2, [pc, #536]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002202:	430a      	orrs	r2, r1
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002210:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	4a7f      	ldr	r2, [pc, #508]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002216:	4013      	ands	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	4b77      	ldr	r3, [pc, #476]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002220:	430a      	orrs	r2, r1
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800222e:	4b73      	ldr	r3, [pc, #460]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	4a79      	ldr	r2, [pc, #484]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	01db      	lsls	r3, r3, #7
 800224a:	4013      	ands	r3, r2
 800224c:	d015      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800224e:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	0899      	lsrs	r1, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800225a:	4b68      	ldr	r3, [pc, #416]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225c:	430a      	orrs	r2, r1
 800225e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800226c:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b62      	ldr	r3, [pc, #392]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0249      	lsls	r1, r1, #9
 8002276:	430a      	orrs	r2, r1
 8002278:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	031b      	lsls	r3, r3, #12
 8002282:	4013      	ands	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	4b59      	ldr	r3, [pc, #356]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002296:	430a      	orrs	r2, r1
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	039b      	lsls	r3, r3, #14
 80022a2:	4013      	ands	r3, r2
 80022a4:	d016      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022a6:	4b55      	ldr	r3, [pc, #340]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	4a5c      	ldr	r2, [pc, #368]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b4:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	03db      	lsls	r3, r3, #15
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d106      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022c6:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0449      	lsls	r1, r1, #17
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	03db      	lsls	r3, r3, #15
 80022dc:	4013      	ands	r3, r2
 80022de:	d016      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ee:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002300:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	0449      	lsls	r1, r1, #17
 800230a:	430a      	orrs	r2, r1
 800230c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4013      	ands	r3, r2
 8002318:	d014      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	2203      	movs	r2, #3
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800232a:	430a      	orrs	r2, r1
 800232c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d106      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0249      	lsls	r1, r1, #9
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	019b      	lsls	r3, r3, #6
 800234c:	4013      	ands	r3, r2
 800234e:	d014      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	220c      	movs	r2, #12
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002360:	430a      	orrs	r2, r1
 8002362:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2b04      	cmp	r3, #4
 800236a:	d106      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0249      	lsls	r1, r1, #9
 8002376:	430a      	orrs	r2, r1
 8002378:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	045b      	lsls	r3, r3, #17
 8002382:	4013      	ands	r3, r2
 8002384:	d016      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002396:	430a      	orrs	r2, r1
 8002398:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	019b      	lsls	r3, r3, #6
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d106      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0449      	lsls	r1, r1, #17
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	049b      	lsls	r3, r3, #18
 80023bc:	4013      	ands	r3, r2
 80023be:	d016      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d0:	430a      	orrs	r2, r1
 80023d2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0449      	lsls	r1, r1, #17
 80023ea:	430a      	orrs	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023ee:	2312      	movs	r3, #18
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	781b      	ldrb	r3, [r3, #0]
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b006      	add	sp, #24
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	efffffff 	.word	0xefffffff
 8002404:	fffff3ff 	.word	0xfffff3ff
 8002408:	fffffcff 	.word	0xfffffcff
 800240c:	fff3ffff 	.word	0xfff3ffff
 8002410:	ffcfffff 	.word	0xffcfffff
 8002414:	ffffcfff 	.word	0xffffcfff
 8002418:	ffff3fff 	.word	0xffff3fff
 800241c:	ffbfffff 	.word	0xffbfffff
 8002420:	feffffff 	.word	0xfeffffff

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e04a      	b.n	80024cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223d      	movs	r2, #61	; 0x3d
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223c      	movs	r2, #60	; 0x3c
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe fbcb 	bl	8000be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223d      	movs	r2, #61	; 0x3d
 8002456:	2102      	movs	r1, #2
 8002458:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	0019      	movs	r1, r3
 8002464:	0010      	movs	r0, r2
 8002466:	f000 f9bf 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2248      	movs	r2, #72	; 0x48
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223e      	movs	r2, #62	; 0x3e
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2241      	movs	r2, #65	; 0x41
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2242      	movs	r2, #66	; 0x42
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2243      	movs	r2, #67	; 0x43
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2244      	movs	r2, #68	; 0x44
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2245      	movs	r2, #69	; 0x45
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2246      	movs	r2, #70	; 0x46
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2247      	movs	r2, #71	; 0x47
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223d      	movs	r2, #61	; 0x3d
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	223d      	movs	r2, #61	; 0x3d
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d001      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e047      	b.n	800257c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	; 0x3d
 80024f0:	2102      	movs	r1, #2
 80024f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <HAL_TIM_Base_Start_IT+0xb0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d014      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x64>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	05db      	lsls	r3, r3, #23
 8002516:	429a      	cmp	r2, r3
 8002518:	d00e      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x64>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_TIM_Base_Start_IT+0xb4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d009      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x64>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_TIM_Base_Start_IT+0xb8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d004      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x64>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_TIM_Base_Start_IT+0xbc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d116      	bne.n	8002566 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_TIM_Base_Start_IT+0xc0>)
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b06      	cmp	r3, #6
 8002548:	d016      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0xa4>
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	429a      	cmp	r2, r3
 8002552:	d011      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	e008      	b.n	8002578 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e000      	b.n	800257a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400
 800258c:	40000800 	.word	0x40000800
 8002590:	40014000 	.word	0x40014000
 8002594:	00010007 	.word	0x00010007

08002598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d021      	beq.n	80025fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2202      	movs	r2, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d01d      	beq.n	80025fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2203      	movs	r2, #3
 80025c6:	4252      	negs	r2, r2
 80025c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2203      	movs	r2, #3
 80025d8:	4013      	ands	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 f8ea 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f8dd 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f8e9 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2204      	movs	r2, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d022      	beq.n	800264a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	d01e      	beq.n	800264a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2205      	movs	r2, #5
 8002612:	4252      	negs	r2, r2
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	23c0      	movs	r3, #192	; 0xc0
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4013      	ands	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 f8c3 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 8002632:	e007      	b.n	8002644 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f8b6 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f8c2 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2208      	movs	r2, #8
 800264e:	4013      	ands	r3, r2
 8002650:	d021      	beq.n	8002696 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2208      	movs	r2, #8
 8002656:	4013      	ands	r3, r2
 8002658:	d01d      	beq.n	8002696 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2209      	movs	r2, #9
 8002660:	4252      	negs	r2, r2
 8002662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2204      	movs	r2, #4
 8002668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2203      	movs	r2, #3
 8002672:	4013      	ands	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f89d 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 800267e:	e007      	b.n	8002690 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f890 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f89c 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2210      	movs	r2, #16
 800269a:	4013      	ands	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2210      	movs	r2, #16
 80026a2:	4013      	ands	r3, r2
 80026a4:	d01e      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2211      	movs	r2, #17
 80026ac:	4252      	negs	r2, r2
 80026ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2208      	movs	r2, #8
 80026b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	23c0      	movs	r3, #192	; 0xc0
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 f876 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e007      	b.n	80026de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 f869 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f875 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d00c      	beq.n	8002706 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	4013      	ands	r3, r2
 80026f2:	d008      	beq.n	8002706 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2202      	movs	r2, #2
 80026fa:	4252      	negs	r2, r2
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f7fe fa21 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	4013      	ands	r3, r2
 800270c:	d104      	bne.n	8002718 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	019b      	lsls	r3, r3, #6
 8002714:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002716:	d00b      	beq.n	8002730 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	4013      	ands	r3, r2
 800271e:	d007      	beq.n	8002730 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <HAL_TIM_IRQHandler+0x208>)
 8002726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 f972 	bl	8002a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d00b      	beq.n	8002752 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	4013      	ands	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_TIM_IRQHandler+0x20c>)
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f969 	bl	8002a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2240      	movs	r2, #64	; 0x40
 8002756:	4013      	ands	r3, r2
 8002758:	d00c      	beq.n	8002774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2240      	movs	r2, #64	; 0x40
 800275e:	4013      	ands	r3, r2
 8002760:	d008      	beq.n	8002774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2241      	movs	r2, #65	; 0x41
 8002768:	4252      	negs	r2, r2
 800276a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f832 	bl	80027d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2220      	movs	r2, #32
 8002778:	4013      	ands	r3, r2
 800277a:	d00c      	beq.n	8002796 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	4013      	ands	r3, r2
 8002782:	d008      	beq.n	8002796 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2221      	movs	r2, #33	; 0x21
 800278a:	4252      	negs	r2, r2
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f937 	bl	8002a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b004      	add	sp, #16
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	ffffdf7f 	.word	0xffffdf7f
 80027a4:	fffffeff 	.word	0xfffffeff

080027a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <TIM_Base_SetConfig+0x110>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00c      	beq.n	800281a <TIM_Base_SetConfig+0x32>
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	429a      	cmp	r2, r3
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x32>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <TIM_Base_SetConfig+0x114>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x32>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <TIM_Base_SetConfig+0x118>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2270      	movs	r2, #112	; 0x70
 800281e:	4393      	bics	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a32      	ldr	r2, [pc, #200]	; (80028f8 <TIM_Base_SetConfig+0x110>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d01c      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	05db      	lsls	r3, r3, #23
 800283a:	429a      	cmp	r2, r3
 800283c:	d017      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <TIM_Base_SetConfig+0x114>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <TIM_Base_SetConfig+0x118>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00f      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00b      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <TIM_Base_SetConfig+0x120>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <TIM_Base_SetConfig+0x124>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x86>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <TIM_Base_SetConfig+0x128>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <TIM_Base_SetConfig+0x12c>)
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	4393      	bics	r3, r2
 8002886:	001a      	movs	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <TIM_Base_SetConfig+0x110>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00b      	beq.n	80028c6 <TIM_Base_SetConfig+0xde>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <TIM_Base_SetConfig+0x120>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_Base_SetConfig+0xde>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <TIM_Base_SetConfig+0x124>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_Base_SetConfig+0xde>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <TIM_Base_SetConfig+0x128>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d103      	bne.n	80028ce <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2201      	movs	r2, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4393      	bics	r3, r2
 80028e8:	001a      	movs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	611a      	str	r2, [r3, #16]
  }
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40002000 	.word	0x40002000
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800
 8002914:	fffffcff 	.word	0xfffffcff

08002918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	223c      	movs	r2, #60	; 0x3c
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800292c:	2302      	movs	r3, #2
 800292e:	e05a      	b.n	80029e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	223c      	movs	r2, #60	; 0x3c
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	223d      	movs	r2, #61	; 0x3d
 800293c:	2102      	movs	r1, #2
 800293e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a25      	ldr	r2, [pc, #148]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2270      	movs	r2, #112	; 0x70
 8002970:	4393      	bics	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d014      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	05db      	lsls	r3, r3, #23
 8002998:	429a      	cmp	r2, r3
 800299a:	d00e      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10c      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	4393      	bics	r3, r2
 80029c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	223d      	movs	r2, #61	; 0x3d
 80029d8:	2101      	movs	r1, #1
 80029da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	223c      	movs	r2, #60	; 0x3c
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b004      	add	sp, #16
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	ff0fffff 	.word	0xff0fffff
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800
 8002a00:	40014000 	.word	0x40014000

08002a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e046      	b.n	8002ad4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2288      	movs	r2, #136	; 0x88
 8002a4a:	589b      	ldr	r3, [r3, r2]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2284      	movs	r2, #132	; 0x84
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7fe f8ea 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2288      	movs	r2, #136	; 0x88
 8002a64:	2124      	movs	r1, #36	; 0x24
 8002a66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fd0c 	bl	80034a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 f9b2 	bl	8002df4 <UART_SetConfig>
 8002a90:	0003      	movs	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01c      	b.n	8002ad4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	490d      	ldr	r1, [pc, #52]	; (8002adc <HAL_UART_Init+0xa8>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	212a      	movs	r1, #42	; 0x2a
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 fd9b 	bl	8003608 <UART_CheckIdleState>
 8002ad2:	0003      	movs	r3, r0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ffffb7ff 	.word	0xffffb7ff

08002ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	1dbb      	adds	r3, r7, #6
 8002aee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2288      	movs	r2, #136	; 0x88
 8002af4:	589b      	ldr	r3, [r3, r2]
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d000      	beq.n	8002afc <HAL_UART_Transmit+0x1c>
 8002afa:	e090      	b.n	8002c1e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UART_Transmit+0x2a>
 8002b02:	1dbb      	adds	r3, r7, #6
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e088      	b.n	8002c20 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d109      	bne.n	8002b2e <HAL_UART_Transmit+0x4e>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2201      	movs	r2, #1
 8002b26:	4013      	ands	r3, r2
 8002b28:	d001      	beq.n	8002b2e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e078      	b.n	8002c20 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2290      	movs	r2, #144	; 0x90
 8002b32:	2100      	movs	r1, #0
 8002b34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2288      	movs	r2, #136	; 0x88
 8002b3a:	2121      	movs	r1, #33	; 0x21
 8002b3c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fa19 	bl	8000f74 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1dba      	adds	r2, r7, #6
 8002b4a:	2154      	movs	r1, #84	; 0x54
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1dba      	adds	r2, r7, #6
 8002b54:	2156      	movs	r1, #86	; 0x56
 8002b56:	8812      	ldrh	r2, [r2, #0]
 8002b58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	015b      	lsls	r3, r3, #5
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d108      	bne.n	8002b78 <HAL_UART_Transmit+0x98>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	e003      	b.n	8002b80 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b80:	e030      	b.n	8002be4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	f000 fde4 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2288      	movs	r2, #136	; 0x88
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e03d      	b.n	8002c20 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	001a      	movs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	05d2      	lsls	r2, r2, #23
 8002bb6:	0dd2      	lsrs	r2, r2, #23
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e007      	b.n	8002bd2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2256      	movs	r2, #86	; 0x56
 8002bd6:	5a9b      	ldrh	r3, [r3, r2]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b299      	uxth	r1, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2256      	movs	r2, #86	; 0x56
 8002be2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2256      	movs	r2, #86	; 0x56
 8002be8:	5a9b      	ldrh	r3, [r3, r2]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1c8      	bne.n	8002b82 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	f000 fdad 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2288      	movs	r2, #136	; 0x88
 8002c0a:	2120      	movs	r1, #32
 8002c0c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e006      	b.n	8002c20 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2288      	movs	r2, #136	; 0x88
 8002c16:	2120      	movs	r1, #32
 8002c18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b008      	add	sp, #32
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	1dbb      	adds	r3, r7, #6
 8002c36:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	228c      	movs	r2, #140	; 0x8c
 8002c3c:	589b      	ldr	r3, [r3, r2]
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d000      	beq.n	8002c44 <HAL_UART_Receive+0x1c>
 8002c42:	e0d0      	b.n	8002de6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_Receive+0x2a>
 8002c4a:	1dbb      	adds	r3, r7, #6
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0c8      	b.n	8002de8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	015b      	lsls	r3, r3, #5
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d109      	bne.n	8002c76 <HAL_UART_Receive+0x4e>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d001      	beq.n	8002c76 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0b8      	b.n	8002de8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2290      	movs	r2, #144	; 0x90
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	228c      	movs	r2, #140	; 0x8c
 8002c82:	2122      	movs	r1, #34	; 0x22
 8002c84:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f972 	bl	8000f74 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1dba      	adds	r2, r7, #6
 8002c98:	215c      	movs	r1, #92	; 0x5c
 8002c9a:	8812      	ldrh	r2, [r2, #0]
 8002c9c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1dba      	adds	r2, r7, #6
 8002ca2:	215e      	movs	r1, #94	; 0x5e
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	015b      	lsls	r3, r3, #5
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_UART_Receive+0xa8>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_UART_Receive+0x9e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2260      	movs	r2, #96	; 0x60
 8002cc0:	494b      	ldr	r1, [pc, #300]	; (8002df0 <HAL_UART_Receive+0x1c8>)
 8002cc2:	5299      	strh	r1, [r3, r2]
 8002cc4:	e02e      	b.n	8002d24 <HAL_UART_Receive+0xfc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2260      	movs	r2, #96	; 0x60
 8002cca:	21ff      	movs	r1, #255	; 0xff
 8002ccc:	5299      	strh	r1, [r3, r2]
 8002cce:	e029      	b.n	8002d24 <HAL_UART_Receive+0xfc>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_UART_Receive+0xcc>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_UART_Receive+0xc2>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2260      	movs	r2, #96	; 0x60
 8002ce4:	21ff      	movs	r1, #255	; 0xff
 8002ce6:	5299      	strh	r1, [r3, r2]
 8002ce8:	e01c      	b.n	8002d24 <HAL_UART_Receive+0xfc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2260      	movs	r2, #96	; 0x60
 8002cee:	217f      	movs	r1, #127	; 0x7f
 8002cf0:	5299      	strh	r1, [r3, r2]
 8002cf2:	e017      	b.n	8002d24 <HAL_UART_Receive+0xfc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d10d      	bne.n	8002d1c <HAL_UART_Receive+0xf4>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <HAL_UART_Receive+0xea>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2260      	movs	r2, #96	; 0x60
 8002d0c:	217f      	movs	r1, #127	; 0x7f
 8002d0e:	5299      	strh	r1, [r3, r2]
 8002d10:	e008      	b.n	8002d24 <HAL_UART_Receive+0xfc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2260      	movs	r2, #96	; 0x60
 8002d16:	213f      	movs	r1, #63	; 0x3f
 8002d18:	5299      	strh	r1, [r3, r2]
 8002d1a:	e003      	b.n	8002d24 <HAL_UART_Receive+0xfc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2260      	movs	r2, #96	; 0x60
 8002d20:	2100      	movs	r1, #0
 8002d22:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002d24:	2312      	movs	r3, #18
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	2160      	movs	r1, #96	; 0x60
 8002d2c:	5a52      	ldrh	r2, [r2, r1]
 8002d2e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	015b      	lsls	r3, r3, #5
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d108      	bne.n	8002d4e <HAL_UART_Receive+0x126>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	e003      	b.n	8002d56 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d56:	e03a      	b.n	8002dce <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	0013      	movs	r3, r2
 8002d62:	2200      	movs	r2, #0
 8002d64:	2120      	movs	r1, #32
 8002d66:	f000 fcf9 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	228c      	movs	r2, #140	; 0x8c
 8002d72:	2120      	movs	r1, #32
 8002d74:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e036      	b.n	8002de8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10e      	bne.n	8002d9e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2212      	movs	r2, #18
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e00e      	b.n	8002dbc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2212      	movs	r2, #18
 8002da8:	18ba      	adds	r2, r7, r2
 8002daa:	8812      	ldrh	r2, [r2, #0]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4013      	ands	r3, r2
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	225e      	movs	r2, #94	; 0x5e
 8002dc0:	5a9b      	ldrh	r3, [r3, r2]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	225e      	movs	r2, #94	; 0x5e
 8002dcc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	225e      	movs	r2, #94	; 0x5e
 8002dd2:	5a9b      	ldrh	r3, [r3, r2]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1be      	bne.n	8002d58 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	228c      	movs	r2, #140	; 0x8c
 8002dde:	2120      	movs	r1, #32
 8002de0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b008      	add	sp, #32
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	000001ff 	.word	0x000001ff

08002df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b5b0      	push	{r4, r5, r7, lr}
 8002df6:	b090      	sub	sp, #64	; 0x40
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfc:	231a      	movs	r3, #26
 8002dfe:	2220      	movs	r2, #32
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	19db      	adds	r3, r3, r7
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4ac1      	ldr	r2, [pc, #772]	; (800312c <UART_SetConfig+0x338>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4abc      	ldr	r2, [pc, #752]	; (8003130 <UART_SetConfig+0x33c>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4ab6      	ldr	r2, [pc, #728]	; (8003134 <UART_SetConfig+0x340>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <UART_SetConfig+0x80>
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4ab4      	ldr	r2, [pc, #720]	; (8003138 <UART_SetConfig+0x344>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e70:	4313      	orrs	r3, r2
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4ab0      	ldr	r2, [pc, #704]	; (800313c <UART_SetConfig+0x348>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	220f      	movs	r2, #15
 8002e92:	4393      	bics	r3, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4aa5      	ldr	r2, [pc, #660]	; (8003140 <UART_SetConfig+0x34c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d131      	bne.n	8002f12 <UART_SetConfig+0x11e>
 8002eae:	4ba5      	ldr	r3, [pc, #660]	; (8003144 <UART_SetConfig+0x350>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d01d      	beq.n	8002ef6 <UART_SetConfig+0x102>
 8002eba:	d823      	bhi.n	8002f04 <UART_SetConfig+0x110>
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d00c      	beq.n	8002eda <UART_SetConfig+0xe6>
 8002ec0:	d820      	bhi.n	8002f04 <UART_SetConfig+0x110>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <UART_SetConfig+0xd8>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00e      	beq.n	8002ee8 <UART_SetConfig+0xf4>
 8002eca:	e01b      	b.n	8002f04 <UART_SetConfig+0x110>
 8002ecc:	231b      	movs	r3, #27
 8002ece:	2220      	movs	r2, #32
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	19db      	adds	r3, r3, r7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e154      	b.n	8003184 <UART_SetConfig+0x390>
 8002eda:	231b      	movs	r3, #27
 8002edc:	2220      	movs	r2, #32
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e14d      	b.n	8003184 <UART_SetConfig+0x390>
 8002ee8:	231b      	movs	r3, #27
 8002eea:	2220      	movs	r2, #32
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	19db      	adds	r3, r3, r7
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e146      	b.n	8003184 <UART_SetConfig+0x390>
 8002ef6:	231b      	movs	r3, #27
 8002ef8:	2220      	movs	r2, #32
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	19db      	adds	r3, r3, r7
 8002efe:	2208      	movs	r2, #8
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e13f      	b.n	8003184 <UART_SetConfig+0x390>
 8002f04:	231b      	movs	r3, #27
 8002f06:	2220      	movs	r2, #32
 8002f08:	189b      	adds	r3, r3, r2
 8002f0a:	19db      	adds	r3, r3, r7
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e138      	b.n	8003184 <UART_SetConfig+0x390>
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a8c      	ldr	r2, [pc, #560]	; (8003148 <UART_SetConfig+0x354>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d131      	bne.n	8002f80 <UART_SetConfig+0x18c>
 8002f1c:	4b89      	ldr	r3, [pc, #548]	; (8003144 <UART_SetConfig+0x350>)
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	220c      	movs	r2, #12
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d01d      	beq.n	8002f64 <UART_SetConfig+0x170>
 8002f28:	d823      	bhi.n	8002f72 <UART_SetConfig+0x17e>
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d00c      	beq.n	8002f48 <UART_SetConfig+0x154>
 8002f2e:	d820      	bhi.n	8002f72 <UART_SetConfig+0x17e>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <UART_SetConfig+0x146>
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d00e      	beq.n	8002f56 <UART_SetConfig+0x162>
 8002f38:	e01b      	b.n	8002f72 <UART_SetConfig+0x17e>
 8002f3a:	231b      	movs	r3, #27
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	19db      	adds	r3, r3, r7
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e11d      	b.n	8003184 <UART_SetConfig+0x390>
 8002f48:	231b      	movs	r3, #27
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	19db      	adds	r3, r3, r7
 8002f50:	2202      	movs	r2, #2
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e116      	b.n	8003184 <UART_SetConfig+0x390>
 8002f56:	231b      	movs	r3, #27
 8002f58:	2220      	movs	r2, #32
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	19db      	adds	r3, r3, r7
 8002f5e:	2204      	movs	r2, #4
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e10f      	b.n	8003184 <UART_SetConfig+0x390>
 8002f64:	231b      	movs	r3, #27
 8002f66:	2220      	movs	r2, #32
 8002f68:	189b      	adds	r3, r3, r2
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e108      	b.n	8003184 <UART_SetConfig+0x390>
 8002f72:	231b      	movs	r3, #27
 8002f74:	2220      	movs	r2, #32
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	19db      	adds	r3, r3, r7
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e101      	b.n	8003184 <UART_SetConfig+0x390>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a71      	ldr	r2, [pc, #452]	; (800314c <UART_SetConfig+0x358>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d131      	bne.n	8002fee <UART_SetConfig+0x1fa>
 8002f8a:	4b6e      	ldr	r3, [pc, #440]	; (8003144 <UART_SetConfig+0x350>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	2230      	movs	r2, #48	; 0x30
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b30      	cmp	r3, #48	; 0x30
 8002f94:	d01d      	beq.n	8002fd2 <UART_SetConfig+0x1de>
 8002f96:	d823      	bhi.n	8002fe0 <UART_SetConfig+0x1ec>
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d00c      	beq.n	8002fb6 <UART_SetConfig+0x1c2>
 8002f9c:	d820      	bhi.n	8002fe0 <UART_SetConfig+0x1ec>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <UART_SetConfig+0x1b4>
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d00e      	beq.n	8002fc4 <UART_SetConfig+0x1d0>
 8002fa6:	e01b      	b.n	8002fe0 <UART_SetConfig+0x1ec>
 8002fa8:	231b      	movs	r3, #27
 8002faa:	2220      	movs	r2, #32
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e0e6      	b.n	8003184 <UART_SetConfig+0x390>
 8002fb6:	231b      	movs	r3, #27
 8002fb8:	2220      	movs	r2, #32
 8002fba:	189b      	adds	r3, r3, r2
 8002fbc:	19db      	adds	r3, r3, r7
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e0df      	b.n	8003184 <UART_SetConfig+0x390>
 8002fc4:	231b      	movs	r3, #27
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e0d8      	b.n	8003184 <UART_SetConfig+0x390>
 8002fd2:	231b      	movs	r3, #27
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	2208      	movs	r2, #8
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e0d1      	b.n	8003184 <UART_SetConfig+0x390>
 8002fe0:	231b      	movs	r3, #27
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	19db      	adds	r3, r3, r7
 8002fe8:	2210      	movs	r2, #16
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e0ca      	b.n	8003184 <UART_SetConfig+0x390>
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a57      	ldr	r2, [pc, #348]	; (8003150 <UART_SetConfig+0x35c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d106      	bne.n	8003006 <UART_SetConfig+0x212>
 8002ff8:	231b      	movs	r3, #27
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	19db      	adds	r3, r3, r7
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e0be      	b.n	8003184 <UART_SetConfig+0x390>
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a52      	ldr	r2, [pc, #328]	; (8003154 <UART_SetConfig+0x360>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d106      	bne.n	800301e <UART_SetConfig+0x22a>
 8003010:	231b      	movs	r3, #27
 8003012:	2220      	movs	r2, #32
 8003014:	189b      	adds	r3, r3, r2
 8003016:	19db      	adds	r3, r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e0b2      	b.n	8003184 <UART_SetConfig+0x390>
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4d      	ldr	r2, [pc, #308]	; (8003158 <UART_SetConfig+0x364>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d106      	bne.n	8003036 <UART_SetConfig+0x242>
 8003028:	231b      	movs	r3, #27
 800302a:	2220      	movs	r2, #32
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e0a6      	b.n	8003184 <UART_SetConfig+0x390>
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3e      	ldr	r2, [pc, #248]	; (8003134 <UART_SetConfig+0x340>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d13e      	bne.n	80030be <UART_SetConfig+0x2ca>
 8003040:	4b40      	ldr	r3, [pc, #256]	; (8003144 <UART_SetConfig+0x350>)
 8003042:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003044:	23c0      	movs	r3, #192	; 0xc0
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	4013      	ands	r3, r2
 800304a:	22c0      	movs	r2, #192	; 0xc0
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	4293      	cmp	r3, r2
 8003050:	d027      	beq.n	80030a2 <UART_SetConfig+0x2ae>
 8003052:	22c0      	movs	r2, #192	; 0xc0
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	4293      	cmp	r3, r2
 8003058:	d82a      	bhi.n	80030b0 <UART_SetConfig+0x2bc>
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	4293      	cmp	r3, r2
 8003060:	d011      	beq.n	8003086 <UART_SetConfig+0x292>
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	4293      	cmp	r3, r2
 8003068:	d822      	bhi.n	80030b0 <UART_SetConfig+0x2bc>
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <UART_SetConfig+0x284>
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	00d2      	lsls	r2, r2, #3
 8003072:	4293      	cmp	r3, r2
 8003074:	d00e      	beq.n	8003094 <UART_SetConfig+0x2a0>
 8003076:	e01b      	b.n	80030b0 <UART_SetConfig+0x2bc>
 8003078:	231b      	movs	r3, #27
 800307a:	2220      	movs	r2, #32
 800307c:	189b      	adds	r3, r3, r2
 800307e:	19db      	adds	r3, r3, r7
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e07e      	b.n	8003184 <UART_SetConfig+0x390>
 8003086:	231b      	movs	r3, #27
 8003088:	2220      	movs	r2, #32
 800308a:	189b      	adds	r3, r3, r2
 800308c:	19db      	adds	r3, r3, r7
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e077      	b.n	8003184 <UART_SetConfig+0x390>
 8003094:	231b      	movs	r3, #27
 8003096:	2220      	movs	r2, #32
 8003098:	189b      	adds	r3, r3, r2
 800309a:	19db      	adds	r3, r3, r7
 800309c:	2204      	movs	r2, #4
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e070      	b.n	8003184 <UART_SetConfig+0x390>
 80030a2:	231b      	movs	r3, #27
 80030a4:	2220      	movs	r2, #32
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	2208      	movs	r2, #8
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e069      	b.n	8003184 <UART_SetConfig+0x390>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2220      	movs	r2, #32
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	19db      	adds	r3, r3, r7
 80030b8:	2210      	movs	r2, #16
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e062      	b.n	8003184 <UART_SetConfig+0x390>
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <UART_SetConfig+0x344>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d157      	bne.n	8003178 <UART_SetConfig+0x384>
 80030c8:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <UART_SetConfig+0x350>)
 80030ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030cc:	23c0      	movs	r3, #192	; 0xc0
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	22c0      	movs	r2, #192	; 0xc0
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d040      	beq.n	800315c <UART_SetConfig+0x368>
 80030da:	22c0      	movs	r2, #192	; 0xc0
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	4293      	cmp	r3, r2
 80030e0:	d843      	bhi.n	800316a <UART_SetConfig+0x376>
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d011      	beq.n	800310e <UART_SetConfig+0x31a>
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	0092      	lsls	r2, r2, #2
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d83b      	bhi.n	800316a <UART_SetConfig+0x376>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <UART_SetConfig+0x30c>
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	0052      	lsls	r2, r2, #1
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00e      	beq.n	800311c <UART_SetConfig+0x328>
 80030fe:	e034      	b.n	800316a <UART_SetConfig+0x376>
 8003100:	231b      	movs	r3, #27
 8003102:	2220      	movs	r2, #32
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e03a      	b.n	8003184 <UART_SetConfig+0x390>
 800310e:	231b      	movs	r3, #27
 8003110:	2220      	movs	r2, #32
 8003112:	189b      	adds	r3, r3, r2
 8003114:	19db      	adds	r3, r3, r7
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e033      	b.n	8003184 <UART_SetConfig+0x390>
 800311c:	231b      	movs	r3, #27
 800311e:	2220      	movs	r2, #32
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2204      	movs	r2, #4
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e02c      	b.n	8003184 <UART_SetConfig+0x390>
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	cfff69f3 	.word	0xcfff69f3
 8003130:	ffffcfff 	.word	0xffffcfff
 8003134:	40008000 	.word	0x40008000
 8003138:	40008400 	.word	0x40008400
 800313c:	11fff4ff 	.word	0x11fff4ff
 8003140:	40013800 	.word	0x40013800
 8003144:	40021000 	.word	0x40021000
 8003148:	40004400 	.word	0x40004400
 800314c:	40004800 	.word	0x40004800
 8003150:	40004c00 	.word	0x40004c00
 8003154:	40005000 	.word	0x40005000
 8003158:	40013c00 	.word	0x40013c00
 800315c:	231b      	movs	r3, #27
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2208      	movs	r2, #8
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x390>
 800316a:	231b      	movs	r3, #27
 800316c:	2220      	movs	r2, #32
 800316e:	189b      	adds	r3, r3, r2
 8003170:	19db      	adds	r3, r3, r7
 8003172:	2210      	movs	r2, #16
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e005      	b.n	8003184 <UART_SetConfig+0x390>
 8003178:	231b      	movs	r3, #27
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2210      	movs	r2, #16
 8003182:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4ac1      	ldr	r2, [pc, #772]	; (8003490 <UART_SetConfig+0x69c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d005      	beq.n	800319a <UART_SetConfig+0x3a6>
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4ac0      	ldr	r2, [pc, #768]	; (8003494 <UART_SetConfig+0x6a0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d000      	beq.n	800319a <UART_SetConfig+0x3a6>
 8003198:	e093      	b.n	80032c2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800319a:	231b      	movs	r3, #27
 800319c:	2220      	movs	r2, #32
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	19db      	adds	r3, r3, r7
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d015      	beq.n	80031d4 <UART_SetConfig+0x3e0>
 80031a8:	dc18      	bgt.n	80031dc <UART_SetConfig+0x3e8>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d00d      	beq.n	80031ca <UART_SetConfig+0x3d6>
 80031ae:	dc15      	bgt.n	80031dc <UART_SetConfig+0x3e8>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <UART_SetConfig+0x3c6>
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d005      	beq.n	80031c4 <UART_SetConfig+0x3d0>
 80031b8:	e010      	b.n	80031dc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ba:	f7fe fee1 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80031be:	0003      	movs	r3, r0
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c2:	e014      	b.n	80031ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4bb4      	ldr	r3, [pc, #720]	; (8003498 <UART_SetConfig+0x6a4>)
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c8:	e011      	b.n	80031ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7fe fe4d 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 80031ce:	0003      	movs	r3, r0
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031d2:	e00c      	b.n	80031ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031da:	e008      	b.n	80031ee <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031e0:	231a      	movs	r3, #26
 80031e2:	2220      	movs	r2, #32
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
        break;
 80031ec:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d100      	bne.n	80031f6 <UART_SetConfig+0x402>
 80031f4:	e135      	b.n	8003462 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031fa:	4ba8      	ldr	r3, [pc, #672]	; (800349c <UART_SetConfig+0x6a8>)
 80031fc:	0052      	lsls	r2, r2, #1
 80031fe:	5ad3      	ldrh	r3, [r2, r3]
 8003200:	0019      	movs	r1, r3
 8003202:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003204:	f7fc ff90 	bl	8000128 <__udivsi3>
 8003208:	0003      	movs	r3, r0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	0013      	movs	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	189b      	adds	r3, r3, r2
 8003216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003218:	429a      	cmp	r2, r3
 800321a:	d305      	bcc.n	8003228 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003224:	429a      	cmp	r2, r3
 8003226:	d906      	bls.n	8003236 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003228:	231a      	movs	r3, #26
 800322a:	2220      	movs	r2, #32
 800322c:	189b      	adds	r3, r3, r2
 800322e:	19db      	adds	r3, r3, r7
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e044      	b.n	80032c0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003242:	4b96      	ldr	r3, [pc, #600]	; (800349c <UART_SetConfig+0x6a8>)
 8003244:	0052      	lsls	r2, r2, #1
 8003246:	5ad3      	ldrh	r3, [r2, r3]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	69b8      	ldr	r0, [r7, #24]
 8003254:	69f9      	ldr	r1, [r7, #28]
 8003256:	f7fd f8dd 	bl	8000414 <__aeabi_uldivmod>
 800325a:	0002      	movs	r2, r0
 800325c:	000b      	movs	r3, r1
 800325e:	0e11      	lsrs	r1, r2, #24
 8003260:	021d      	lsls	r5, r3, #8
 8003262:	430d      	orrs	r5, r1
 8003264:	0214      	lsls	r4, r2, #8
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68b8      	ldr	r0, [r7, #8]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	1900      	adds	r0, r0, r4
 8003278:	4169      	adcs	r1, r5
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f7fd f8c4 	bl	8000414 <__aeabi_uldivmod>
 800328c:	0002      	movs	r2, r0
 800328e:	000b      	movs	r3, r1
 8003290:	0013      	movs	r3, r2
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003296:	23c0      	movs	r3, #192	; 0xc0
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	429a      	cmp	r2, r3
 800329c:	d309      	bcc.n	80032b2 <UART_SetConfig+0x4be>
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	035b      	lsls	r3, r3, #13
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d204      	bcs.n	80032b2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e006      	b.n	80032c0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80032b2:	231a      	movs	r3, #26
 80032b4:	2220      	movs	r2, #32
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	19db      	adds	r3, r3, r7
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80032be:	e0d0      	b.n	8003462 <UART_SetConfig+0x66e>
 80032c0:	e0cf      	b.n	8003462 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d000      	beq.n	80032d0 <UART_SetConfig+0x4dc>
 80032ce:	e070      	b.n	80033b2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80032d0:	231b      	movs	r3, #27
 80032d2:	2220      	movs	r2, #32
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d015      	beq.n	800330a <UART_SetConfig+0x516>
 80032de:	dc18      	bgt.n	8003312 <UART_SetConfig+0x51e>
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d00d      	beq.n	8003300 <UART_SetConfig+0x50c>
 80032e4:	dc15      	bgt.n	8003312 <UART_SetConfig+0x51e>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <UART_SetConfig+0x4fc>
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d005      	beq.n	80032fa <UART_SetConfig+0x506>
 80032ee:	e010      	b.n	8003312 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fe fe46 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80032f4:	0003      	movs	r3, r0
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032f8:	e014      	b.n	8003324 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <UART_SetConfig+0x6a4>)
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032fe:	e011      	b.n	8003324 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003300:	f7fe fdb2 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8003304:	0003      	movs	r3, r0
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003308:	e00c      	b.n	8003324 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003310:	e008      	b.n	8003324 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003316:	231a      	movs	r3, #26
 8003318:	2220      	movs	r2, #32
 800331a:	189b      	adds	r3, r3, r2
 800331c:	19db      	adds	r3, r3, r7
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
        break;
 8003322:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	2b00      	cmp	r3, #0
 8003328:	d100      	bne.n	800332c <UART_SetConfig+0x538>
 800332a:	e09a      	b.n	8003462 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003330:	4b5a      	ldr	r3, [pc, #360]	; (800349c <UART_SetConfig+0x6a8>)
 8003332:	0052      	lsls	r2, r2, #1
 8003334:	5ad3      	ldrh	r3, [r2, r3]
 8003336:	0019      	movs	r1, r3
 8003338:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800333a:	f7fc fef5 	bl	8000128 <__udivsi3>
 800333e:	0003      	movs	r3, r0
 8003340:	005a      	lsls	r2, r3, #1
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	18d2      	adds	r2, r2, r3
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	0019      	movs	r1, r3
 8003350:	0010      	movs	r0, r2
 8003352:	f7fc fee9 	bl	8000128 <__udivsi3>
 8003356:	0003      	movs	r3, r0
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d921      	bls.n	80033a4 <UART_SetConfig+0x5b0>
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	025b      	lsls	r3, r3, #9
 8003366:	429a      	cmp	r2, r3
 8003368:	d21c      	bcs.n	80033a4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	b29a      	uxth	r2, r3
 800336e:	200e      	movs	r0, #14
 8003370:	2420      	movs	r4, #32
 8003372:	1903      	adds	r3, r0, r4
 8003374:	19db      	adds	r3, r3, r7
 8003376:	210f      	movs	r1, #15
 8003378:	438a      	bics	r2, r1
 800337a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	2207      	movs	r2, #7
 8003384:	4013      	ands	r3, r2
 8003386:	b299      	uxth	r1, r3
 8003388:	1903      	adds	r3, r0, r4
 800338a:	19db      	adds	r3, r3, r7
 800338c:	1902      	adds	r2, r0, r4
 800338e:	19d2      	adds	r2, r2, r7
 8003390:	8812      	ldrh	r2, [r2, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1902      	adds	r2, r0, r4
 800339c:	19d2      	adds	r2, r2, r7
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	e05e      	b.n	8003462 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80033a4:	231a      	movs	r3, #26
 80033a6:	2220      	movs	r2, #32
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	19db      	adds	r3, r3, r7
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e057      	b.n	8003462 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b2:	231b      	movs	r3, #27
 80033b4:	2220      	movs	r2, #32
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	19db      	adds	r3, r3, r7
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d015      	beq.n	80033ec <UART_SetConfig+0x5f8>
 80033c0:	dc18      	bgt.n	80033f4 <UART_SetConfig+0x600>
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d00d      	beq.n	80033e2 <UART_SetConfig+0x5ee>
 80033c6:	dc15      	bgt.n	80033f4 <UART_SetConfig+0x600>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <UART_SetConfig+0x5de>
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d005      	beq.n	80033dc <UART_SetConfig+0x5e8>
 80033d0:	e010      	b.n	80033f4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d2:	f7fe fdd5 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80033d6:	0003      	movs	r3, r0
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033da:	e014      	b.n	8003406 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033dc:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <UART_SetConfig+0x6a4>)
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e0:	e011      	b.n	8003406 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e2:	f7fe fd41 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 80033e6:	0003      	movs	r3, r0
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ea:	e00c      	b.n	8003406 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033f2:	e008      	b.n	8003406 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033f8:	231a      	movs	r3, #26
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
        break;
 8003404:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02a      	beq.n	8003462 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <UART_SetConfig+0x6a8>)
 8003412:	0052      	lsls	r2, r2, #1
 8003414:	5ad3      	ldrh	r3, [r2, r3]
 8003416:	0019      	movs	r1, r3
 8003418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800341a:	f7fc fe85 	bl	8000128 <__udivsi3>
 800341e:	0003      	movs	r3, r0
 8003420:	001a      	movs	r2, r3
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	18d2      	adds	r2, r2, r3
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0019      	movs	r1, r3
 8003430:	0010      	movs	r0, r2
 8003432:	f7fc fe79 	bl	8000128 <__udivsi3>
 8003436:	0003      	movs	r3, r0
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d90a      	bls.n	8003456 <UART_SetConfig+0x662>
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	025b      	lsls	r3, r3, #9
 8003446:	429a      	cmp	r2, r3
 8003448:	d205      	bcs.n	8003456 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	b29a      	uxth	r2, r3
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	e005      	b.n	8003462 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003456:	231a      	movs	r3, #26
 8003458:	2220      	movs	r2, #32
 800345a:	189b      	adds	r3, r3, r2
 800345c:	19db      	adds	r3, r3, r7
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	226a      	movs	r2, #106	; 0x6a
 8003466:	2101      	movs	r1, #1
 8003468:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2268      	movs	r2, #104	; 0x68
 800346e:	2101      	movs	r1, #1
 8003470:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	2200      	movs	r2, #0
 8003476:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	2200      	movs	r2, #0
 800347c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800347e:	231a      	movs	r3, #26
 8003480:	2220      	movs	r2, #32
 8003482:	189b      	adds	r3, r3, r2
 8003484:	19db      	adds	r3, r3, r7
 8003486:	781b      	ldrb	r3, [r3, #0]
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b010      	add	sp, #64	; 0x40
 800348e:	bdb0      	pop	{r4, r5, r7, pc}
 8003490:	40008000 	.word	0x40008000
 8003494:	40008400 	.word	0x40008400
 8003498:	00f42400 	.word	0x00f42400
 800349c:	08004590 	.word	0x08004590

080034a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	2208      	movs	r2, #8
 80034ae:	4013      	ands	r3, r2
 80034b0:	d00b      	beq.n	80034ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a4a      	ldr	r2, [pc, #296]	; (80035e4 <UART_AdvFeatureConfig+0x144>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d00b      	beq.n	80034ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <UART_AdvFeatureConfig+0x148>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00b      	beq.n	800350e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <UART_AdvFeatureConfig+0x14c>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
 8003516:	d00b      	beq.n	8003530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <UART_AdvFeatureConfig+0x150>)
 8003520:	4013      	ands	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	2210      	movs	r2, #16
 8003536:	4013      	ands	r3, r2
 8003538:	d00b      	beq.n	8003552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <UART_AdvFeatureConfig+0x154>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	2220      	movs	r2, #32
 8003558:	4013      	ands	r3, r2
 800355a:	d00b      	beq.n	8003574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <UART_AdvFeatureConfig+0x158>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	4013      	ands	r3, r2
 800357c:	d01d      	beq.n	80035ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <UART_AdvFeatureConfig+0x15c>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	035b      	lsls	r3, r3, #13
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10b      	bne.n	80035ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a15      	ldr	r2, [pc, #84]	; (8003600 <UART_AdvFeatureConfig+0x160>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	4013      	ands	r3, r2
 80035c2:	d00b      	beq.n	80035dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <UART_AdvFeatureConfig+0x164>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	ffff7fff 	.word	0xffff7fff
 80035e8:	fffdffff 	.word	0xfffdffff
 80035ec:	fffeffff 	.word	0xfffeffff
 80035f0:	fffbffff 	.word	0xfffbffff
 80035f4:	ffffefff 	.word	0xffffefff
 80035f8:	ffffdfff 	.word	0xffffdfff
 80035fc:	ffefffff 	.word	0xffefffff
 8003600:	ff9fffff 	.word	0xff9fffff
 8003604:	fff7ffff 	.word	0xfff7ffff

08003608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b092      	sub	sp, #72	; 0x48
 800360c:	af02      	add	r7, sp, #8
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2290      	movs	r2, #144	; 0x90
 8003614:	2100      	movs	r1, #0
 8003616:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003618:	f7fd fcac 	bl	8000f74 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	4013      	ands	r3, r2
 800362a:	2b08      	cmp	r3, #8
 800362c:	d12d      	bne.n	800368a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	0391      	lsls	r1, r2, #14
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4a47      	ldr	r2, [pc, #284]	; (8003754 <UART_CheckIdleState+0x14c>)
 8003638:	9200      	str	r2, [sp, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	f000 f88e 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d022      	beq.n	800368a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
 800364e:	2301      	movs	r3, #1
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	438a      	bics	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2288      	movs	r2, #136	; 0x88
 800367a:	2120      	movs	r1, #32
 800367c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2284      	movs	r2, #132	; 0x84
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e060      	b.n	800374c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	2b04      	cmp	r3, #4
 8003696:	d146      	bne.n	8003726 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	03d1      	lsls	r1, r2, #15
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <UART_CheckIdleState+0x14c>)
 80036a2:	9200      	str	r2, [sp, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f000 f859 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d03b      	beq.n	8003726 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ae:	f3ef 8310 	mrs	r3, PRIMASK
 80036b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80036b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4922      	ldr	r1, [pc, #136]	; (8003758 <UART_CheckIdleState+0x150>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e0:	f3ef 8310 	mrs	r3, PRIMASK
 80036e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036e6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ea:	2301      	movs	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	438a      	bics	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	228c      	movs	r2, #140	; 0x8c
 8003716:	2120      	movs	r1, #32
 8003718:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2284      	movs	r2, #132	; 0x84
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e012      	b.n	800374c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2288      	movs	r2, #136	; 0x88
 800372a:	2120      	movs	r1, #32
 800372c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	228c      	movs	r2, #140	; 0x8c
 8003732:	2120      	movs	r1, #32
 8003734:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2284      	movs	r2, #132	; 0x84
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b010      	add	sp, #64	; 0x40
 8003752:	bd80      	pop	{r7, pc}
 8003754:	01ffffff 	.word	0x01ffffff
 8003758:	fffffedf 	.word	0xfffffedf

0800375c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376c:	e051      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	3301      	adds	r3, #1
 8003772:	d04e      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fd fbfe 	bl	8000f74 <HAL_GetTick>
 8003778:	0002      	movs	r2, r0
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e051      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2204      	movs	r2, #4
 8003796:	4013      	ands	r3, r2
 8003798:	d03b      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb6>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d038      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb6>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d035      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d111      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2208      	movs	r2, #8
 80037ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f83c 	bl	800383c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2290      	movs	r2, #144	; 0x90
 80037c8:	2108      	movs	r1, #8
 80037ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2284      	movs	r2, #132	; 0x84
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e02c      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	401a      	ands	r2, r3
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d112      	bne.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f81f 	bl	800383c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2290      	movs	r2, #144	; 0x90
 8003802:	2120      	movs	r1, #32
 8003804:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2284      	movs	r2, #132	; 0x84
 800380a:	2100      	movs	r1, #0
 800380c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e00f      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	425a      	negs	r2, r3
 8003822:	4153      	adcs	r3, r2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	001a      	movs	r2, r3
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d09e      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	; 0x38
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003844:	f3ef 8310 	mrs	r3, PRIMASK
 8003848:	617b      	str	r3, [r7, #20]
  return(result);
 800384a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
 800384e:	2301      	movs	r3, #1
 8003850:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4926      	ldr	r1, [pc, #152]	; (8003900 <UART_EndRxTransfer+0xc4>)
 8003866:	400a      	ands	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f383 8810 	msr	PRIMASK, r3
}
 8003874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	623b      	str	r3, [r7, #32]
  return(result);
 800387c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	491b      	ldr	r1, [pc, #108]	; (8003904 <UART_EndRxTransfer+0xc8>)
 8003898:	400a      	ands	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d118      	bne.n	80038e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b0:	f3ef 8310 	mrs	r3, PRIMASK
 80038b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ba:	2301      	movs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f383 8810 	msr	PRIMASK, r3
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2110      	movs	r1, #16
 80038d2:	438a      	bics	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	228c      	movs	r2, #140	; 0x8c
 80038e6:	2120      	movs	r1, #32
 80038e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b00e      	add	sp, #56	; 0x38
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	fffffedf 	.word	0xfffffedf
 8003904:	effffffe 	.word	0xeffffffe

08003908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2284      	movs	r2, #132	; 0x84
 8003914:	5c9b      	ldrb	r3, [r3, r2]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UARTEx_DisableFifoMode+0x16>
 800391a:	2302      	movs	r3, #2
 800391c:	e027      	b.n	800396e <HAL_UARTEx_DisableFifoMode+0x66>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2284      	movs	r2, #132	; 0x84
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2288      	movs	r2, #136	; 0x88
 800392a:	2124      	movs	r1, #36	; 0x24
 800392c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	438a      	bics	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <HAL_UARTEx_DisableFifoMode+0x70>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2288      	movs	r2, #136	; 0x88
 8003960:	2120      	movs	r1, #32
 8003962:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2284      	movs	r2, #132	; 0x84
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	dfffffff 	.word	0xdfffffff

0800397c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2284      	movs	r2, #132	; 0x84
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e02e      	b.n	80039f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2284      	movs	r2, #132	; 0x84
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2288      	movs	r2, #136	; 0x88
 80039a0:	2124      	movs	r1, #36	; 0x24
 80039a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	08d9      	lsrs	r1, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f854 	bl	8003a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2288      	movs	r2, #136	; 0x88
 80039e4:	2120      	movs	r1, #32
 80039e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2284      	movs	r2, #132	; 0x84
 80039ec:	2100      	movs	r1, #0
 80039ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2284      	movs	r2, #132	; 0x84
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e02f      	b.n	8003a74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2284      	movs	r2, #132	; 0x84
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2288      	movs	r2, #136	; 0x88
 8003a20:	2124      	movs	r1, #36	; 0x24
 8003a22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f813 	bl	8003a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2288      	movs	r2, #136	; 0x88
 8003a66:	2120      	movs	r1, #32
 8003a68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2284      	movs	r2, #132	; 0x84
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	f1ffffff 	.word	0xf1ffffff

08003a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	226a      	movs	r2, #106	; 0x6a
 8003a94:	2101      	movs	r1, #1
 8003a96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2268      	movs	r2, #104	; 0x68
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003aa0:	e043      	b.n	8003b2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003aa2:	260f      	movs	r6, #15
 8003aa4:	19bb      	adds	r3, r7, r6
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aaa:	200e      	movs	r0, #14
 8003aac:	183b      	adds	r3, r7, r0
 8003aae:	2208      	movs	r2, #8
 8003ab0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	0e5b      	lsrs	r3, r3, #25
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	240d      	movs	r4, #13
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	0f5b      	lsrs	r3, r3, #29
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	250c      	movs	r5, #12
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	197a      	adds	r2, r7, r5
 8003ae0:	7812      	ldrb	r2, [r2, #0]
 8003ae2:	4914      	ldr	r1, [pc, #80]	; (8003b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	435a      	muls	r2, r3
 8003ae8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	197b      	adds	r3, r7, r5
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af2:	0019      	movs	r1, r3
 8003af4:	f7fc fba2 	bl	800023c <__divsi3>
 8003af8:	0003      	movs	r3, r0
 8003afa:	b299      	uxth	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	226a      	movs	r2, #106	; 0x6a
 8003b00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b02:	19bb      	adds	r3, r7, r6
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	193a      	adds	r2, r7, r4
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	490a      	ldr	r1, [pc, #40]	; (8003b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
 8003b0e:	435a      	muls	r2, r3
 8003b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	f7fc fb8e 	bl	800023c <__divsi3>
 8003b20:	0003      	movs	r3, r0
 8003b22:	b299      	uxth	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2268      	movs	r2, #104	; 0x68
 8003b28:	5299      	strh	r1, [r3, r2]
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b005      	add	sp, #20
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	080045a8 	.word	0x080045a8
 8003b38:	080045b0 	.word	0x080045b0

08003b3c <siprintf>:
 8003b3c:	b40e      	push	{r1, r2, r3}
 8003b3e:	b500      	push	{lr}
 8003b40:	490b      	ldr	r1, [pc, #44]	; (8003b70 <siprintf+0x34>)
 8003b42:	b09c      	sub	sp, #112	; 0x70
 8003b44:	ab1d      	add	r3, sp, #116	; 0x74
 8003b46:	9002      	str	r0, [sp, #8]
 8003b48:	9006      	str	r0, [sp, #24]
 8003b4a:	9107      	str	r1, [sp, #28]
 8003b4c:	9104      	str	r1, [sp, #16]
 8003b4e:	4809      	ldr	r0, [pc, #36]	; (8003b74 <siprintf+0x38>)
 8003b50:	4909      	ldr	r1, [pc, #36]	; (8003b78 <siprintf+0x3c>)
 8003b52:	cb04      	ldmia	r3!, {r2}
 8003b54:	9105      	str	r1, [sp, #20]
 8003b56:	6800      	ldr	r0, [r0, #0]
 8003b58:	a902      	add	r1, sp, #8
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	f000 f9a2 	bl	8003ea4 <_svfiprintf_r>
 8003b60:	2200      	movs	r2, #0
 8003b62:	9b02      	ldr	r3, [sp, #8]
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	b01c      	add	sp, #112	; 0x70
 8003b68:	bc08      	pop	{r3}
 8003b6a:	b003      	add	sp, #12
 8003b6c:	4718      	bx	r3
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	7fffffff 	.word	0x7fffffff
 8003b74:	20000064 	.word	0x20000064
 8003b78:	ffff0208 	.word	0xffff0208

08003b7c <memset>:
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	1882      	adds	r2, r0, r2
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d100      	bne.n	8003b86 <memset+0xa>
 8003b84:	4770      	bx	lr
 8003b86:	7019      	strb	r1, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	e7f9      	b.n	8003b80 <memset+0x4>

08003b8c <__errno>:
 8003b8c:	4b01      	ldr	r3, [pc, #4]	; (8003b94 <__errno+0x8>)
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	4770      	bx	lr
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000064 	.word	0x20000064

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	4c0c      	ldr	r4, [pc, #48]	; (8003bd0 <__libc_init_array+0x38>)
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	; (8003bd4 <__libc_init_array+0x3c>)
 8003ba0:	1b64      	subs	r4, r4, r5
 8003ba2:	10a4      	asrs	r4, r4, #2
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	2600      	movs	r6, #0
 8003baa:	f000 fc6d 	bl	8004488 <_init>
 8003bae:	4c0a      	ldr	r4, [pc, #40]	; (8003bd8 <__libc_init_array+0x40>)
 8003bb0:	4d0a      	ldr	r5, [pc, #40]	; (8003bdc <__libc_init_array+0x44>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	42a6      	cmp	r6, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	00b3      	lsls	r3, r6, #2
 8003bbe:	58eb      	ldr	r3, [r5, r3]
 8003bc0:	4798      	blx	r3
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	00b3      	lsls	r3, r6, #2
 8003bc8:	58eb      	ldr	r3, [r5, r3]
 8003bca:	4798      	blx	r3
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	080045f4 	.word	0x080045f4
 8003bd4:	080045f4 	.word	0x080045f4
 8003bd8:	080045f8 	.word	0x080045f8
 8003bdc:	080045f4 	.word	0x080045f4

08003be0 <__retarget_lock_acquire_recursive>:
 8003be0:	4770      	bx	lr

08003be2 <__retarget_lock_release_recursive>:
 8003be2:	4770      	bx	lr

08003be4 <_free_r>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	0005      	movs	r5, r0
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d010      	beq.n	8003c0e <_free_r+0x2a>
 8003bec:	1f0c      	subs	r4, r1, #4
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	da00      	bge.n	8003bf6 <_free_r+0x12>
 8003bf4:	18e4      	adds	r4, r4, r3
 8003bf6:	0028      	movs	r0, r5
 8003bf8:	f000 f8e2 	bl	8003dc0 <__malloc_lock>
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <_free_r+0x90>)
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <_free_r+0x2c>
 8003c04:	6063      	str	r3, [r4, #4]
 8003c06:	6014      	str	r4, [r2, #0]
 8003c08:	0028      	movs	r0, r5
 8003c0a:	f000 f8e1 	bl	8003dd0 <__malloc_unlock>
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d908      	bls.n	8003c26 <_free_r+0x42>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	1821      	adds	r1, r4, r0
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d1f3      	bne.n	8003c04 <_free_r+0x20>
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1809      	adds	r1, r1, r0
 8003c22:	6021      	str	r1, [r4, #0]
 8003c24:	e7ee      	b.n	8003c04 <_free_r+0x20>
 8003c26:	001a      	movs	r2, r3
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <_free_r+0x4e>
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	d9f9      	bls.n	8003c26 <_free_r+0x42>
 8003c32:	6811      	ldr	r1, [r2, #0]
 8003c34:	1850      	adds	r0, r2, r1
 8003c36:	42a0      	cmp	r0, r4
 8003c38:	d10b      	bne.n	8003c52 <_free_r+0x6e>
 8003c3a:	6820      	ldr	r0, [r4, #0]
 8003c3c:	1809      	adds	r1, r1, r0
 8003c3e:	1850      	adds	r0, r2, r1
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	4283      	cmp	r3, r0
 8003c44:	d1e0      	bne.n	8003c08 <_free_r+0x24>
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	1841      	adds	r1, r0, r1
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	6053      	str	r3, [r2, #4]
 8003c50:	e7da      	b.n	8003c08 <_free_r+0x24>
 8003c52:	42a0      	cmp	r0, r4
 8003c54:	d902      	bls.n	8003c5c <_free_r+0x78>
 8003c56:	230c      	movs	r3, #12
 8003c58:	602b      	str	r3, [r5, #0]
 8003c5a:	e7d5      	b.n	8003c08 <_free_r+0x24>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	1821      	adds	r1, r4, r0
 8003c60:	428b      	cmp	r3, r1
 8003c62:	d103      	bne.n	8003c6c <_free_r+0x88>
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	1809      	adds	r1, r1, r0
 8003c6a:	6021      	str	r1, [r4, #0]
 8003c6c:	6063      	str	r3, [r4, #4]
 8003c6e:	6054      	str	r4, [r2, #4]
 8003c70:	e7ca      	b.n	8003c08 <_free_r+0x24>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000440 	.word	0x20000440

08003c78 <sbrk_aligned>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4e0f      	ldr	r6, [pc, #60]	; (8003cb8 <sbrk_aligned+0x40>)
 8003c7c:	000d      	movs	r5, r1
 8003c7e:	6831      	ldr	r1, [r6, #0]
 8003c80:	0004      	movs	r4, r0
 8003c82:	2900      	cmp	r1, #0
 8003c84:	d102      	bne.n	8003c8c <sbrk_aligned+0x14>
 8003c86:	f000 fba1 	bl	80043cc <_sbrk_r>
 8003c8a:	6030      	str	r0, [r6, #0]
 8003c8c:	0029      	movs	r1, r5
 8003c8e:	0020      	movs	r0, r4
 8003c90:	f000 fb9c 	bl	80043cc <_sbrk_r>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d00a      	beq.n	8003cae <sbrk_aligned+0x36>
 8003c98:	2303      	movs	r3, #3
 8003c9a:	1cc5      	adds	r5, r0, #3
 8003c9c:	439d      	bics	r5, r3
 8003c9e:	42a8      	cmp	r0, r5
 8003ca0:	d007      	beq.n	8003cb2 <sbrk_aligned+0x3a>
 8003ca2:	1a29      	subs	r1, r5, r0
 8003ca4:	0020      	movs	r0, r4
 8003ca6:	f000 fb91 	bl	80043cc <_sbrk_r>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d101      	bne.n	8003cb2 <sbrk_aligned+0x3a>
 8003cae:	2501      	movs	r5, #1
 8003cb0:	426d      	negs	r5, r5
 8003cb2:	0028      	movs	r0, r5
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	20000444 	.word	0x20000444

08003cbc <_malloc_r>:
 8003cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	1ccb      	adds	r3, r1, #3
 8003cc2:	4393      	bics	r3, r2
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	0006      	movs	r6, r0
 8003cc8:	001f      	movs	r7, r3
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d238      	bcs.n	8003d40 <_malloc_r+0x84>
 8003cce:	270c      	movs	r7, #12
 8003cd0:	42b9      	cmp	r1, r7
 8003cd2:	d837      	bhi.n	8003d44 <_malloc_r+0x88>
 8003cd4:	0030      	movs	r0, r6
 8003cd6:	f000 f873 	bl	8003dc0 <__malloc_lock>
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <_malloc_r+0x100>)
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	001c      	movs	r4, r3
 8003ce2:	2c00      	cmp	r4, #0
 8003ce4:	d133      	bne.n	8003d4e <_malloc_r+0x92>
 8003ce6:	0039      	movs	r1, r7
 8003ce8:	0030      	movs	r0, r6
 8003cea:	f7ff ffc5 	bl	8003c78 <sbrk_aligned>
 8003cee:	0004      	movs	r4, r0
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d15e      	bne.n	8003db2 <_malloc_r+0xf6>
 8003cf4:	9b00      	ldr	r3, [sp, #0]
 8003cf6:	681c      	ldr	r4, [r3, #0]
 8003cf8:	0025      	movs	r5, r4
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	d14e      	bne.n	8003d9c <_malloc_r+0xe0>
 8003cfe:	2c00      	cmp	r4, #0
 8003d00:	d051      	beq.n	8003da6 <_malloc_r+0xea>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	0029      	movs	r1, r5
 8003d06:	18e3      	adds	r3, r4, r3
 8003d08:	0030      	movs	r0, r6
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	f000 fb5e 	bl	80043cc <_sbrk_r>
 8003d10:	9b01      	ldr	r3, [sp, #4]
 8003d12:	4283      	cmp	r3, r0
 8003d14:	d147      	bne.n	8003da6 <_malloc_r+0xea>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	0030      	movs	r0, r6
 8003d1a:	1aff      	subs	r7, r7, r3
 8003d1c:	0039      	movs	r1, r7
 8003d1e:	f7ff ffab 	bl	8003c78 <sbrk_aligned>
 8003d22:	3001      	adds	r0, #1
 8003d24:	d03f      	beq.n	8003da6 <_malloc_r+0xea>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	9b00      	ldr	r3, [sp, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d040      	beq.n	8003db6 <_malloc_r+0xfa>
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	42a2      	cmp	r2, r4
 8003d38:	d133      	bne.n	8003da2 <_malloc_r+0xe6>
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	e014      	b.n	8003d6a <_malloc_r+0xae>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	dac5      	bge.n	8003cd0 <_malloc_r+0x14>
 8003d44:	230c      	movs	r3, #12
 8003d46:	2500      	movs	r5, #0
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d4e:	6821      	ldr	r1, [r4, #0]
 8003d50:	1bc9      	subs	r1, r1, r7
 8003d52:	d420      	bmi.n	8003d96 <_malloc_r+0xda>
 8003d54:	290b      	cmp	r1, #11
 8003d56:	d918      	bls.n	8003d8a <_malloc_r+0xce>
 8003d58:	19e2      	adds	r2, r4, r7
 8003d5a:	6027      	str	r7, [r4, #0]
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	d112      	bne.n	8003d86 <_malloc_r+0xca>
 8003d60:	9b00      	ldr	r3, [sp, #0]
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	6011      	str	r1, [r2, #0]
 8003d68:	6053      	str	r3, [r2, #4]
 8003d6a:	0030      	movs	r0, r6
 8003d6c:	0025      	movs	r5, r4
 8003d6e:	f000 f82f 	bl	8003dd0 <__malloc_unlock>
 8003d72:	2207      	movs	r2, #7
 8003d74:	350b      	adds	r5, #11
 8003d76:	1d23      	adds	r3, r4, #4
 8003d78:	4395      	bics	r5, r2
 8003d7a:	1aea      	subs	r2, r5, r3
 8003d7c:	429d      	cmp	r5, r3
 8003d7e:	d0e4      	beq.n	8003d4a <_malloc_r+0x8e>
 8003d80:	1b5b      	subs	r3, r3, r5
 8003d82:	50a3      	str	r3, [r4, r2]
 8003d84:	e7e1      	b.n	8003d4a <_malloc_r+0x8e>
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	e7ec      	b.n	8003d64 <_malloc_r+0xa8>
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d1d5      	bne.n	8003d3c <_malloc_r+0x80>
 8003d90:	9b00      	ldr	r3, [sp, #0]
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e7e9      	b.n	8003d6a <_malloc_r+0xae>
 8003d96:	0023      	movs	r3, r4
 8003d98:	6864      	ldr	r4, [r4, #4]
 8003d9a:	e7a2      	b.n	8003ce2 <_malloc_r+0x26>
 8003d9c:	002c      	movs	r4, r5
 8003d9e:	686d      	ldr	r5, [r5, #4]
 8003da0:	e7ab      	b.n	8003cfa <_malloc_r+0x3e>
 8003da2:	0013      	movs	r3, r2
 8003da4:	e7c4      	b.n	8003d30 <_malloc_r+0x74>
 8003da6:	230c      	movs	r3, #12
 8003da8:	0030      	movs	r0, r6
 8003daa:	6033      	str	r3, [r6, #0]
 8003dac:	f000 f810 	bl	8003dd0 <__malloc_unlock>
 8003db0:	e7cb      	b.n	8003d4a <_malloc_r+0x8e>
 8003db2:	6027      	str	r7, [r4, #0]
 8003db4:	e7d9      	b.n	8003d6a <_malloc_r+0xae>
 8003db6:	605b      	str	r3, [r3, #4]
 8003db8:	deff      	udf	#255	; 0xff
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	20000440 	.word	0x20000440

08003dc0 <__malloc_lock>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4802      	ldr	r0, [pc, #8]	; (8003dcc <__malloc_lock+0xc>)
 8003dc4:	f7ff ff0c 	bl	8003be0 <__retarget_lock_acquire_recursive>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	2000043c 	.word	0x2000043c

08003dd0 <__malloc_unlock>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4802      	ldr	r0, [pc, #8]	; (8003ddc <__malloc_unlock+0xc>)
 8003dd4:	f7ff ff05 	bl	8003be2 <__retarget_lock_release_recursive>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	2000043c 	.word	0x2000043c

08003de0 <__ssputs_r>:
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	b085      	sub	sp, #20
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	9203      	str	r2, [sp, #12]
 8003de8:	688e      	ldr	r6, [r1, #8]
 8003dea:	9a01      	ldr	r2, [sp, #4]
 8003dec:	0007      	movs	r7, r0
 8003dee:	000c      	movs	r4, r1
 8003df0:	680b      	ldr	r3, [r1, #0]
 8003df2:	4296      	cmp	r6, r2
 8003df4:	d831      	bhi.n	8003e5a <__ssputs_r+0x7a>
 8003df6:	898a      	ldrh	r2, [r1, #12]
 8003df8:	2190      	movs	r1, #144	; 0x90
 8003dfa:	00c9      	lsls	r1, r1, #3
 8003dfc:	420a      	tst	r2, r1
 8003dfe:	d029      	beq.n	8003e54 <__ssputs_r+0x74>
 8003e00:	2003      	movs	r0, #3
 8003e02:	6921      	ldr	r1, [r4, #16]
 8003e04:	1a5b      	subs	r3, r3, r1
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	6963      	ldr	r3, [r4, #20]
 8003e0a:	4343      	muls	r3, r0
 8003e0c:	0fdd      	lsrs	r5, r3, #31
 8003e0e:	18ed      	adds	r5, r5, r3
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	9802      	ldr	r0, [sp, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	181b      	adds	r3, r3, r0
 8003e18:	106d      	asrs	r5, r5, #1
 8003e1a:	42ab      	cmp	r3, r5
 8003e1c:	d900      	bls.n	8003e20 <__ssputs_r+0x40>
 8003e1e:	001d      	movs	r5, r3
 8003e20:	0552      	lsls	r2, r2, #21
 8003e22:	d529      	bpl.n	8003e78 <__ssputs_r+0x98>
 8003e24:	0029      	movs	r1, r5
 8003e26:	0038      	movs	r0, r7
 8003e28:	f7ff ff48 	bl	8003cbc <_malloc_r>
 8003e2c:	1e06      	subs	r6, r0, #0
 8003e2e:	d02d      	beq.n	8003e8c <__ssputs_r+0xac>
 8003e30:	9a02      	ldr	r2, [sp, #8]
 8003e32:	6921      	ldr	r1, [r4, #16]
 8003e34:	f000 fae7 	bl	8004406 <memcpy>
 8003e38:	89a2      	ldrh	r2, [r4, #12]
 8003e3a:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <__ssputs_r+0xc0>)
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	4313      	orrs	r3, r2
 8003e42:	81a3      	strh	r3, [r4, #12]
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	6126      	str	r6, [r4, #16]
 8003e48:	18f6      	adds	r6, r6, r3
 8003e4a:	6026      	str	r6, [r4, #0]
 8003e4c:	6165      	str	r5, [r4, #20]
 8003e4e:	9e01      	ldr	r6, [sp, #4]
 8003e50:	1aed      	subs	r5, r5, r3
 8003e52:	60a5      	str	r5, [r4, #8]
 8003e54:	9b01      	ldr	r3, [sp, #4]
 8003e56:	429e      	cmp	r6, r3
 8003e58:	d900      	bls.n	8003e5c <__ssputs_r+0x7c>
 8003e5a:	9e01      	ldr	r6, [sp, #4]
 8003e5c:	0032      	movs	r2, r6
 8003e5e:	9903      	ldr	r1, [sp, #12]
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	f000 fa9f 	bl	80043a4 <memmove>
 8003e66:	2000      	movs	r0, #0
 8003e68:	68a3      	ldr	r3, [r4, #8]
 8003e6a:	1b9b      	subs	r3, r3, r6
 8003e6c:	60a3      	str	r3, [r4, #8]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	199b      	adds	r3, r3, r6
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	b005      	add	sp, #20
 8003e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e78:	002a      	movs	r2, r5
 8003e7a:	0038      	movs	r0, r7
 8003e7c:	f000 facc 	bl	8004418 <_realloc_r>
 8003e80:	1e06      	subs	r6, r0, #0
 8003e82:	d1df      	bne.n	8003e44 <__ssputs_r+0x64>
 8003e84:	0038      	movs	r0, r7
 8003e86:	6921      	ldr	r1, [r4, #16]
 8003e88:	f7ff feac 	bl	8003be4 <_free_r>
 8003e8c:	230c      	movs	r3, #12
 8003e8e:	2001      	movs	r0, #1
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	89a2      	ldrh	r2, [r4, #12]
 8003e94:	3334      	adds	r3, #52	; 0x34
 8003e96:	4313      	orrs	r3, r2
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	4240      	negs	r0, r0
 8003e9c:	e7ea      	b.n	8003e74 <__ssputs_r+0x94>
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	fffffb7f 	.word	0xfffffb7f

08003ea4 <_svfiprintf_r>:
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea6:	b0a1      	sub	sp, #132	; 0x84
 8003ea8:	9003      	str	r0, [sp, #12]
 8003eaa:	001d      	movs	r5, r3
 8003eac:	898b      	ldrh	r3, [r1, #12]
 8003eae:	000f      	movs	r7, r1
 8003eb0:	0016      	movs	r6, r2
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	d511      	bpl.n	8003eda <_svfiprintf_r+0x36>
 8003eb6:	690b      	ldr	r3, [r1, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10e      	bne.n	8003eda <_svfiprintf_r+0x36>
 8003ebc:	2140      	movs	r1, #64	; 0x40
 8003ebe:	f7ff fefd 	bl	8003cbc <_malloc_r>
 8003ec2:	6038      	str	r0, [r7, #0]
 8003ec4:	6138      	str	r0, [r7, #16]
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d105      	bne.n	8003ed6 <_svfiprintf_r+0x32>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	9a03      	ldr	r2, [sp, #12]
 8003ece:	3801      	subs	r0, #1
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	b021      	add	sp, #132	; 0x84
 8003ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed6:	2340      	movs	r3, #64	; 0x40
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	2300      	movs	r3, #0
 8003edc:	ac08      	add	r4, sp, #32
 8003ede:	6163      	str	r3, [r4, #20]
 8003ee0:	3320      	adds	r3, #32
 8003ee2:	7663      	strb	r3, [r4, #25]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	76a3      	strb	r3, [r4, #26]
 8003ee8:	9507      	str	r5, [sp, #28]
 8003eea:	0035      	movs	r5, r6
 8003eec:	782b      	ldrb	r3, [r5, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <_svfiprintf_r+0x52>
 8003ef2:	2b25      	cmp	r3, #37	; 0x25
 8003ef4:	d148      	bne.n	8003f88 <_svfiprintf_r+0xe4>
 8003ef6:	1bab      	subs	r3, r5, r6
 8003ef8:	9305      	str	r3, [sp, #20]
 8003efa:	42b5      	cmp	r5, r6
 8003efc:	d00b      	beq.n	8003f16 <_svfiprintf_r+0x72>
 8003efe:	0032      	movs	r2, r6
 8003f00:	0039      	movs	r1, r7
 8003f02:	9803      	ldr	r0, [sp, #12]
 8003f04:	f7ff ff6c 	bl	8003de0 <__ssputs_r>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d100      	bne.n	8003f0e <_svfiprintf_r+0x6a>
 8003f0c:	e0af      	b.n	800406e <_svfiprintf_r+0x1ca>
 8003f0e:	6963      	ldr	r3, [r4, #20]
 8003f10:	9a05      	ldr	r2, [sp, #20]
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	6163      	str	r3, [r4, #20]
 8003f16:	782b      	ldrb	r3, [r5, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d100      	bne.n	8003f1e <_svfiprintf_r+0x7a>
 8003f1c:	e0a7      	b.n	800406e <_svfiprintf_r+0x1ca>
 8003f1e:	2201      	movs	r2, #1
 8003f20:	2300      	movs	r3, #0
 8003f22:	4252      	negs	r2, r2
 8003f24:	6062      	str	r2, [r4, #4]
 8003f26:	a904      	add	r1, sp, #16
 8003f28:	3254      	adds	r2, #84	; 0x54
 8003f2a:	1852      	adds	r2, r2, r1
 8003f2c:	1c6e      	adds	r6, r5, #1
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	60e3      	str	r3, [r4, #12]
 8003f32:	60a3      	str	r3, [r4, #8]
 8003f34:	7013      	strb	r3, [r2, #0]
 8003f36:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f38:	4b55      	ldr	r3, [pc, #340]	; (8004090 <_svfiprintf_r+0x1ec>)
 8003f3a:	2205      	movs	r2, #5
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	7831      	ldrb	r1, [r6, #0]
 8003f40:	9305      	str	r3, [sp, #20]
 8003f42:	f000 fa55 	bl	80043f0 <memchr>
 8003f46:	1c75      	adds	r5, r6, #1
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d11f      	bne.n	8003f8c <_svfiprintf_r+0xe8>
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	06d3      	lsls	r3, r2, #27
 8003f50:	d504      	bpl.n	8003f5c <_svfiprintf_r+0xb8>
 8003f52:	2353      	movs	r3, #83	; 0x53
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	185b      	adds	r3, r3, r1
 8003f58:	2120      	movs	r1, #32
 8003f5a:	7019      	strb	r1, [r3, #0]
 8003f5c:	0713      	lsls	r3, r2, #28
 8003f5e:	d504      	bpl.n	8003f6a <_svfiprintf_r+0xc6>
 8003f60:	2353      	movs	r3, #83	; 0x53
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	185b      	adds	r3, r3, r1
 8003f66:	212b      	movs	r1, #43	; 0x2b
 8003f68:	7019      	strb	r1, [r3, #0]
 8003f6a:	7833      	ldrb	r3, [r6, #0]
 8003f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6e:	d016      	beq.n	8003f9e <_svfiprintf_r+0xfa>
 8003f70:	0035      	movs	r5, r6
 8003f72:	2100      	movs	r1, #0
 8003f74:	200a      	movs	r0, #10
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	782a      	ldrb	r2, [r5, #0]
 8003f7a:	1c6e      	adds	r6, r5, #1
 8003f7c:	3a30      	subs	r2, #48	; 0x30
 8003f7e:	2a09      	cmp	r2, #9
 8003f80:	d94e      	bls.n	8004020 <_svfiprintf_r+0x17c>
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d111      	bne.n	8003faa <_svfiprintf_r+0x106>
 8003f86:	e017      	b.n	8003fb8 <_svfiprintf_r+0x114>
 8003f88:	3501      	adds	r5, #1
 8003f8a:	e7af      	b.n	8003eec <_svfiprintf_r+0x48>
 8003f8c:	9b05      	ldr	r3, [sp, #20]
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	1ac0      	subs	r0, r0, r3
 8003f92:	2301      	movs	r3, #1
 8003f94:	4083      	lsls	r3, r0
 8003f96:	4313      	orrs	r3, r2
 8003f98:	002e      	movs	r6, r5
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	e7cc      	b.n	8003f38 <_svfiprintf_r+0x94>
 8003f9e:	9b07      	ldr	r3, [sp, #28]
 8003fa0:	1d19      	adds	r1, r3, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	9107      	str	r1, [sp, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db01      	blt.n	8003fae <_svfiprintf_r+0x10a>
 8003faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fac:	e004      	b.n	8003fb8 <_svfiprintf_r+0x114>
 8003fae:	425b      	negs	r3, r3
 8003fb0:	60e3      	str	r3, [r4, #12]
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	782b      	ldrb	r3, [r5, #0]
 8003fba:	2b2e      	cmp	r3, #46	; 0x2e
 8003fbc:	d10a      	bne.n	8003fd4 <_svfiprintf_r+0x130>
 8003fbe:	786b      	ldrb	r3, [r5, #1]
 8003fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc2:	d135      	bne.n	8004030 <_svfiprintf_r+0x18c>
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	3502      	adds	r5, #2
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	9207      	str	r2, [sp, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	db2b      	blt.n	800402a <_svfiprintf_r+0x186>
 8003fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd4:	4e2f      	ldr	r6, [pc, #188]	; (8004094 <_svfiprintf_r+0x1f0>)
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	0030      	movs	r0, r6
 8003fda:	7829      	ldrb	r1, [r5, #0]
 8003fdc:	f000 fa08 	bl	80043f0 <memchr>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d006      	beq.n	8003ff2 <_svfiprintf_r+0x14e>
 8003fe4:	2340      	movs	r3, #64	; 0x40
 8003fe6:	1b80      	subs	r0, r0, r6
 8003fe8:	4083      	lsls	r3, r0
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	3501      	adds	r5, #1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	7829      	ldrb	r1, [r5, #0]
 8003ff4:	2206      	movs	r2, #6
 8003ff6:	4828      	ldr	r0, [pc, #160]	; (8004098 <_svfiprintf_r+0x1f4>)
 8003ff8:	1c6e      	adds	r6, r5, #1
 8003ffa:	7621      	strb	r1, [r4, #24]
 8003ffc:	f000 f9f8 	bl	80043f0 <memchr>
 8004000:	2800      	cmp	r0, #0
 8004002:	d03c      	beq.n	800407e <_svfiprintf_r+0x1da>
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <_svfiprintf_r+0x1f8>)
 8004006:	2b00      	cmp	r3, #0
 8004008:	d125      	bne.n	8004056 <_svfiprintf_r+0x1b2>
 800400a:	2207      	movs	r2, #7
 800400c:	9b07      	ldr	r3, [sp, #28]
 800400e:	3307      	adds	r3, #7
 8004010:	4393      	bics	r3, r2
 8004012:	3308      	adds	r3, #8
 8004014:	9307      	str	r3, [sp, #28]
 8004016:	6963      	ldr	r3, [r4, #20]
 8004018:	9a04      	ldr	r2, [sp, #16]
 800401a:	189b      	adds	r3, r3, r2
 800401c:	6163      	str	r3, [r4, #20]
 800401e:	e764      	b.n	8003eea <_svfiprintf_r+0x46>
 8004020:	4343      	muls	r3, r0
 8004022:	0035      	movs	r5, r6
 8004024:	2101      	movs	r1, #1
 8004026:	189b      	adds	r3, r3, r2
 8004028:	e7a6      	b.n	8003f78 <_svfiprintf_r+0xd4>
 800402a:	2301      	movs	r3, #1
 800402c:	425b      	negs	r3, r3
 800402e:	e7d0      	b.n	8003fd2 <_svfiprintf_r+0x12e>
 8004030:	2300      	movs	r3, #0
 8004032:	200a      	movs	r0, #10
 8004034:	001a      	movs	r2, r3
 8004036:	3501      	adds	r5, #1
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	7829      	ldrb	r1, [r5, #0]
 800403c:	1c6e      	adds	r6, r5, #1
 800403e:	3930      	subs	r1, #48	; 0x30
 8004040:	2909      	cmp	r1, #9
 8004042:	d903      	bls.n	800404c <_svfiprintf_r+0x1a8>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0c5      	beq.n	8003fd4 <_svfiprintf_r+0x130>
 8004048:	9209      	str	r2, [sp, #36]	; 0x24
 800404a:	e7c3      	b.n	8003fd4 <_svfiprintf_r+0x130>
 800404c:	4342      	muls	r2, r0
 800404e:	0035      	movs	r5, r6
 8004050:	2301      	movs	r3, #1
 8004052:	1852      	adds	r2, r2, r1
 8004054:	e7f1      	b.n	800403a <_svfiprintf_r+0x196>
 8004056:	aa07      	add	r2, sp, #28
 8004058:	9200      	str	r2, [sp, #0]
 800405a:	0021      	movs	r1, r4
 800405c:	003a      	movs	r2, r7
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <_svfiprintf_r+0x1fc>)
 8004060:	9803      	ldr	r0, [sp, #12]
 8004062:	e000      	b.n	8004066 <_svfiprintf_r+0x1c2>
 8004064:	bf00      	nop
 8004066:	9004      	str	r0, [sp, #16]
 8004068:	9b04      	ldr	r3, [sp, #16]
 800406a:	3301      	adds	r3, #1
 800406c:	d1d3      	bne.n	8004016 <_svfiprintf_r+0x172>
 800406e:	89bb      	ldrh	r3, [r7, #12]
 8004070:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004072:	065b      	lsls	r3, r3, #25
 8004074:	d400      	bmi.n	8004078 <_svfiprintf_r+0x1d4>
 8004076:	e72c      	b.n	8003ed2 <_svfiprintf_r+0x2e>
 8004078:	2001      	movs	r0, #1
 800407a:	4240      	negs	r0, r0
 800407c:	e729      	b.n	8003ed2 <_svfiprintf_r+0x2e>
 800407e:	aa07      	add	r2, sp, #28
 8004080:	9200      	str	r2, [sp, #0]
 8004082:	0021      	movs	r1, r4
 8004084:	003a      	movs	r2, r7
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <_svfiprintf_r+0x1fc>)
 8004088:	9803      	ldr	r0, [sp, #12]
 800408a:	f000 f87b 	bl	8004184 <_printf_i>
 800408e:	e7ea      	b.n	8004066 <_svfiprintf_r+0x1c2>
 8004090:	080045b8 	.word	0x080045b8
 8004094:	080045be 	.word	0x080045be
 8004098:	080045c2 	.word	0x080045c2
 800409c:	00000000 	.word	0x00000000
 80040a0:	08003de1 	.word	0x08003de1

080040a4 <_printf_common>:
 80040a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a6:	0016      	movs	r6, r2
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	688a      	ldr	r2, [r1, #8]
 80040ac:	690b      	ldr	r3, [r1, #16]
 80040ae:	000c      	movs	r4, r1
 80040b0:	9000      	str	r0, [sp, #0]
 80040b2:	4293      	cmp	r3, r2
 80040b4:	da00      	bge.n	80040b8 <_printf_common+0x14>
 80040b6:	0013      	movs	r3, r2
 80040b8:	0022      	movs	r2, r4
 80040ba:	6033      	str	r3, [r6, #0]
 80040bc:	3243      	adds	r2, #67	; 0x43
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d001      	beq.n	80040c8 <_printf_common+0x24>
 80040c4:	3301      	adds	r3, #1
 80040c6:	6033      	str	r3, [r6, #0]
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	069b      	lsls	r3, r3, #26
 80040cc:	d502      	bpl.n	80040d4 <_printf_common+0x30>
 80040ce:	6833      	ldr	r3, [r6, #0]
 80040d0:	3302      	adds	r3, #2
 80040d2:	6033      	str	r3, [r6, #0]
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	2306      	movs	r3, #6
 80040d8:	0015      	movs	r5, r2
 80040da:	401d      	ands	r5, r3
 80040dc:	421a      	tst	r2, r3
 80040de:	d027      	beq.n	8004130 <_printf_common+0x8c>
 80040e0:	0023      	movs	r3, r4
 80040e2:	3343      	adds	r3, #67	; 0x43
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	1e5a      	subs	r2, r3, #1
 80040e8:	4193      	sbcs	r3, r2
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	0692      	lsls	r2, r2, #26
 80040ee:	d430      	bmi.n	8004152 <_printf_common+0xae>
 80040f0:	0022      	movs	r2, r4
 80040f2:	9901      	ldr	r1, [sp, #4]
 80040f4:	9800      	ldr	r0, [sp, #0]
 80040f6:	9d08      	ldr	r5, [sp, #32]
 80040f8:	3243      	adds	r2, #67	; 0x43
 80040fa:	47a8      	blx	r5
 80040fc:	3001      	adds	r0, #1
 80040fe:	d025      	beq.n	800414c <_printf_common+0xa8>
 8004100:	2206      	movs	r2, #6
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	2500      	movs	r5, #0
 8004106:	4013      	ands	r3, r2
 8004108:	2b04      	cmp	r3, #4
 800410a:	d105      	bne.n	8004118 <_printf_common+0x74>
 800410c:	6833      	ldr	r3, [r6, #0]
 800410e:	68e5      	ldr	r5, [r4, #12]
 8004110:	1aed      	subs	r5, r5, r3
 8004112:	43eb      	mvns	r3, r5
 8004114:	17db      	asrs	r3, r3, #31
 8004116:	401d      	ands	r5, r3
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	6922      	ldr	r2, [r4, #16]
 800411c:	4293      	cmp	r3, r2
 800411e:	dd01      	ble.n	8004124 <_printf_common+0x80>
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	18ed      	adds	r5, r5, r3
 8004124:	2600      	movs	r6, #0
 8004126:	42b5      	cmp	r5, r6
 8004128:	d120      	bne.n	800416c <_printf_common+0xc8>
 800412a:	2000      	movs	r0, #0
 800412c:	e010      	b.n	8004150 <_printf_common+0xac>
 800412e:	3501      	adds	r5, #1
 8004130:	68e3      	ldr	r3, [r4, #12]
 8004132:	6832      	ldr	r2, [r6, #0]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	42ab      	cmp	r3, r5
 8004138:	ddd2      	ble.n	80040e0 <_printf_common+0x3c>
 800413a:	0022      	movs	r2, r4
 800413c:	2301      	movs	r3, #1
 800413e:	9901      	ldr	r1, [sp, #4]
 8004140:	9800      	ldr	r0, [sp, #0]
 8004142:	9f08      	ldr	r7, [sp, #32]
 8004144:	3219      	adds	r2, #25
 8004146:	47b8      	blx	r7
 8004148:	3001      	adds	r0, #1
 800414a:	d1f0      	bne.n	800412e <_printf_common+0x8a>
 800414c:	2001      	movs	r0, #1
 800414e:	4240      	negs	r0, r0
 8004150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004152:	2030      	movs	r0, #48	; 0x30
 8004154:	18e1      	adds	r1, r4, r3
 8004156:	3143      	adds	r1, #67	; 0x43
 8004158:	7008      	strb	r0, [r1, #0]
 800415a:	0021      	movs	r1, r4
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	3145      	adds	r1, #69	; 0x45
 8004160:	7809      	ldrb	r1, [r1, #0]
 8004162:	18a2      	adds	r2, r4, r2
 8004164:	3243      	adds	r2, #67	; 0x43
 8004166:	3302      	adds	r3, #2
 8004168:	7011      	strb	r1, [r2, #0]
 800416a:	e7c1      	b.n	80040f0 <_printf_common+0x4c>
 800416c:	0022      	movs	r2, r4
 800416e:	2301      	movs	r3, #1
 8004170:	9901      	ldr	r1, [sp, #4]
 8004172:	9800      	ldr	r0, [sp, #0]
 8004174:	9f08      	ldr	r7, [sp, #32]
 8004176:	321a      	adds	r2, #26
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	d0e6      	beq.n	800414c <_printf_common+0xa8>
 800417e:	3601      	adds	r6, #1
 8004180:	e7d1      	b.n	8004126 <_printf_common+0x82>
	...

08004184 <_printf_i>:
 8004184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004186:	b08b      	sub	sp, #44	; 0x2c
 8004188:	9206      	str	r2, [sp, #24]
 800418a:	000a      	movs	r2, r1
 800418c:	3243      	adds	r2, #67	; 0x43
 800418e:	9307      	str	r3, [sp, #28]
 8004190:	9005      	str	r0, [sp, #20]
 8004192:	9204      	str	r2, [sp, #16]
 8004194:	7e0a      	ldrb	r2, [r1, #24]
 8004196:	000c      	movs	r4, r1
 8004198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800419a:	2a78      	cmp	r2, #120	; 0x78
 800419c:	d809      	bhi.n	80041b2 <_printf_i+0x2e>
 800419e:	2a62      	cmp	r2, #98	; 0x62
 80041a0:	d80b      	bhi.n	80041ba <_printf_i+0x36>
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	d100      	bne.n	80041a8 <_printf_i+0x24>
 80041a6:	e0be      	b.n	8004326 <_printf_i+0x1a2>
 80041a8:	497c      	ldr	r1, [pc, #496]	; (800439c <_printf_i+0x218>)
 80041aa:	9103      	str	r1, [sp, #12]
 80041ac:	2a58      	cmp	r2, #88	; 0x58
 80041ae:	d100      	bne.n	80041b2 <_printf_i+0x2e>
 80041b0:	e093      	b.n	80042da <_printf_i+0x156>
 80041b2:	0026      	movs	r6, r4
 80041b4:	3642      	adds	r6, #66	; 0x42
 80041b6:	7032      	strb	r2, [r6, #0]
 80041b8:	e022      	b.n	8004200 <_printf_i+0x7c>
 80041ba:	0010      	movs	r0, r2
 80041bc:	3863      	subs	r0, #99	; 0x63
 80041be:	2815      	cmp	r0, #21
 80041c0:	d8f7      	bhi.n	80041b2 <_printf_i+0x2e>
 80041c2:	f7fb ffa7 	bl	8000114 <__gnu_thumb1_case_shi>
 80041c6:	0016      	.short	0x0016
 80041c8:	fff6001f 	.word	0xfff6001f
 80041cc:	fff6fff6 	.word	0xfff6fff6
 80041d0:	001ffff6 	.word	0x001ffff6
 80041d4:	fff6fff6 	.word	0xfff6fff6
 80041d8:	fff6fff6 	.word	0xfff6fff6
 80041dc:	003600a3 	.word	0x003600a3
 80041e0:	fff60083 	.word	0xfff60083
 80041e4:	00b4fff6 	.word	0x00b4fff6
 80041e8:	0036fff6 	.word	0x0036fff6
 80041ec:	fff6fff6 	.word	0xfff6fff6
 80041f0:	0087      	.short	0x0087
 80041f2:	0026      	movs	r6, r4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	3642      	adds	r6, #66	; 0x42
 80041f8:	1d11      	adds	r1, r2, #4
 80041fa:	6019      	str	r1, [r3, #0]
 80041fc:	6813      	ldr	r3, [r2, #0]
 80041fe:	7033      	strb	r3, [r6, #0]
 8004200:	2301      	movs	r3, #1
 8004202:	e0a2      	b.n	800434a <_printf_i+0x1c6>
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	1d02      	adds	r2, r0, #4
 800420a:	060d      	lsls	r5, r1, #24
 800420c:	d50b      	bpl.n	8004226 <_printf_i+0xa2>
 800420e:	6805      	ldr	r5, [r0, #0]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	2d00      	cmp	r5, #0
 8004214:	da03      	bge.n	800421e <_printf_i+0x9a>
 8004216:	232d      	movs	r3, #45	; 0x2d
 8004218:	9a04      	ldr	r2, [sp, #16]
 800421a:	426d      	negs	r5, r5
 800421c:	7013      	strb	r3, [r2, #0]
 800421e:	4b5f      	ldr	r3, [pc, #380]	; (800439c <_printf_i+0x218>)
 8004220:	270a      	movs	r7, #10
 8004222:	9303      	str	r3, [sp, #12]
 8004224:	e01b      	b.n	800425e <_printf_i+0xda>
 8004226:	6805      	ldr	r5, [r0, #0]
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	0649      	lsls	r1, r1, #25
 800422c:	d5f1      	bpl.n	8004212 <_printf_i+0x8e>
 800422e:	b22d      	sxth	r5, r5
 8004230:	e7ef      	b.n	8004212 <_printf_i+0x8e>
 8004232:	680d      	ldr	r5, [r1, #0]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	1d08      	adds	r0, r1, #4
 8004238:	6018      	str	r0, [r3, #0]
 800423a:	062e      	lsls	r6, r5, #24
 800423c:	d501      	bpl.n	8004242 <_printf_i+0xbe>
 800423e:	680d      	ldr	r5, [r1, #0]
 8004240:	e003      	b.n	800424a <_printf_i+0xc6>
 8004242:	066d      	lsls	r5, r5, #25
 8004244:	d5fb      	bpl.n	800423e <_printf_i+0xba>
 8004246:	680d      	ldr	r5, [r1, #0]
 8004248:	b2ad      	uxth	r5, r5
 800424a:	4b54      	ldr	r3, [pc, #336]	; (800439c <_printf_i+0x218>)
 800424c:	2708      	movs	r7, #8
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	2a6f      	cmp	r2, #111	; 0x6f
 8004252:	d000      	beq.n	8004256 <_printf_i+0xd2>
 8004254:	3702      	adds	r7, #2
 8004256:	0023      	movs	r3, r4
 8004258:	2200      	movs	r2, #0
 800425a:	3343      	adds	r3, #67	; 0x43
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	db03      	blt.n	800426e <_printf_i+0xea>
 8004266:	2104      	movs	r1, #4
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	438a      	bics	r2, r1
 800426c:	6022      	str	r2, [r4, #0]
 800426e:	2d00      	cmp	r5, #0
 8004270:	d102      	bne.n	8004278 <_printf_i+0xf4>
 8004272:	9e04      	ldr	r6, [sp, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00c      	beq.n	8004292 <_printf_i+0x10e>
 8004278:	9e04      	ldr	r6, [sp, #16]
 800427a:	0028      	movs	r0, r5
 800427c:	0039      	movs	r1, r7
 800427e:	f7fb ffd9 	bl	8000234 <__aeabi_uidivmod>
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	3e01      	subs	r6, #1
 8004286:	5c5b      	ldrb	r3, [r3, r1]
 8004288:	7033      	strb	r3, [r6, #0]
 800428a:	002b      	movs	r3, r5
 800428c:	0005      	movs	r5, r0
 800428e:	429f      	cmp	r7, r3
 8004290:	d9f3      	bls.n	800427a <_printf_i+0xf6>
 8004292:	2f08      	cmp	r7, #8
 8004294:	d109      	bne.n	80042aa <_printf_i+0x126>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	07db      	lsls	r3, r3, #31
 800429a:	d506      	bpl.n	80042aa <_printf_i+0x126>
 800429c:	6862      	ldr	r2, [r4, #4]
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dc02      	bgt.n	80042aa <_printf_i+0x126>
 80042a4:	2330      	movs	r3, #48	; 0x30
 80042a6:	3e01      	subs	r6, #1
 80042a8:	7033      	strb	r3, [r6, #0]
 80042aa:	9b04      	ldr	r3, [sp, #16]
 80042ac:	1b9b      	subs	r3, r3, r6
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	9b07      	ldr	r3, [sp, #28]
 80042b2:	0021      	movs	r1, r4
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	9805      	ldr	r0, [sp, #20]
 80042b8:	9b06      	ldr	r3, [sp, #24]
 80042ba:	aa09      	add	r2, sp, #36	; 0x24
 80042bc:	f7ff fef2 	bl	80040a4 <_printf_common>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d147      	bne.n	8004354 <_printf_i+0x1d0>
 80042c4:	2001      	movs	r0, #1
 80042c6:	4240      	negs	r0, r0
 80042c8:	b00b      	add	sp, #44	; 0x2c
 80042ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042cc:	2220      	movs	r2, #32
 80042ce:	6809      	ldr	r1, [r1, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	6022      	str	r2, [r4, #0]
 80042d4:	2278      	movs	r2, #120	; 0x78
 80042d6:	4932      	ldr	r1, [pc, #200]	; (80043a0 <_printf_i+0x21c>)
 80042d8:	9103      	str	r1, [sp, #12]
 80042da:	0021      	movs	r1, r4
 80042dc:	3145      	adds	r1, #69	; 0x45
 80042de:	700a      	strb	r2, [r1, #0]
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	c920      	ldmia	r1!, {r5}
 80042e6:	0610      	lsls	r0, r2, #24
 80042e8:	d402      	bmi.n	80042f0 <_printf_i+0x16c>
 80042ea:	0650      	lsls	r0, r2, #25
 80042ec:	d500      	bpl.n	80042f0 <_printf_i+0x16c>
 80042ee:	b2ad      	uxth	r5, r5
 80042f0:	6019      	str	r1, [r3, #0]
 80042f2:	07d3      	lsls	r3, r2, #31
 80042f4:	d502      	bpl.n	80042fc <_printf_i+0x178>
 80042f6:	2320      	movs	r3, #32
 80042f8:	4313      	orrs	r3, r2
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	2710      	movs	r7, #16
 80042fe:	2d00      	cmp	r5, #0
 8004300:	d1a9      	bne.n	8004256 <_printf_i+0xd2>
 8004302:	2220      	movs	r2, #32
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	4393      	bics	r3, r2
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	e7a4      	b.n	8004256 <_printf_i+0xd2>
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	680d      	ldr	r5, [r1, #0]
 8004310:	1d10      	adds	r0, r2, #4
 8004312:	6949      	ldr	r1, [r1, #20]
 8004314:	6018      	str	r0, [r3, #0]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	062e      	lsls	r6, r5, #24
 800431a:	d501      	bpl.n	8004320 <_printf_i+0x19c>
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0x1a2>
 8004320:	066d      	lsls	r5, r5, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0x198>
 8004324:	8019      	strh	r1, [r3, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	9e04      	ldr	r6, [sp, #16]
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	e7c0      	b.n	80042b0 <_printf_i+0x12c>
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	1d11      	adds	r1, r2, #4
 8004332:	6019      	str	r1, [r3, #0]
 8004334:	6816      	ldr	r6, [r2, #0]
 8004336:	2100      	movs	r1, #0
 8004338:	0030      	movs	r0, r6
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	f000 f858 	bl	80043f0 <memchr>
 8004340:	2800      	cmp	r0, #0
 8004342:	d001      	beq.n	8004348 <_printf_i+0x1c4>
 8004344:	1b80      	subs	r0, r0, r6
 8004346:	6060      	str	r0, [r4, #4]
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	2300      	movs	r3, #0
 800434e:	9a04      	ldr	r2, [sp, #16]
 8004350:	7013      	strb	r3, [r2, #0]
 8004352:	e7ad      	b.n	80042b0 <_printf_i+0x12c>
 8004354:	0032      	movs	r2, r6
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	9906      	ldr	r1, [sp, #24]
 800435a:	9805      	ldr	r0, [sp, #20]
 800435c:	9d07      	ldr	r5, [sp, #28]
 800435e:	47a8      	blx	r5
 8004360:	3001      	adds	r0, #1
 8004362:	d0af      	beq.n	80042c4 <_printf_i+0x140>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	079b      	lsls	r3, r3, #30
 8004368:	d415      	bmi.n	8004396 <_printf_i+0x212>
 800436a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436c:	68e0      	ldr	r0, [r4, #12]
 800436e:	4298      	cmp	r0, r3
 8004370:	daaa      	bge.n	80042c8 <_printf_i+0x144>
 8004372:	0018      	movs	r0, r3
 8004374:	e7a8      	b.n	80042c8 <_printf_i+0x144>
 8004376:	0022      	movs	r2, r4
 8004378:	2301      	movs	r3, #1
 800437a:	9906      	ldr	r1, [sp, #24]
 800437c:	9805      	ldr	r0, [sp, #20]
 800437e:	9e07      	ldr	r6, [sp, #28]
 8004380:	3219      	adds	r2, #25
 8004382:	47b0      	blx	r6
 8004384:	3001      	adds	r0, #1
 8004386:	d09d      	beq.n	80042c4 <_printf_i+0x140>
 8004388:	3501      	adds	r5, #1
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	42ab      	cmp	r3, r5
 8004392:	dcf0      	bgt.n	8004376 <_printf_i+0x1f2>
 8004394:	e7e9      	b.n	800436a <_printf_i+0x1e6>
 8004396:	2500      	movs	r5, #0
 8004398:	e7f7      	b.n	800438a <_printf_i+0x206>
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	080045c9 	.word	0x080045c9
 80043a0:	080045da 	.word	0x080045da

080043a4 <memmove>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4288      	cmp	r0, r1
 80043a8:	d902      	bls.n	80043b0 <memmove+0xc>
 80043aa:	188b      	adds	r3, r1, r2
 80043ac:	4298      	cmp	r0, r3
 80043ae:	d303      	bcc.n	80043b8 <memmove+0x14>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e007      	b.n	80043c4 <memmove+0x20>
 80043b4:	5c8b      	ldrb	r3, [r1, r2]
 80043b6:	5483      	strb	r3, [r0, r2]
 80043b8:	3a01      	subs	r2, #1
 80043ba:	d2fb      	bcs.n	80043b4 <memmove+0x10>
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	5ccc      	ldrb	r4, [r1, r3]
 80043c0:	54c4      	strb	r4, [r0, r3]
 80043c2:	3301      	adds	r3, #1
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1fa      	bne.n	80043be <memmove+0x1a>
 80043c8:	e7f8      	b.n	80043bc <memmove+0x18>
	...

080043cc <_sbrk_r>:
 80043cc:	2300      	movs	r3, #0
 80043ce:	b570      	push	{r4, r5, r6, lr}
 80043d0:	4d06      	ldr	r5, [pc, #24]	; (80043ec <_sbrk_r+0x20>)
 80043d2:	0004      	movs	r4, r0
 80043d4:	0008      	movs	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fc fcea 	bl	8000db0 <_sbrk>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d103      	bne.n	80043e8 <_sbrk_r+0x1c>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d000      	beq.n	80043e8 <_sbrk_r+0x1c>
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	20000438 	.word	0x20000438

080043f0 <memchr>:
 80043f0:	b2c9      	uxtb	r1, r1
 80043f2:	1882      	adds	r2, r0, r2
 80043f4:	4290      	cmp	r0, r2
 80043f6:	d101      	bne.n	80043fc <memchr+0xc>
 80043f8:	2000      	movs	r0, #0
 80043fa:	4770      	bx	lr
 80043fc:	7803      	ldrb	r3, [r0, #0]
 80043fe:	428b      	cmp	r3, r1
 8004400:	d0fb      	beq.n	80043fa <memchr+0xa>
 8004402:	3001      	adds	r0, #1
 8004404:	e7f6      	b.n	80043f4 <memchr+0x4>

08004406 <memcpy>:
 8004406:	2300      	movs	r3, #0
 8004408:	b510      	push	{r4, lr}
 800440a:	429a      	cmp	r2, r3
 800440c:	d100      	bne.n	8004410 <memcpy+0xa>
 800440e:	bd10      	pop	{r4, pc}
 8004410:	5ccc      	ldrb	r4, [r1, r3]
 8004412:	54c4      	strb	r4, [r0, r3]
 8004414:	3301      	adds	r3, #1
 8004416:	e7f8      	b.n	800440a <memcpy+0x4>

08004418 <_realloc_r>:
 8004418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441a:	0007      	movs	r7, r0
 800441c:	000e      	movs	r6, r1
 800441e:	0014      	movs	r4, r2
 8004420:	2900      	cmp	r1, #0
 8004422:	d105      	bne.n	8004430 <_realloc_r+0x18>
 8004424:	0011      	movs	r1, r2
 8004426:	f7ff fc49 	bl	8003cbc <_malloc_r>
 800442a:	0005      	movs	r5, r0
 800442c:	0028      	movs	r0, r5
 800442e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004430:	2a00      	cmp	r2, #0
 8004432:	d103      	bne.n	800443c <_realloc_r+0x24>
 8004434:	f7ff fbd6 	bl	8003be4 <_free_r>
 8004438:	0025      	movs	r5, r4
 800443a:	e7f7      	b.n	800442c <_realloc_r+0x14>
 800443c:	f000 f81b 	bl	8004476 <_malloc_usable_size_r>
 8004440:	9001      	str	r0, [sp, #4]
 8004442:	4284      	cmp	r4, r0
 8004444:	d803      	bhi.n	800444e <_realloc_r+0x36>
 8004446:	0035      	movs	r5, r6
 8004448:	0843      	lsrs	r3, r0, #1
 800444a:	42a3      	cmp	r3, r4
 800444c:	d3ee      	bcc.n	800442c <_realloc_r+0x14>
 800444e:	0021      	movs	r1, r4
 8004450:	0038      	movs	r0, r7
 8004452:	f7ff fc33 	bl	8003cbc <_malloc_r>
 8004456:	1e05      	subs	r5, r0, #0
 8004458:	d0e8      	beq.n	800442c <_realloc_r+0x14>
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	0022      	movs	r2, r4
 800445e:	429c      	cmp	r4, r3
 8004460:	d900      	bls.n	8004464 <_realloc_r+0x4c>
 8004462:	001a      	movs	r2, r3
 8004464:	0031      	movs	r1, r6
 8004466:	0028      	movs	r0, r5
 8004468:	f7ff ffcd 	bl	8004406 <memcpy>
 800446c:	0031      	movs	r1, r6
 800446e:	0038      	movs	r0, r7
 8004470:	f7ff fbb8 	bl	8003be4 <_free_r>
 8004474:	e7da      	b.n	800442c <_realloc_r+0x14>

08004476 <_malloc_usable_size_r>:
 8004476:	1f0b      	subs	r3, r1, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	1f18      	subs	r0, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	da01      	bge.n	8004484 <_malloc_usable_size_r+0xe>
 8004480:	580b      	ldr	r3, [r1, r0]
 8004482:	18c0      	adds	r0, r0, r3
 8004484:	4770      	bx	lr
	...

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
